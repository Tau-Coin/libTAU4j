/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_libTAU_jni = NULL;
    jmethodID director_method_ids[3];
  }
}

// BEGIN common set include ----------------------------------------------------

#include "libTAU/flags.hpp"
#include "libTAU/address.hpp"
#include "libTAU/socket.hpp"
#include "libTAU/kademlia/dht_state.hpp"
#include "libTAU/communication/message.hpp"
#include "libTAU/client_data.hpp"
#include "libTAU/sha1_hash.hpp"
#include "libTAU/info_hash.hpp"
#include "libTAU/storage_defs.hpp"
#include "libTAU/bitfield.hpp"
#include "libTAU/operations.hpp"
#include "libTAU/error_code.hpp"
#include "libTAU/announce_entry.hpp"
#include "libTAU/file_storage.hpp"
#include "libTAU/peer_request.hpp"
#include "libTAU/bdecode.hpp"
#include "libTAU/torrent_info.hpp"
#include "libTAU/torrent_flags.hpp"
#include "libTAU/add_torrent_params.hpp"
#include "libTAU/close_reason.hpp"
#include "libTAU/peer_info.hpp"
#include "libTAU/pex_flags.hpp"
#include "libTAU/torrent_status.hpp"
#include "libTAU/torrent_handle.hpp"
#include "libTAU/performance_counters.hpp"
#include "libTAU/portmap.hpp"
#include "libTAU/piece_block.hpp"
#include "libTAU/socket_type.hpp"
#include "libTAU/entry.hpp"
#include "libTAU/tracker_event.hpp"
#include "libTAU/alert.hpp"
#include "libTAU/alert_types.hpp"
#include "libTAU/settings_pack.hpp"
#include "libTAU/peer_class.hpp"
#include "libTAU/peer_class_type_filter.hpp"
#include "libTAU/ip_filter.hpp"
#include "libTAU/session_types.hpp"
#include "libTAU/session_params.hpp"
#include "libTAU/session_handle.hpp"
#include "libTAU/session.hpp"
#include "libTAU/file_storage.hpp"
#include "libTAU/create_torrent.hpp"
#include "libTAU/session_stats.hpp"
#include "libTAU/version.hpp"
#include "libTAU/magnet_uri.hpp"
#include "libTAU/fingerprint.hpp"
#include "libTAU/read_resume_data.hpp"
#include "libTAU/write_resume_data.hpp"

#include <libTAU/hex.hpp>
#include <libTAU/bencode.hpp>

namespace lt = libTAU;

using piece_index_t = libTAU::piece_index_t;
using file_index_t = libTAU::file_index_t;
using queue_position_t = libTAU::queue_position_t;

#include "libTAU.hpp"

template <typename IndexType>
using typed_bitfield = libTAU::typed_bitfield<IndexType>;

// END common set include ------------------------------------------------------


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_directBufferAddress(JNIEnv *jenv, jclass jcls, jobject jbuf) {
    try {
        return jlong(jenv->GetDirectBufferAddress(jbuf));
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
    }

    return 0;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_directBufferCapacity(JNIEnv *jenv, jclass jcls, jobject jbuf) {
    try {
        return jlong(jenv->GetDirectBufferCapacity(jbuf));
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
    }

    return 0;
}

#ifdef __cplusplus
}
#endif


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <typeinfo>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< long long >::const_reference std_vector_Sl_long_SS_long_Sg__get(std::vector< long long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__set(std::vector< long long > *self,int i,std::vector< long long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< signed char >::const_reference std_vector_Sl_std_int8_t_Sg__get(std::vector< std::int8_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_int8_t_Sg__set(std::vector< std::int8_t > *self,int i,std::vector< signed char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN bool std_vector_Sl_bool_Sg__get(std::vector< bool > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_bool_Sg__set(std::vector< bool > *self,int i,std::vector< bool >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< char >::const_reference std_vector_Sl_char_Sg__get(std::vector< char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_char_Sg__set(std::vector< char > *self,int i,std::vector< char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< int,signed char > >::const_reference std_vector_Sl_std_pair_Sl_int_Sc_std_int8_t_Sg__Sg__get(std::vector< std::pair< int,std::int8_t > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_std_int8_t_Sg__Sg__set(std::vector< std::pair< int,std::int8_t > > *self,int i,std::vector< std::pair< int,signed char > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< std::string,int > >::const_reference std_vector_Sl_std_pair_Sl_std_string_Sc_int_Sg__Sg__get(std::vector< std::pair< std::string,int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_int_Sg__Sg__set(std::vector< std::pair< std::string,int > > *self,int i,std::vector< std::pair< std::string,int > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< std::string,std::string > >::const_reference std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__get(std::vector< std::pair< std::string,std::string > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__set(std::vector< std::pair< std::string,std::string > > *self,int i,std::vector< std::pair< std::string,std::string > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::tcp::endpoint >::const_reference std_vector_Sl_libTAU_tcp_endpoint_Sg__get(std::vector< libTAU::tcp::endpoint > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_tcp_endpoint_Sg__set(std::vector< libTAU::tcp::endpoint > *self,int i,std::vector< libTAU::tcp::endpoint >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::udp::endpoint >::const_reference std_vector_Sl_libTAU_udp_endpoint_Sg__get(std::vector< libTAU::udp::endpoint > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_udp_endpoint_Sg__set(std::vector< libTAU::udp::endpoint > *self,int i,std::vector< libTAU::udp::endpoint >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::announce_endpoint >::const_reference std_vector_Sl_libTAU_announce_endpoint_Sg__get(std::vector< libTAU::announce_endpoint > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_announce_endpoint_Sg__set(std::vector< libTAU::announce_endpoint > *self,int i,std::vector< libTAU::announce_endpoint >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::announce_entry >::const_reference std_vector_Sl_libTAU_announce_entry_Sg__get(std::vector< libTAU::announce_entry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_announce_entry_Sg__set(std::vector< libTAU::announce_entry > *self,int i,std::vector< libTAU::announce_entry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::file_slice >::const_reference std_vector_Sl_libTAU_file_slice_Sg__get(std::vector< libTAU::file_slice > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_file_slice_Sg__set(std::vector< libTAU::file_slice > *self,int i,std::vector< libTAU::file_slice >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::piece_block >::const_reference std_vector_Sl_libTAU_piece_block_Sg__get(std::vector< libTAU::piece_block > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_piece_block_Sg__set(std::vector< libTAU::piece_block > *self,int i,std::vector< libTAU::piece_block >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::torrent_status >::const_reference std_vector_Sl_libTAU_torrent_status_Sg__get(std::vector< libTAU::torrent_status > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_torrent_status_Sg__set(std::vector< libTAU::torrent_status > *self,int i,std::vector< libTAU::torrent_status >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::dht_lookup >::const_reference std_vector_Sl_libTAU_dht_lookup_Sg__get(std::vector< libTAU::dht_lookup > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_dht_lookup_Sg__set(std::vector< libTAU::dht_lookup > *self,int i,std::vector< libTAU::dht_lookup >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::dht_routing_bucket >::const_reference std_vector_Sl_libTAU_dht_routing_bucket_Sg__get(std::vector< libTAU::dht_routing_bucket > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_dht_routing_bucket_Sg__set(std::vector< libTAU::dht_routing_bucket > *self,int i,std::vector< libTAU::dht_routing_bucket >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::entry >::const_reference std_vector_Sl_libTAU_entry_Sg__get(std::vector< libTAU::entry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_entry_Sg__set(std::vector< libTAU::entry > *self,int i,std::vector< libTAU::entry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::partial_piece_info >::const_reference std_vector_Sl_libTAU_partial_piece_info_Sg__get(std::vector< libTAU::partial_piece_info > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_partial_piece_info_Sg__set(std::vector< libTAU::partial_piece_info > *self,int i,std::vector< libTAU::partial_piece_info >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::peer_info >::const_reference std_vector_Sl_libTAU_peer_info_Sg__get(std::vector< libTAU::peer_info > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_peer_info_Sg__set(std::vector< libTAU::peer_info > *self,int i,std::vector< libTAU::peer_info >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::torrent_handle >::const_reference std_vector_Sl_libTAU_torrent_handle_Sg__get(std::vector< libTAU::torrent_handle > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_torrent_handle_Sg__set(std::vector< libTAU::torrent_handle > *self,int i,std::vector< libTAU::torrent_handle >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::alert * >::const_reference std_vector_Sl_libTAU_alert_Sm__Sg__get(std::vector< libTAU::alert * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_alert_Sm__Sg__set(std::vector< libTAU::alert * > *self,int i,std::vector< libTAU::alert * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::stats_metric >::const_reference std_vector_Sl_libTAU_stats_metric_Sg__get(std::vector< libTAU::stats_metric > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_stats_metric_Sg__set(std::vector< libTAU::stats_metric > *self,int i,std::vector< libTAU::stats_metric >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ip_interface >::const_reference std_vector_Sl_ip_interface_Sg__get(std::vector< ip_interface > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ip_interface_Sg__set(std::vector< ip_interface > *self,int i,std::vector< ip_interface >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ip_route >::const_reference std_vector_Sl_ip_route_Sg__get(std::vector< ip_route > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ip_route_Sg__set(std::vector< ip_route > *self,int i,std::vector< ip_route >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< bool > >::const_reference std_vector_Sl_std_vector_Sl_bool_Sg__Sg__get(std::vector< std::vector< bool > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_bool_Sg__Sg__set(std::vector< std::vector< bool > > *self,int i,std::vector< std::vector< bool > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< libTAU::digest32< 256 > > >::const_reference std_vector_Sl_std_vector_Sl_libTAU_digest32_Sl_256_Sg__Sg__Sg__get(std::vector< std::vector< libTAU::digest32< 256 > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_libTAU_digest32_Sl_256_Sg__Sg__Sg__set(std::vector< std::vector< libTAU::digest32< 256 > > > *self,int i,std::vector< std::vector< libTAU::digest32< 256 > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::const_reference std_vector_Sl_std_pair_Sl_libTAU_digest32_Sl_256_Sg__Sc_libTAU_udp_endpoint_Sg__Sg__get(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_libTAU_digest32_Sl_256_Sg__Sc_libTAU_udp_endpoint_Sg__Sg__set(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *self,int i,std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::const_reference std_vector_Sl_std_pair_Sl_libTAU_address_Sc_libTAU_digest32_Sl_256_Sg__Sg__Sg__get(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_libTAU_address_Sc_libTAU_digest32_Sl_256_Sg__Sg__Sg__set(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *self,int i,std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::array< signed char,32 >::const_reference std_array_Sl_std_int8_t_Sc_32_Sg__get(std::array< std::int8_t,32 > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN void std_array_Sl_std_int8_t_Sc_32_Sg__set(std::array< std::int8_t,32 > *self,int i,std::array< signed char,32 >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN std::array< signed char,64 >::const_reference std_array_Sl_std_int8_t_Sc_64_Sg__get(std::array< std::int8_t,64 > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN void std_array_Sl_std_int8_t_Sc_64_Sg__set(std::array< std::int8_t,64 > *self,int i,std::array< signed char,64 >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN std::vector< std::array< signed char,32 > >::const_reference std_vector_Sl_std_array_Sl_std_int8_t_Sc_32_Sg__Sg__get(std::vector< std::array< std::int8_t,32 > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_array_Sl_std_int8_t_Sc_32_Sg__Sg__set(std::vector< std::array< std::int8_t,32 > > *self,int i,std::vector< std::array< signed char,32 > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::array< unsigned char,32 >::const_reference std_array_Sl_std_uint8_t_Sc_32_Sg__get(std::array< std::uint8_t,32 > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN void std_array_Sl_std_uint8_t_Sc_32_Sg__set(std::array< std::uint8_t,32 > *self,int i,std::array< unsigned char,32 >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("array index out of range");
      }
SWIGINTERN std::string const &std_map_Sl_int_Sc_std_string_Sg__get(std::map< int,std::string > *self,int const &key){
                std::map<int,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__set(std::map< int,std::string > *self,int const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__del(std::map< int,std::string > *self,int const &key){
                std::map<int,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg__has_key(std::map< int,std::string > *self,int const &key){
                std::map<int,std::string >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN libTAU::bitfield const &std_map_Sl_int_Sc_libTAU_bitfield_Sg__get(std::map< int,libTAU::bitfield > *self,int const &key){
                std::map<int,libTAU::bitfield >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_libTAU_bitfield_Sg__set(std::map< int,libTAU::bitfield > *self,int const &key,libTAU::bitfield const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_libTAU_bitfield_Sg__del(std::map< int,libTAU::bitfield > *self,int const &key){
                std::map<int,libTAU::bitfield >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_libTAU_bitfield_Sg__has_key(std::map< int,libTAU::bitfield > *self,int const &key){
                std::map<int,libTAU::bitfield >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN libTAU::entry const &std_map_Sl_std_string_Sc_libTAU_entry_Sg__get(std::map< std::string,libTAU::entry > *self,std::string const &key){
                std::map<std::string,libTAU::entry >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_libTAU_entry_Sg__set(std::map< std::string,libTAU::entry > *self,std::string const &key,libTAU::entry const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_libTAU_entry_Sg__del(std::map< std::string,libTAU::entry > *self,std::string const &key){
                std::map<std::string,libTAU::entry >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_libTAU_entry_Sg__has_key(std::map< std::string,libTAU::entry > *self,std::string const &key){
                std::map<std::string,libTAU::entry >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN bool boost_container_map_Sl_std_string_Sc_libTAU_entry_Sg__contains(boost::container::map< std::string,libTAU::entry > *self,std::string const &k){
            return self->contains(k);
        }
SWIGINTERN void boost_container_map_Sl_std_string_Sc_libTAU_entry_Sg__put(boost::container::map< std::string,libTAU::entry > *self,std::string const &k,libTAU::entry &v){
            self->operator[](k) = v;
        }
SWIGINTERN libTAU::entry &boost_container_map_Sl_std_string_Sc_libTAU_entry_Sg__get(boost::container::map< std::string,libTAU::entry > *self,std::string const &k){
            return self->operator[](k);
        }
SWIGINTERN std::vector< std::string > boost_container_map_Sl_std_string_Sc_libTAU_entry_Sg__keys(boost::container::map< std::string,libTAU::entry > *self){
            std::vector<std::string> r;

            for (auto const& e : *self)
            {
                r.emplace_back(e.first);
            }

            return r;
        }
SWIGINTERN void boost_container_map_Sl_std_string_Sc_libTAU_entry_Sg__remove(boost::container::map< std::string,libTAU::entry > *self,std::string const &key){
            self->extract(key);
        }
SWIGINTERN bool std_bitset_Sl_128_Sg__get(std::bitset< 128 > *self,std::size_t pos){
            return (*self)[pos];
        }
SWIGINTERN bool libTAU_address_op_lt(libTAU::address *self,libTAU::address const &a2){
            return *self < a2;
        }
SWIGINTERN int libTAU_address_compare(libTAU::address const &a1,libTAU::address const &a2){
            return a1 == a2 ? 0 : (a1 < a2 ? -1 : 1);
        }
SWIGINTERN libTAU::address libTAU_address_from_string(std::string const &str,boost::system::error_code &ec){
            return boost::asio::ip::make_address(str, ec);
        }
SWIGINTERN int libTAU_address_hash_code(libTAU::address *self){
            if (self->is_v4())
            {
                auto data = self->to_v4().to_bytes();
                int result = 1;
                for (int i = 0; i < int(data.size()); i++)
                {
                    result = 31 * result + data[i];
                }
                return result;
            }
            else
            {
                auto data = self->to_v6().to_bytes();
                int result = 1;
                for (int i = 0; i < int(data.size()); i++)
                {
                    result = 31 * result + data[i];
                }
                return result;
            }
        }
SWIGINTERN void *libTAU_client_data_t_get(libTAU::client_data_t *self){
        return self->get<void>();
    }
SWIGINTERN libTAU::digest32< 160 > *new_libTAU_digest32_Sl_160_Sg___SWIG_2(std::vector< std::int8_t > const &v){
        return new lt::digest32<160>(lt::span(reinterpret_cast<char const*>(v.data()), static_cast<long>(v.size())));
    }
SWIGINTERN void libTAU_digest32_Sl_160_Sg__assign(libTAU::digest32< 160 > *self,std::vector< std::int8_t > const &v){
        self->assign(reinterpret_cast<char const*>(v.data()));
    }
SWIGINTERN int libTAU_digest32_Sl_160_Sg__hash_code(libTAU::digest32< 160 > *self){
        char const* data = self->data();
        int result = 1;
        for (int i = 0; i < int(self->size()); i++)
        {
            result = 31 * result + data[i];
        }
        return result;
    }
SWIGINTERN std::vector< std::int8_t > libTAU_digest32_Sl_160_Sg__to_bytes(libTAU::digest32< 160 > *self){
        std::string s = self->to_string();
        return std::vector<std::int8_t>(s.begin(), s.end());
    }
SWIGINTERN std::string libTAU_digest32_Sl_160_Sg__to_hex(libTAU::digest32< 160 > *self){
        return libTAU::aux::to_hex(*self);
    }
SWIGINTERN libTAU::digest32< 160 > libTAU_digest32_Sl_160_Sg__from_hex(std::string s){
        libTAU::digest32<160> hash;
        libTAU::aux::from_hex(s, hash.data());
        return hash;
    }
SWIGINTERN int libTAU_digest32_Sl_160_Sg__compare(libTAU::digest32< 160 > const &h1,libTAU::digest32< 160 > const &h2){
        return h1 == h2 ? 0 : (h1 < h2 ? -1 : 1);
    }
SWIGINTERN libTAU::digest32< 256 > *new_libTAU_digest32_Sl_256_Sg___SWIG_2(std::vector< std::int8_t > const &v){
        return new lt::digest32<256>(lt::span(reinterpret_cast<char const*>(v.data()), static_cast<long>(v.size())));
    }
SWIGINTERN void libTAU_digest32_Sl_256_Sg__assign(libTAU::digest32< 256 > *self,std::vector< std::int8_t > const &v){
        self->assign(reinterpret_cast<char const*>(v.data()));
    }
SWIGINTERN int libTAU_digest32_Sl_256_Sg__hash_code(libTAU::digest32< 256 > *self){
        char const* data = self->data();
        int result = 1;
        for (int i = 0; i < int(self->size()); i++)
        {
            result = 31 * result + data[i];
        }
        return result;
    }
SWIGINTERN std::vector< std::int8_t > libTAU_digest32_Sl_256_Sg__to_bytes(libTAU::digest32< 256 > *self){
        std::string s = self->to_string();
        return std::vector<std::int8_t>(s.begin(), s.end());
    }
SWIGINTERN std::string libTAU_digest32_Sl_256_Sg__to_hex(libTAU::digest32< 256 > *self){
        return libTAU::aux::to_hex(*self);
    }
SWIGINTERN libTAU::digest32< 256 > libTAU_digest32_Sl_256_Sg__from_hex(std::string s){
        libTAU::digest32<256> hash;
        libTAU::aux::from_hex(s, hash.data());
        return hash;
    }
SWIGINTERN int libTAU_digest32_Sl_256_Sg__compare(libTAU::digest32< 256 > const &h1,libTAU::digest32< 256 > const &h2){
        return h1 == h2 ? 0 : (h1 < h2 ? -1 : 1);
    }
SWIGINTERN std::vector< libTAU::digest32< 160 > >::const_reference std_vector_Sl_libTAU_digest32_Sl_160_Sg__Sg__get(std::vector< libTAU::digest32< 160 > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_digest32_Sl_160_Sg__Sg__set(std::vector< libTAU::digest32< 160 > > *self,int i,std::vector< libTAU::digest32< 160 > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< libTAU::digest32< 256 > >::const_reference std_vector_Sl_libTAU_digest32_Sl_256_Sg__Sg__get(std::vector< libTAU::digest32< 256 > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_libTAU_digest32_Sl_256_Sg__Sg__set(std::vector< libTAU::digest32< 256 > > *self,int i,std::vector< libTAU::digest32< 256 > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN bool libTAU_info_hash_t_op_eq(libTAU::info_hash_t const *self,libTAU::info_hash_t const &n){
        return *self == n;
    }
SWIGINTERN bool libTAU_info_hash_t_op_ne(libTAU::info_hash_t const *self,libTAU::info_hash_t const &n){
        return *self != n;
    }
SWIGINTERN libTAU::bitfield *new_libTAU_bitfield__SWIG_4(std::vector< std::int8_t > const &v){
        return new libTAU::bitfield({reinterpret_cast<char const*>(v.data()), static_cast<int>(v.size())});
    }
SWIGINTERN void libTAU_bitfield_assign(libTAU::bitfield *self,std::vector< std::int8_t > const &v){
        self->assign(reinterpret_cast<char const*>(v.data()), static_cast<int>(v.size()));
    }
SWIGINTERN std::int64_t libTAU_announce_infohash_get_next_announce(libTAU::announce_infohash *self){
        return lt::total_milliseconds(self->next_announce.time_since_epoch());
    }
SWIGINTERN std::int64_t libTAU_announce_infohash_get_min_announce(libTAU::announce_infohash *self){
        return lt::total_milliseconds(self->min_announce.time_since_epoch());
    }
SWIGINTERN libTAU::announce_infohash libTAU_announce_endpoint_get_infohash_v1(libTAU::announce_endpoint *self){
        return self->info_hashes[lt::protocol_version::V1];
    }
SWIGINTERN libTAU::announce_infohash libTAU_announce_endpoint_get_infohash_v2(libTAU::announce_endpoint *self){
        return self->info_hashes[lt::protocol_version::V2];
    }
SWIGINTERN libTAU::announce_entry *new_libTAU_announce_entry__SWIG_2(std::string url){
        return new lt::announce_entry(url);
    }
SWIGINTERN void libTAU_file_storage_add_file_ex__SWIG_0(libTAU::file_storage *self,libTAU::error_code &ec,std::string const &path,std::int64_t file_size,libTAU::file_flags_t file_flags={},std::time_t mtime=0,std::string symlink_path={}){
        self->add_file(ec, path, file_size, file_flags, mtime, symlink_path);
    }
SWIGINTERN std::string libTAU_file_storage_file_name_ex(libTAU::file_storage *self,int index){
        return std::string{self->file_name(lt::file_index_t{index})};
    }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::file_flags_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN std::string libTAU_bdecode_node_list_string_value_at_ex__SWIG_0(libTAU::bdecode_node *self,int i,std::string default_val=""){
        return std::string{self->list_string_value_at(i, default_val)};
    }
SWIGINTERN libTAU::bdecode_node libTAU_bdecode_node_dict_find_ex(libTAU::bdecode_node const *self,std::string key){
        return self->dict_find(key);
    }
SWIGINTERN libTAU::bdecode_node libTAU_bdecode_node_dict_find_dict_ex(libTAU::bdecode_node const *self,std::string key){
        return self->dict_find_dict(key);
    }
SWIGINTERN libTAU::bdecode_node libTAU_bdecode_node_dict_find_list_ex(libTAU::bdecode_node const *self,std::string key){
        return self->dict_find_list(key);
    }
SWIGINTERN libTAU::bdecode_node libTAU_bdecode_node_dict_find_string_ex(libTAU::bdecode_node const *self,std::string key){
        return self->dict_find_string(key);
    }
SWIGINTERN libTAU::bdecode_node libTAU_bdecode_node_dict_find_int_ex(libTAU::bdecode_node const *self,std::string key){
        return self->dict_find_int(key);
    }
SWIGINTERN std::string libTAU_bdecode_node_dict_find_string_value_ex__SWIG_0(libTAU::bdecode_node const *self,std::string key,std::string default_value=""){
        return std::string{self->dict_find_string_value(key, default_value)};
    }
SWIGINTERN std::int64_t libTAU_bdecode_node_dict_find_int_value_ex__SWIG_0(libTAU::bdecode_node const *self,std::string key,std::int64_t default_val=0){
        return self->dict_find_int_value(key, default_val);
    }
SWIGINTERN std::string libTAU_bdecode_node_string_value_ex(libTAU::bdecode_node const *self){
        return std::string{self->string_value()};
    }
SWIGINTERN std::string libTAU_bdecode_node_to_string(libTAU::bdecode_node const &e,bool single_line,int indent){
        return libTAU::print_entry(e, single_line, indent);
    }
SWIGINTERN int libTAU_bdecode_node_bdecode(std::vector< std::int8_t > &buffer,libTAU::bdecode_node &ret,libTAU::error_code &ec){
        return libTAU::bdecode((char const*)&buffer[0], (char const*)&buffer[0] + buffer.size(), ret, ec);
    }
SWIGINTERN libTAU::torrent_info *new_libTAU_torrent_info__SWIG_4(std::int64_t buffer_ptr,int size,libTAU::error_code &ec){
        return new libTAU::torrent_info(reinterpret_cast<char const*>(buffer_ptr), size, ec);
    }
SWIGINTERN libTAU::span< std::int8_t const > libTAU_torrent_info_get_info_section(libTAU::torrent_info *self){
        auto v = self->info_section();
        return libTAU::span<std::int8_t const>({reinterpret_cast<std::int8_t const*>(v.data()), v.size()});
    }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint64_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint64_t, libTAU::torrent_flags_tag>(static_cast<std::uint64_t>(val));
        }
SWIGINTERN libTAU::torrent_info const *libTAU_add_torrent_params_ti_ptr(libTAU::add_torrent_params *self){
        return self->ti.get();
    }
SWIGINTERN void libTAU_add_torrent_params_set_ti(libTAU::add_torrent_params *self,libTAU::torrent_info const &ti){
        self->ti = std::make_shared<libTAU::torrent_info>(ti);
    }
SWIGINTERN std::vector< std::int8_t > libTAU_add_torrent_params_get_file_priorities(libTAU::add_torrent_params *self){
        auto* v = &self->file_priorities;
        return *reinterpret_cast<std::vector<std::int8_t>*>(v);
    }
SWIGINTERN void libTAU_add_torrent_params_set_file_priorities(libTAU::add_torrent_params *self,std::vector< std::int8_t > &v){
        auto* t = reinterpret_cast<std::vector<libTAU::download_priority_t>*>(&v);
        self->file_priorities = *t;
    }
SWIGINTERN std::vector< std::int8_t > libTAU_add_torrent_params_get_piece_priorities(libTAU::add_torrent_params *self){
        auto* v = &self->piece_priorities;
        return *reinterpret_cast<std::vector<std::int8_t>*>(v);
    }
SWIGINTERN void libTAU_add_torrent_params_set_piece_priorities(libTAU::add_torrent_params *self,std::vector< std::int8_t > &v){
        auto* t = reinterpret_cast<std::vector<libTAU::download_priority_t>*>(&v);
        self->piece_priorities = *t;
    }
SWIGINTERN std::vector< std::vector< libTAU::sha256_hash > > libTAU_add_torrent_params_get_merkle_trees(libTAU::add_torrent_params *self){
        auto* v = &self->merkle_trees;
        return *reinterpret_cast<std::vector<std::vector<libTAU::sha256_hash>>*>(v);
    }
SWIGINTERN void libTAU_add_torrent_params_set_merkle_trees(libTAU::add_torrent_params *self,std::vector< std::vector< libTAU::sha256_hash > > &v){
        auto* t = reinterpret_cast<libTAU::aux::vector<std::vector<libTAU::sha256_hash>, libTAU::file_index_t>*>(&v);
        self->merkle_trees = *t;
    }
SWIGINTERN std::vector< std::vector< bool > > libTAU_add_torrent_params_get_merkle_tree_mask(libTAU::add_torrent_params *self){
        auto* v = &self->merkle_tree_mask;
        return *reinterpret_cast<std::vector<std::vector<bool>>*>(v);
    }
SWIGINTERN void libTAU_add_torrent_params_set_merkle_tree_mask(libTAU::add_torrent_params *self,std::vector< std::vector< bool > > &v){
        auto* t = reinterpret_cast<lt::aux::vector<std::vector<bool>, libTAU::file_index_t>*>(&v);
        self->merkle_tree_mask = *t;
    }
SWIGINTERN std::vector< std::vector< bool > > libTAU_add_torrent_params_get_verified_leaf_hashes(libTAU::add_torrent_params *self){
        auto* v = &self->verified_leaf_hashes;
        return *reinterpret_cast<std::vector<std::vector<bool>>*>(v);
    }
SWIGINTERN void libTAU_add_torrent_params_set_verified_leaf_hashes(libTAU::add_torrent_params *self,std::vector< std::vector< bool > > &v){
        auto* t = reinterpret_cast<libTAU::aux::vector<std::vector<bool>, libTAU::file_index_t>*>(&v);
        self->verified_leaf_hashes = *t;
    }
SWIGINTERN std::map< int,libTAU::bitfield > libTAU_add_torrent_params_get_unfinished_pieces(libTAU::add_torrent_params *self){
        auto* v = &self->unfinished_pieces;
        return *reinterpret_cast<std::map<int, libTAU::bitfield>*>(v);
    }
SWIGINTERN void libTAU_add_torrent_params_set_unfinished_pieces(libTAU::add_torrent_params *self,std::map< int,libTAU::bitfield > &v){
        auto* t = reinterpret_cast<std::map<libTAU::piece_index_t, libTAU::bitfield>*>(&v);
        self->unfinished_pieces = *t;
    }
SWIGINTERN std::map< int,std::string > libTAU_add_torrent_params_get_renamed_files(libTAU::add_torrent_params *self){
        auto* v = &self->renamed_files;
        return *reinterpret_cast<std::map<int, std::string>*>(v);
    }
SWIGINTERN void libTAU_add_torrent_params_set_renamed_files(libTAU::add_torrent_params *self,std::map< int,std::string > &v){
        auto* t = reinterpret_cast<std::map<libTAU::file_index_t, std::string>*>(&v);
        self->renamed_files = *t;
    }
SWIGINTERN libTAU::bitfield libTAU_add_torrent_params_get_have_pieces(libTAU::add_torrent_params *self){
        auto* v = &self->have_pieces;
        return *reinterpret_cast<libTAU::bitfield*>(v);
    }
SWIGINTERN void libTAU_add_torrent_params_set_have_pieces(libTAU::add_torrent_params *self,libTAU::bitfield &v){
        auto* t = reinterpret_cast<libTAU::typed_bitfield<libTAU::piece_index_t>*>(&v);
        self->have_pieces = *t;
    }
SWIGINTERN libTAU::bitfield libTAU_add_torrent_params_get_verified_pieces(libTAU::add_torrent_params *self){
        auto* v = &self->verified_pieces;
        return *reinterpret_cast<libTAU::bitfield*>(v);
    }
SWIGINTERN void libTAU_add_torrent_params_set_verified_pieces(libTAU::add_torrent_params *self,libTAU::bitfield &v){
        auto* t = reinterpret_cast<libTAU::typed_bitfield<libTAU::piece_index_t>*>(&v);
        self->verified_pieces = *t;
    }
SWIGINTERN std::vector< int8_t > libTAU_peer_info_get_client(libTAU::peer_info *self){
        std::string s = self->client;
        return {s.begin(), s.end()};
    }
SWIGINTERN int64_t libTAU_peer_info_get_last_request(libTAU::peer_info *self){
        return libTAU::total_milliseconds(self->last_request);
    }
SWIGINTERN int64_t libTAU_peer_info_get_last_active(libTAU::peer_info *self){
        return libTAU::total_milliseconds(self->last_active);
    }
SWIGINTERN int64_t libTAU_peer_info_get_download_queue_time(libTAU::peer_info *self){
        return libTAU::total_milliseconds(self->download_queue_time);
    }
SWIGINTERN std::int32_t libTAU_peer_info_get_flags(libTAU::peer_info *self){
        return std::int32_t(static_cast<std::uint32_t>(self->flags));
    }
SWIGINTERN std::int8_t libTAU_peer_info_get_source(libTAU::peer_info *self){
        return std::int8_t(static_cast<std::uint8_t>(self->source));
    }
SWIGINTERN std::int8_t libTAU_peer_info_get_read_state(libTAU::peer_info *self){
        return std::int8_t(static_cast<std::uint8_t>(self->read_state));
    }
SWIGINTERN std::int8_t libTAU_peer_info_get_write_state(libTAU::peer_info *self){
        return std::int8_t(static_cast<std::uint8_t>(self->write_state));
    }
SWIGINTERN lt::bitfield libTAU_peer_info_get_pieces(libTAU::peer_info *self){
        auto* v = &self->pieces;
        return *reinterpret_cast<lt::bitfield*>(v);
    }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::bandwidth_state_flags_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::connection_type_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::peer_source_flags_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint32_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint32_t, libTAU::peer_flags_tag>(static_cast<std::uint32_t>(val));
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::pex_flags_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN libTAU::torrent_info const *libTAU_torrent_status_torrent_file_ptr(libTAU::torrent_status *self){
        return self->torrent_file.lock().get();
    }
SWIGINTERN int64_t libTAU_torrent_status_get_next_announce(libTAU::torrent_status *self){
        return libTAU::total_milliseconds(self->next_announce);
    }
SWIGINTERN int64_t libTAU_torrent_status_get_last_upload(libTAU::torrent_status *self){
        return libTAU::total_milliseconds(self->last_upload.time_since_epoch());
    }
SWIGINTERN int64_t libTAU_torrent_status_get_last_download(libTAU::torrent_status *self){
        return libTAU::total_milliseconds(self->last_download.time_since_epoch());
    }
SWIGINTERN int64_t libTAU_torrent_status_get_active_duration(libTAU::torrent_status *self){
        return libTAU::total_milliseconds(self->active_duration);
    }
SWIGINTERN int64_t libTAU_torrent_status_get_finished_duration(libTAU::torrent_status *self){
        return libTAU::total_milliseconds(self->finished_duration);
    }
SWIGINTERN int64_t libTAU_torrent_status_get_seeding_duration(libTAU::torrent_status *self){
        return libTAU::total_milliseconds(self->seeding_duration);
    }
SWIGINTERN int libTAU_torrent_status_get_queue_position(libTAU::torrent_status *self){
        return static_cast<int>(self->queue_position);
    }
SWIGINTERN libTAU::bitfield libTAU_torrent_status_get_pieces(libTAU::torrent_status *self){
        auto* v = &self->pieces;
        return *reinterpret_cast<libTAU::bitfield*>(v);
    }
SWIGINTERN libTAU::bitfield libTAU_torrent_status_get_verified_pieces(libTAU::torrent_status *self){
        auto* v = &self->verified_pieces;
        return *reinterpret_cast<libTAU::bitfield*>(v);
    }
SWIGINTERN void libTAU_torrent_handle_add_piece_bytes__SWIG_0(libTAU::torrent_handle *self,int piece,std::vector< int8_t > const &data,libTAU::add_piece_flags_t flags={}){
        self->add_piece(piece_index_t(piece), (char const*)&data[0], flags);
    }
SWIGINTERN libTAU::torrent_info const *libTAU_torrent_handle_torrent_file_ptr(libTAU::torrent_handle *self){
        return self->torrent_file().get();
    }
SWIGINTERN libTAU::torrent_info const *libTAU_torrent_handle_torrent_file_with_hashes_ptr(libTAU::torrent_handle *self){
        return self->torrent_file_with_hashes().get();
    }
SWIGINTERN std::vector< std::string > libTAU_torrent_handle_get_url_seeds(libTAU::torrent_handle const *self){
        std::set<std::string> s = self->url_seeds();
        return {s.begin(), s.end()};
    }
SWIGINTERN void libTAU_torrent_handle_set_ssl_certificate_buffer_ex(libTAU::torrent_handle *self,std::vector< int8_t > const &certificate,std::vector< int8_t > const &private_key,std::vector< int8_t > const &dh_params){
        std::string cert{certificate.begin(), certificate.end()};
        std::string pk{private_key.begin(), private_key.end()};
        std::string dh{dh_params.begin(), dh_params.end()};
        self->set_ssl_certificate_buffer(cert, pk, dh);
    }
SWIGINTERN int libTAU_torrent_handle_queue_position_ex(libTAU::torrent_handle const *self){
        return static_cast<int>(self->queue_position());
    }
SWIGINTERN void libTAU_torrent_handle_queue_position_set_ex(libTAU::torrent_handle *self,int p){
        self->queue_position_set(queue_position_t{p});
    }
SWIGINTERN std::int8_t libTAU_torrent_handle_piece_priority_ex__SWIG_0(libTAU::torrent_handle *self,piece_index_t index){
        return std::int8_t(static_cast<std::uint8_t>(self->piece_priority(index)));
    }
SWIGINTERN void libTAU_torrent_handle_piece_priority_ex__SWIG_1(libTAU::torrent_handle *self,piece_index_t index,std::int8_t priority){
        self->piece_priority(index, libTAU::download_priority_t{std::uint8_t(priority)});
    }
SWIGINTERN void libTAU_torrent_handle_prioritize_pieces_ex__SWIG_0(libTAU::torrent_handle *self,std::vector< std::int8_t > const &pieces){
        std::vector<libTAU::download_priority_t> v(pieces.size());
        for (std::size_t i = 0; i < v.size(); i++)
            v[i] = libTAU::download_priority_t{std::uint8_t(pieces[i])};
        self->prioritize_pieces(v);
    }
SWIGINTERN void libTAU_torrent_handle_prioritize_pieces_ex__SWIG_1(libTAU::torrent_handle *self,std::vector< std::pair< int,std::int8_t > > const &pieces){
        std::vector<std::pair<piece_index_t, libTAU::download_priority_t>> v(pieces.size());
        for (std::size_t i = 0; i < v.size(); i++)
            v[i] = std::pair<piece_index_t, libTAU::download_priority_t>(piece_index_t{pieces[i].first}, libTAU::download_priority_t{std::uint8_t(pieces[i].second)});
        self->prioritize_pieces(v);
    }
SWIGINTERN std::vector< std::int8_t > libTAU_torrent_handle_get_piece_priorities_ex(libTAU::torrent_handle const *self){
        std::vector<libTAU::download_priority_t> v = self->get_piece_priorities();
        std::vector<std::int8_t> r(v.size());
        for (std::size_t i = 0; i < v.size(); i++)
            r[i] = std::int8_t(static_cast<std::uint8_t>(v[i]));
        return r;
    }
SWIGINTERN std::int8_t libTAU_torrent_handle_file_priority_ex__SWIG_0(libTAU::torrent_handle *self,file_index_t index){
        return std::int8_t(static_cast<std::uint8_t>(self->file_priority(index)));
    }
SWIGINTERN void libTAU_torrent_handle_file_priority_ex__SWIG_1(libTAU::torrent_handle *self,file_index_t index,std::int8_t priority){
        self->file_priority(index, libTAU::download_priority_t{std::uint8_t(priority)});
    }
SWIGINTERN void libTAU_torrent_handle_prioritize_files_ex(libTAU::torrent_handle *self,std::vector< std::int8_t > const &files){
        std::vector<libTAU::download_priority_t> v(files.size());
        for (std::size_t i = 0; i < v.size(); i++)
            v[i] = libTAU::download_priority_t{std::uint8_t(files[i])};
        self->prioritize_files(v);
    }
SWIGINTERN std::vector< std::int8_t > libTAU_torrent_handle_get_file_priorities_ex(libTAU::torrent_handle const *self){
        std::vector<libTAU::download_priority_t> v = self->get_file_priorities();
        std::vector<std::int8_t> r(v.size());
        for (std::size_t i = 0; i < v.size(); i++)
            r[i] = std::int8_t(static_cast<std::uint8_t>(v[i]));
        return r;
    }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::add_piece_flags_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::deadline_flags_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::file_progress_flags_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::pause_flags_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::resume_data_flags_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::reannounce_flags_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint32_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint32_t, libTAU::status_flags_tag>(static_cast<std::uint32_t>(val));
        }
SWIGINTERN libTAU::entry &libTAU_entry_get(libTAU::entry *self,std::string const &key){
            return self->operator[](key);
        }
SWIGINTERN void libTAU_entry_set__SWIG_0(libTAU::entry *self,std::string const &key,std::string const &value){
            self->operator[](key) = value;
        }
SWIGINTERN void libTAU_entry_set__SWIG_1(libTAU::entry *self,std::string const &key,std::vector< int8_t > const &value){
             self->operator[](key) = std::string(value.begin(), value.end());
        }
SWIGINTERN void libTAU_entry_set__SWIG_2(libTAU::entry *self,std::string const &key,long long const &value){
            self->operator[](key) = value;
        }
SWIGINTERN void libTAU_entry_set__SWIG_3(libTAU::entry *self,std::string const &key,libTAU::entry const &value){
            self->operator[](key) = value;
        }
SWIGINTERN std::vector< int8_t > libTAU_entry_string_bytes(libTAU::entry *self){
            std::string s = self->string();
            return std::vector<int8_t>(s.begin(), s.end());
        }
SWIGINTERN std::vector< int8_t > libTAU_entry_preformatted_bytes(libTAU::entry *self){
            std::vector<char> v = self->preformatted();
            return std::vector<int8_t>(v.begin(), v.end());
        }
SWIGINTERN std::vector< int8_t > libTAU_entry_bencode(libTAU::entry *self){
            std::vector<int8_t> buffer;
            libTAU::bencode(std::back_inserter(buffer), *self);
            return buffer;
        }
SWIGINTERN libTAU::entry libTAU_entry_from_string_bytes(std::vector< int8_t > const &string_bytes){
            return libTAU::entry(std::string(string_bytes.begin(), string_bytes.end()));
        }
SWIGINTERN libTAU::entry libTAU_entry_from_preformatted_bytes(std::vector< int8_t > const &preformatted_bytes){
            return libTAU::entry(std::vector<char>(preformatted_bytes.begin(), preformatted_bytes.end()));
        }
SWIGINTERN libTAU::entry libTAU_entry_bdecode(std::vector< int8_t > &buffer){
            return libTAU::bdecode({reinterpret_cast<char const*>(buffer.data()), static_cast<long>(buffer.size())});
        }
SWIGINTERN std::int64_t libTAU_alert_get_timestamp(libTAU::alert *self){
        return libTAU::total_milliseconds(self->timestamp().time_since_epoch());
    }
SWIGINTERN libTAU::udp_error_alert const *libTAU_alert_cast_to_udp_error_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::udp_error_alert>(a);      }
SWIGINTERN libTAU::external_ip_alert const *libTAU_alert_cast_to_external_ip_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::external_ip_alert>(a);      }
SWIGINTERN libTAU::listen_failed_alert const *libTAU_alert_cast_to_listen_failed_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::listen_failed_alert>(a);      }
SWIGINTERN libTAU::listen_succeeded_alert const *libTAU_alert_cast_to_listen_succeeded_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::listen_succeeded_alert>(a);      }
SWIGINTERN libTAU::portmap_error_alert const *libTAU_alert_cast_to_portmap_error_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::portmap_error_alert>(a);      }
SWIGINTERN libTAU::portmap_alert const *libTAU_alert_cast_to_portmap_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::portmap_alert>(a);      }
SWIGINTERN libTAU::portmap_log_alert const *libTAU_alert_cast_to_portmap_log_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::portmap_log_alert>(a);      }
SWIGINTERN libTAU::dht_announce_alert const *libTAU_alert_cast_to_dht_announce_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_announce_alert>(a);      }
SWIGINTERN libTAU::dht_get_peers_alert const *libTAU_alert_cast_to_dht_get_peers_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_get_peers_alert>(a);      }
SWIGINTERN libTAU::dht_bootstrap_alert const *libTAU_alert_cast_to_dht_bootstrap_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_bootstrap_alert>(a);      }
SWIGINTERN libTAU::session_start_over_alert const *libTAU_alert_cast_to_session_start_over_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::session_start_over_alert>(a);      }
SWIGINTERN libTAU::session_stop_over_alert const *libTAU_alert_cast_to_session_stop_over_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::session_stop_over_alert>(a);      }
SWIGINTERN libTAU::incoming_connection_alert const *libTAU_alert_cast_to_incoming_connection_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::incoming_connection_alert>(a);      }
SWIGINTERN libTAU::state_update_alert const *libTAU_alert_cast_to_state_update_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::state_update_alert>(a);      }
SWIGINTERN libTAU::session_stats_alert const *libTAU_alert_cast_to_session_stats_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::session_stats_alert>(a);      }
SWIGINTERN libTAU::dht_error_alert const *libTAU_alert_cast_to_dht_error_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_error_alert>(a);      }
SWIGINTERN libTAU::dht_immutable_item_alert const *libTAU_alert_cast_to_dht_immutable_item_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_immutable_item_alert>(a);      }
SWIGINTERN libTAU::dht_mutable_item_alert const *libTAU_alert_cast_to_dht_mutable_item_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_mutable_item_alert>(a);      }
SWIGINTERN libTAU::dht_put_alert const *libTAU_alert_cast_to_dht_put_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_put_alert>(a);      }
SWIGINTERN libTAU::dht_outgoing_get_peers_alert const *libTAU_alert_cast_to_dht_outgoing_get_peers_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_outgoing_get_peers_alert>(a);      }
SWIGINTERN libTAU::log_alert const *libTAU_alert_cast_to_log_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::log_alert>(a);      }
SWIGINTERN libTAU::peer_log_alert const *libTAU_alert_cast_to_peer_log_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::peer_log_alert>(a);      }
SWIGINTERN libTAU::dht_stats_alert const *libTAU_alert_cast_to_dht_stats_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_stats_alert>(a);      }
SWIGINTERN libTAU::dht_log_alert const *libTAU_alert_cast_to_dht_log_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_log_alert>(a);      }
SWIGINTERN libTAU::dht_pkt_alert const *libTAU_alert_cast_to_dht_pkt_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_pkt_alert>(a);      }
SWIGINTERN libTAU::dht_get_peers_reply_alert const *libTAU_alert_cast_to_dht_get_peers_reply_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_get_peers_reply_alert>(a);      }
SWIGINTERN libTAU::dht_direct_response_alert const *libTAU_alert_cast_to_dht_direct_response_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_direct_response_alert>(a);      }
SWIGINTERN libTAU::picker_log_alert const *libTAU_alert_cast_to_picker_log_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::picker_log_alert>(a);      }
SWIGINTERN libTAU::session_error_alert const *libTAU_alert_cast_to_session_error_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::session_error_alert>(a);      }
SWIGINTERN libTAU::dht_live_nodes_alert const *libTAU_alert_cast_to_dht_live_nodes_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_live_nodes_alert>(a);      }
SWIGINTERN libTAU::session_stats_header_alert const *libTAU_alert_cast_to_session_stats_header_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::session_stats_header_alert>(a);      }
SWIGINTERN libTAU::dht_sample_infohashes_alert const *libTAU_alert_cast_to_dht_sample_infohashes_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::dht_sample_infohashes_alert>(a);      }
SWIGINTERN libTAU::alerts_dropped_alert const *libTAU_alert_cast_to_alerts_dropped_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::alerts_dropped_alert>(a);      }
SWIGINTERN libTAU::socks5_alert const *libTAU_alert_cast_to_socks5_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::socks5_alert>(a);      }
SWIGINTERN libTAU::communication_new_device_id_alert const *libTAU_alert_cast_to_communication_new_device_id_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::communication_new_device_id_alert>(a);      }
SWIGINTERN libTAU::communication_new_message_alert const *libTAU_alert_cast_to_communication_new_message_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::communication_new_message_alert>(a);      }
SWIGINTERN libTAU::communication_confirmation_root_alert const *libTAU_alert_cast_to_communication_confirmation_root_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::communication_confirmation_root_alert>(a);      }
SWIGINTERN libTAU::communication_syncing_message_alert const *libTAU_alert_cast_to_communication_syncing_message_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::communication_syncing_message_alert>(a);      }
SWIGINTERN libTAU::communication_friend_info_alert const *libTAU_alert_cast_to_communication_friend_info_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::communication_friend_info_alert>(a);      }
SWIGINTERN libTAU::communication_log_alert const *libTAU_alert_cast_to_communication_log_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::communication_log_alert>(a);      }
SWIGINTERN libTAU::communication_last_seen_alert const *libTAU_alert_cast_to_communication_last_seen_alert(libTAU::alert const *a){          return libTAU::alert_cast<libTAU::communication_last_seen_alert>(a);      }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *self){
            return static_cast<int>(static_cast<std::uint32_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint32_t, libTAU::alert_category_tag>(static_cast<std::uint32_t>(val));
        }
SWIGINTERN libTAU::tcp::endpoint libTAU_peer_alert_get_endpoint(libTAU::peer_alert *self){
        return self->endpoint;
    }
SWIGINTERN libTAU::udp::endpoint libTAU_udp_error_alert_get_endpoint(libTAU::udp_error_alert *self){
        return self->endpoint;
    }
SWIGINTERN libTAU::address libTAU_external_ip_alert_get_external_address(libTAU::external_ip_alert *self){
        return self->external_address;
    }
SWIGINTERN libTAU::address libTAU_listen_failed_alert_get_address(libTAU::listen_failed_alert *self){
        return self->address;
    }
SWIGINTERN int libTAU_listen_failed_alert_get_socket_type(libTAU::listen_failed_alert *self){
        return static_cast<int>(self->socket_type);
    }
SWIGINTERN libTAU::address libTAU_listen_succeeded_alert_get_address(libTAU::listen_succeeded_alert *self){
        return self->address;
    }
SWIGINTERN int libTAU_listen_succeeded_alert_get_socket_type(libTAU::listen_succeeded_alert *self){
        return static_cast<int>(self->socket_type);
    }
SWIGINTERN int libTAU_portmap_error_alert_get_mapping(libTAU::portmap_error_alert *self){
        return static_cast<int>(self->mapping);
    }
SWIGINTERN int libTAU_portmap_alert_get_mapping(libTAU::portmap_alert *self){
        return static_cast<int>(self->mapping);
    }
SWIGINTERN libTAU::address libTAU_dht_announce_alert_get_ip(libTAU::dht_announce_alert *self){
        return self->ip;
    }
SWIGINTERN libTAU::tcp::endpoint libTAU_incoming_connection_alert_get_endpoint(libTAU::incoming_connection_alert *self){
        return self->endpoint;
    }
SWIGINTERN long long libTAU_session_stats_alert_get_value(libTAU::session_stats_alert *self,int index){
        return self->counters()[index];
    }
SWIGINTERN std::array< std::int8_t,32 > libTAU_dht_mutable_item_alert_get_key(libTAU::dht_mutable_item_alert *self){
        std::array<char, 32> arr = self->key;
        return *reinterpret_cast<std::array<std::int8_t, 32>*>(&arr);
    }
SWIGINTERN std::array< std::int8_t,64 > libTAU_dht_mutable_item_alert_get_signature(libTAU::dht_mutable_item_alert *self){
        std::array<char, 64> arr = self->signature;
        return *reinterpret_cast<std::array<std::int8_t, 64>*>(&arr);
    }
SWIGINTERN int64_t libTAU_dht_mutable_item_alert_get_timestamp(libTAU::dht_mutable_item_alert *self){
        return int64_t(self->ts);
    }
SWIGINTERN std::vector< std::int8_t > libTAU_dht_mutable_item_alert_get_salt(libTAU::dht_mutable_item_alert *self){
        std::string s = self->salt;
        return std::vector<std::int8_t>(s.begin(), s.end());
    }
SWIGINTERN std::array< std::int8_t,32 > libTAU_dht_put_alert_get_public_key(libTAU::dht_put_alert *self){
        std::array<char, 32> arr = self->public_key;
        return *reinterpret_cast<std::array<std::int8_t, 32>*>(&arr);
    }
SWIGINTERN std::array< std::int8_t,64 > libTAU_dht_put_alert_get_signature(libTAU::dht_put_alert *self){
        std::array<char, 64> arr = self->signature;
        return *reinterpret_cast<std::array<std::int8_t, 64>*>(&arr);
    }
SWIGINTERN std::vector< std::int8_t > libTAU_dht_put_alert_get_salt(libTAU::dht_put_alert *self){
        std::string s = self->salt;
        return std::vector<std::int8_t>(s.begin(), s.end());
    }
SWIGINTERN int64_t libTAU_dht_put_alert_get_timestamp(libTAU::dht_put_alert *self){
        return int64_t(self->ts);
    }
SWIGINTERN libTAU::udp::endpoint libTAU_dht_outgoing_get_peers_alert_get_endpoint(libTAU::dht_outgoing_get_peers_alert *self){
        return self->endpoint;
    }
SWIGINTERN std::string libTAU_peer_log_alert_get_event_type(libTAU::peer_log_alert *self){
        return std::string(self->event_type);
    }
SWIGINTERN std::string libTAU_dht_lookup_get_type(libTAU::dht_lookup *self){
        return std::string(self->type);
    }
SWIGINTERN libTAU::udp::endpoint libTAU_dht_stats_alert_get_local_endpoint(libTAU::dht_stats_alert *self){
        return self->local_endpoint;
    }
SWIGINTERN libTAU::udp::endpoint libTAU_dht_pkt_alert_get_node(libTAU::dht_pkt_alert *self){
        return self->node;
    }
SWIGINTERN std::vector< std::int8_t > libTAU_dht_pkt_alert_get_pkt_buf(libTAU::dht_pkt_alert *self){
        auto buf = self->pkt_buf();
        return {buf.begin(), buf.end()};
    }
SWIGINTERN libTAU::udp::endpoint libTAU_dht_direct_response_alert_get_endpoint(libTAU::dht_direct_response_alert *self){
        return self->endpoint;
    }
SWIGINTERN libTAU::udp::endpoint libTAU_dht_sample_infohashes_alert_get_endpoint(libTAU::dht_sample_infohashes_alert *self){
        return self->endpoint;
    }
SWIGINTERN std::int64_t libTAU_dht_sample_infohashes_alert_get_interval(libTAU::dht_sample_infohashes_alert *self){
        return libTAU::total_milliseconds(self->interval);
    }
SWIGINTERN std::vector< std::int8_t > libTAU_communication_new_device_id_alert_get_device_id(libTAU::communication_new_device_id_alert *self){
        std::vector<char> device_id = self->device_id;
        return *reinterpret_cast<std::vector<std::int8_t>*>(&device_id);
    }
SWIGINTERN std::vector< std::int8_t > libTAU_communication_confirmation_root_alert_get_peer(libTAU::communication_confirmation_root_alert *self){
        std::vector<char> peer = self->peer;
        return *reinterpret_cast<std::vector<std::int8_t>*>(&peer);
    }
SWIGINTERN std::int64_t libTAU_communication_confirmation_root_alert_get_timestamp(libTAU::communication_confirmation_root_alert *self){
        return self->time;
    }
SWIGINTERN std::vector< std::int8_t > libTAU_communication_syncing_message_alert_get_peer(libTAU::communication_syncing_message_alert *self){
        std::vector<char> peer = self->peer;
        return *reinterpret_cast<std::vector<std::int8_t>*>(&peer);
    }
SWIGINTERN std::int64_t libTAU_communication_syncing_message_alert_get_timestamp(libTAU::communication_syncing_message_alert *self){
        return self->time;
    }
SWIGINTERN std::vector< std::int8_t > libTAU_communication_friend_info_alert_get_peer(libTAU::communication_friend_info_alert *self){
        std::vector<char> peer = self->peer;
        return *reinterpret_cast<std::vector<std::int8_t>*>(&peer);
    }
SWIGINTERN std::vector< std::int8_t > libTAU_communication_friend_info_alert_get_friend_info(libTAU::communication_friend_info_alert *self){
        std::vector<char> info = self->friend_info;
        return *reinterpret_cast<std::vector<std::int8_t>*>(&info);
    }
SWIGINTERN std::vector< std::int8_t > libTAU_communication_last_seen_alert_get_peer(libTAU::communication_last_seen_alert *self){
        std::vector<char> peer = self->peer;
        return *reinterpret_cast<std::vector<std::int8_t>*>(&peer);
    }
SWIGINTERN std::int64_t libTAU_communication_last_seen_alert_get_last_seen(libTAU::communication_last_seen_alert *self){
        return self->last_seen;
    }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint32_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint32_t, libTAU::picker_flags_tag>(static_cast<std::uint32_t>(val));
        }
SWIGINTERN std::vector< std::int8_t > libTAU_settings_pack_get_bytes(libTAU::settings_pack *self,int name){
        auto v = self->get_str(name);
        return std::vector<std::int8_t>(v.begin(), v.end());
    }
SWIGINTERN void libTAU_settings_pack_set_bytes(libTAU::settings_pack *self,int name,std::vector< std::int8_t > v){
        self->set_str(name, std::string(v.begin(), v.end()));
    }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::remove_flags_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint32_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint32_t, libTAU::save_state_flags_tag>(static_cast<std::uint32_t>(val));
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::session_flags_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint8_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint8_t, libTAU::reopen_network_flags_tag>(static_cast<std::uint8_t>(val));
        }
SWIGINTERN lt::session_params libTAU_session_params_read_session_params__SWIG_0(lt::bdecode_node const &e,lt::save_state_flags_t flags=lt::save_state_flags_t::all()){
        return lt::read_session_params(e, flags);
    }
SWIGINTERN lt::entry libTAU_session_params_write_session_params__SWIG_0(lt::session_params const &sp,lt::save_state_flags_t flags=lt::save_state_flags_t::all()){
        return lt::write_session_params(sp, flags);
    }
SWIGINTERN std::vector< std::int8_t > libTAU_session_params_write_session_params_buf__SWIG_0(lt::session_params const &sp,lt::save_state_flags_t flags=lt::save_state_flags_t::all()){
        auto v = lt::write_session_params_buf(sp, flags);
        return {v.begin(), v.end()};
    }
SWIGINTERN void libTAU_session_handle_dht_get_item__SWIG_1(libTAU::session_handle *self,std::array< std::int8_t,32 > &key,std::vector< std::int8_t > &salt){
        std::array<char, 32> pk;
        std::copy_n(key.begin(), 32, pk.begin());

        self->dht_get_item(pk, std::string(salt.begin(), salt.end()));
    }
SWIGINTERN void libTAU_session_handle_dht_put_item__SWIG_1(libTAU::session_handle *self,std::array< std::int8_t,32 > &key,std::array< std::int8_t,64 > &sk,libTAU::entry &data,std::vector< int8_t > &salt){
        std::array<char, 32> pk;
        std::copy_n(key.begin(), 32, pk.begin());

        using namespace std::placeholders;
        using namespace libTAU::dht;

        self->dht_put_item(pk, std::bind(&dht_put_item_cb, _1, _2, _3, _4,
            public_key((char*)key.data()), secret_key((char*)sk.data()), data),
            std::string(salt.begin(), salt.end()));
    }
SWIGINTERN libTAU::alert *libTAU_session_handle_wait_for_alert_ms(libTAU::session_handle *self,std::int64_t max_wait){
        return self->wait_for_alert(libTAU::milliseconds(max_wait));
    }
SWIGINTERN void libTAU_session_handle_set_alert_notify_callback(libTAU::session_handle *self,alert_notify_callback *cb){
        self->set_alert_notify(std::bind(&alert_notify_callback::on_alert, cb));
    }
SWIGINTERN std::vector< int > libTAU_session_handle_add_port_mapping_ex(libTAU::session_handle *self,libTAU::portmap_protocol t,int external_port,int local_port){
        auto mapping = self->add_port_mapping(t, external_port, local_port);
        std::vector<int> r;
        for (auto m : mapping)
            r.push_back(static_cast<int>(m));
        return r;
    }
SWIGINTERN void libTAU_session_handle_delete_port_mapping_ex(libTAU::session_handle *self,int handle){
        self->delete_port_mapping(libTAU::port_mapping_t{handle});
    }
SWIGINTERN void libTAU_session_handle_new_account_seed(libTAU::session_handle *self,std::array< std::int8_t,32 > &seed){
        std::array<char, 32> char_seed;
        std::copy_n(seed.begin(), 32, char_seed.begin());

        return self->new_account_seed(char_seed);
    }
SWIGINTERN bool libTAU_session_handle_add_new_friend(libTAU::session_handle *self,std::array< std::int8_t,32 > &pubkey){
        std::array<char, 32> pk;
        std::copy_n(pubkey.begin(), 32, pk.begin());

        return self->add_new_friend(pk);
    }
SWIGINTERN bool libTAU_session_handle_delete_friend(libTAU::session_handle *self,std::array< std::int8_t,32 > &pubkey){
        std::array<char, 32> pk;
        std::copy_n(pubkey.begin(), 32, pk.begin());

        return self->delete_friend(pk);
    }
SWIGINTERN void libTAU_session_handle_set_chatting_friend(libTAU::session_handle *self,std::array< std::int8_t,32 > &pubkey){
        std::array<char, 32> pk;
        std::copy_n(pubkey.begin(), 32, pk.begin());

        self->set_chatting_friend(pk);
    }
SWIGINTERN std::vector< std::int8_t > libTAU_session_handle_get_friend_info(libTAU::session_handle *self,std::array< std::int8_t,32 > pubkey){
        std::array<char, 32> pk;
        std::copy_n(pubkey.begin(), 32, pk.begin());

        std::vector<char> friend_info = self->get_friend_info(pk);

        std::vector<std::int8_t> info; 
        std::copy(friend_info.begin(), friend_info.end(), std::inserter(info, info.begin()));
        return info;
    }
SWIGINTERN bool libTAU_session_handle_update_friend_info(libTAU::session_handle *self,std::array< std::int8_t,32 > pubkey,std::vector< std::int8_t > friend_info){
        std::array<char, 32> pk;
        std::copy_n(pubkey.begin(), 32, pk.begin());

        std::vector<char> info;
        std::copy(friend_info.begin(), friend_info.end(), std::inserter(info, info.begin()));

        return self->update_friend_info(pk, info);
    }
SWIGINTERN void libTAU_session_handle_set_active_friends(libTAU::session_handle *self,std::vector< std::array< std::int8_t,32 > > active_friends){
        std::vector<std::array<char, 32>> afs;
		std::array<char, 32> pk;
		for(auto af = active_friends.begin() ; af != active_friends.end(); af++) {
        	std::copy_n((*af).begin(), 32, pk.begin());
			afs.push_back(pk);
		}
        self->set_active_friends(afs);
    }
SWIGINTERN void libTAU_create_torrent_add_url_seed(libTAU::create_torrent *self,std::string const &url){
        self->add_url_seed(url);
    }
SWIGINTERN void libTAU_create_torrent_add_tracker__SWIG_0(libTAU::create_torrent *self,std::string const &url){
        self->add_tracker(url);
    }
SWIGINTERN void libTAU_create_torrent_add_tracker__SWIG_1(libTAU::create_torrent *self,std::string const &url,int tier){
        self->add_tracker(url, tier);
    }
SWIGINTERN void libTAU_create_torrent_add_collection(libTAU::create_torrent *self,std::string const &c){
        self->add_collection(c);
    }
SWIGINTERN void libTAU_create_torrent_set_root_cert(libTAU::create_torrent *self,std::vector< std::int8_t > const &cert){
        std::string v{cert.begin(), cert.end()};
        self->set_root_cert(v);
    }
SWIGINTERN void libTAU_create_torrent_set_hash2(libTAU::create_torrent *self,file_index_t file,int piece,libTAU::sha256_hash const &h){
        self->set_hash2(file, lt::piece_index_t::diff_type{piece}, h);
    }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__non_zero(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *self){
            return self->operator bool();
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__eq(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const f){
            return self->operator==(f);
        }
SWIGINTERN bool libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__ne(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const f){
            return self->operator!=(f);
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__or_(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const other){
            return *self | other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__and_(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const other){
            return *self & other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__xor(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *self,libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const other){
            return *self ^ other;
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__inv(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *self){
            return self->operator~();
        }
SWIGINTERN int libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__to_int(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *self){
            return static_cast<int>(static_cast<std::uint32_t>(*self));
        }
SWIGINTERN libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__from_int(int val){
            return lt::flags::bitfield_flag<std::uint32_t, libTAU::create_flags_tag>(static_cast<std::uint32_t>(val));
        }
SWIGINTERN std::string libTAU_stats_metric_get_name(libTAU::stats_metric *self){
        return std::string(self->name);
    }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "libTAU_jni.h"

SwigDirector_alert_notify_callback::SwigDirector_alert_notify_callback(JNIEnv *jenv) : alert_notify_callback(), Swig::Director(jenv) {
}

SwigDirector_alert_notify_callback::~SwigDirector_alert_notify_callback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_alert_notify_callback::on_alert() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    alert_notify_callback::on_alert();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_libTAU_jni, Swig::director_method_ids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in alert_notify_callback::on_alert ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_alert_notify_callback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "on_alert", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/libTAU4j/swig/alert_notify_callback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_add_files_listener::SwigDirector_add_files_listener(JNIEnv *jenv) : add_files_listener(), Swig::Director(jenv) {
}

SwigDirector_add_files_listener::~SwigDirector_add_files_listener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_add_files_listener::pred(std::string const &p) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jp = 0 ;
  
  if (!swig_override[0]) {
    return add_files_listener::pred(p);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jp = jenv->NewStringUTF((&p)->c_str());
    Swig::LocalRefGuard p_refguard(jenv, jp); 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_libTAU_jni, Swig::director_method_ids[1], swigjobj, jp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in add_files_listener::pred ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_add_files_listener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "pred", "(Ljava/lang/String;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/libTAU4j/swig/add_files_listener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_set_piece_hashes_listener::SwigDirector_set_piece_hashes_listener(JNIEnv *jenv) : set_piece_hashes_listener(), Swig::Director(jenv) {
}

SwigDirector_set_piece_hashes_listener::~SwigDirector_set_piece_hashes_listener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_set_piece_hashes_listener::progress(int i) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint ji  ;
  
  if (!swig_override[0]) {
    set_piece_hashes_listener::progress(i);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ji = (jint) i;
    jenv->CallStaticVoidMethod(Swig::jclass_libTAU_jni, Swig::director_method_ids[2], swigjobj, ji);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in set_piece_hashes_listener::progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_set_piece_hashes_listener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "progress", "(I)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/libTAU4j/swig/set_piece_hashes_listener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1int_1byte_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< int,std::int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< int,std::int8_t > *)new std::pair< int,std::int8_t >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< int,std::int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1int_1byte_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jbyte jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  std::int8_t arg2 ;
  std::pair< int,std::int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (std::int8_t)jarg2; 
  {
    try {
      result = (std::pair< int,std::int8_t > *)new std::pair< int,std::int8_t >(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< int,std::int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1int_1byte_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,std::int8_t > *arg1 = 0 ;
  std::pair< int,std::int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,std::int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< int,std::int8_t > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< int,std::int8_t > *)new std::pair< int,std::int8_t >((std::pair< int,std::int8_t > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< int,std::int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1byte_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< int,std::int8_t > *arg1 = (std::pair< int,std::int8_t > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,std::int8_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1byte_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int,std::int8_t > *arg1 = (std::pair< int,std::int8_t > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,std::int8_t > **)&jarg1; 
  result = (int) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1byte_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  std::pair< int,std::int8_t > *arg1 = (std::pair< int,std::int8_t > *) 0 ;
  std::int8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,std::int8_t > **)&jarg1; 
  arg2 = (std::int8_t)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jbyte JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1byte_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  std::pair< int,std::int8_t > *arg1 = (std::pair< int,std::int8_t > *) 0 ;
  std::int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,std::int8_t > **)&jarg1; 
  result = (std::int8_t) ((arg1)->second);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1int_1byte_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< int,std::int8_t > *arg1 = (std::pair< int,std::int8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< int,std::int8_t > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1int_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< std::string,int > *)new std::pair< std::string,int >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1int_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  int arg2 ;
  std::pair< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (std::pair< std::string,int > *)new std::pair< std::string,int >(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1int_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::string,int > *arg1 = 0 ;
  std::pair< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,int > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< std::string,int > *)new std::pair< std::string,int >((std::pair< std::string,int > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1int_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1int_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,int > **)&jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1int_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1int_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,int > **)&jarg1; 
  result = (int) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1string_1int_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::string,int > *arg1 = (std::pair< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::string,int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1string_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1string_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1string_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::string,std::string > *arg1 = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,std::string > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >((std::pair< std::string,std::string > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  result = (std::string *) & ((arg1)->second);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1string_1string_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1byte_1vector_1byte_1vector_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *)new std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1byte_1vector_1byte_1vector_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< std::int8_t > arg1 ;
  std::vector< std::int8_t > arg2 ;
  std::vector< std::int8_t > *argp1 ;
  std::vector< std::int8_t > *argp2 ;
  std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::int8_t > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::int8_t >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::int8_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::int8_t >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *)new std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > >(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1byte_1vector_1byte_1vector_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *arg1 = 0 ;
  std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *)new std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > >((std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1vector_1byte_1vector_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *arg1 = (std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *) 0 ;
  std::vector< std::int8_t > *arg2 = (std::vector< std::int8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1vector_1byte_1vector_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *arg1 = (std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *) 0 ;
  std::vector< std::int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > **)&jarg1; 
  result = (std::vector< std::int8_t > *)& ((arg1)->first);
  *(std::vector< std::int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1vector_1byte_1vector_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *arg1 = (std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *) 0 ;
  std::vector< std::int8_t > *arg2 = (std::vector< std::int8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1vector_1byte_1vector_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *arg1 = (std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *) 0 ;
  std::vector< std::int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > **)&jarg1; 
  result = (std::vector< std::int8_t > *)& ((arg1)->second);
  *(std::vector< std::int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1byte_1vector_1byte_1vector_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *arg1 = (std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::vector< std::int8_t >,std::vector< std::int8_t > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha1_1hash_1udp_1endpoint_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *)new std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha1_1hash_1udp_1endpoint_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::digest32< 160 > arg1 ;
  libTAU::udp::endpoint arg2 ;
  libTAU::digest32< 160 > *argp1 ;
  libTAU::udp::endpoint *argp2 ;
  std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(libTAU::digest32< 160 > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::digest32< 160 >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(libTAU::udp::endpoint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::udp::endpoint");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *)new std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint >(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha1_1hash_1udp_1endpoint_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *arg1 = 0 ;
  std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *)new std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint >((std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1udp_1endpoint_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *arg1 = (std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *) 0 ;
  libTAU::digest32< 160 > *arg2 = (libTAU::digest32< 160 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > **)&jarg1; 
  arg2 = *(libTAU::digest32< 160 > **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1udp_1endpoint_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *arg1 = (std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *) 0 ;
  libTAU::digest32< 160 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > **)&jarg1; 
  result = (libTAU::digest32< 160 > *)& ((arg1)->first);
  *(libTAU::digest32< 160 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1udp_1endpoint_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *arg1 = (std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *) 0 ;
  libTAU::udp::endpoint *arg2 = (libTAU::udp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > **)&jarg1; 
  arg2 = *(libTAU::udp::endpoint **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1udp_1endpoint_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *arg1 = (std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *) 0 ;
  libTAU::udp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > **)&jarg1; 
  result = (libTAU::udp::endpoint *)& ((arg1)->second);
  *(libTAU::udp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1sha1_1hash_1udp_1endpoint_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *arg1 = (std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< libTAU::digest32< 160 >,libTAU::udp::endpoint > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha256_1hash_1udp_1endpoint_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *)new std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha256_1hash_1udp_1endpoint_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::digest32< 256 > arg1 ;
  libTAU::udp::endpoint arg2 ;
  libTAU::digest32< 256 > *argp1 ;
  libTAU::udp::endpoint *argp2 ;
  std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(libTAU::digest32< 256 > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::digest32< 256 >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(libTAU::udp::endpoint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::udp::endpoint");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *)new std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint >(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha256_1hash_1udp_1endpoint_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *arg1 = 0 ;
  std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *)new std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint >((std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1udp_1endpoint_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *arg1 = (std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *) 0 ;
  libTAU::digest32< 256 > *arg2 = (libTAU::digest32< 256 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > **)&jarg1; 
  arg2 = *(libTAU::digest32< 256 > **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1udp_1endpoint_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *arg1 = (std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *) 0 ;
  libTAU::digest32< 256 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > **)&jarg1; 
  result = (libTAU::digest32< 256 > *)& ((arg1)->first);
  *(libTAU::digest32< 256 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1udp_1endpoint_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *arg1 = (std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *) 0 ;
  libTAU::udp::endpoint *arg2 = (libTAU::udp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > **)&jarg1; 
  arg2 = *(libTAU::udp::endpoint **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1udp_1endpoint_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *arg1 = (std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *) 0 ;
  libTAU::udp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > **)&jarg1; 
  result = (libTAU::udp::endpoint *)& ((arg1)->second);
  *(libTAU::udp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1sha256_1hash_1udp_1endpoint_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *arg1 = (std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bdecode_1node_1bdecode_1node_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *)new std::pair< libTAU::bdecode_node,libTAU::bdecode_node >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::bdecode_node,libTAU::bdecode_node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bdecode_1node_1bdecode_1node_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::bdecode_node arg1 ;
  libTAU::bdecode_node arg2 ;
  libTAU::bdecode_node *argp1 ;
  libTAU::bdecode_node *argp2 ;
  std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(libTAU::bdecode_node **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::bdecode_node");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(libTAU::bdecode_node **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::bdecode_node");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *)new std::pair< libTAU::bdecode_node,libTAU::bdecode_node >(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::bdecode_node,libTAU::bdecode_node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bdecode_1node_1bdecode_1node_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *arg1 = 0 ;
  std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::bdecode_node,libTAU::bdecode_node > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< libTAU::bdecode_node,libTAU::bdecode_node > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *)new std::pair< libTAU::bdecode_node,libTAU::bdecode_node >((std::pair< libTAU::bdecode_node,libTAU::bdecode_node > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::bdecode_node,libTAU::bdecode_node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1bdecode_1node_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *arg1 = (std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *) 0 ;
  libTAU::bdecode_node *arg2 = (libTAU::bdecode_node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< libTAU::bdecode_node,libTAU::bdecode_node > **)&jarg1; 
  arg2 = *(libTAU::bdecode_node **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1bdecode_1node_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *arg1 = (std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *) 0 ;
  libTAU::bdecode_node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::bdecode_node,libTAU::bdecode_node > **)&jarg1; 
  result = (libTAU::bdecode_node *)& ((arg1)->first);
  *(libTAU::bdecode_node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1bdecode_1node_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *arg1 = (std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *) 0 ;
  libTAU::bdecode_node *arg2 = (libTAU::bdecode_node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< libTAU::bdecode_node,libTAU::bdecode_node > **)&jarg1; 
  arg2 = *(libTAU::bdecode_node **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1bdecode_1node_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *arg1 = (std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *) 0 ;
  libTAU::bdecode_node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::bdecode_node,libTAU::bdecode_node > **)&jarg1; 
  result = (libTAU::bdecode_node *)& ((arg1)->second);
  *(libTAU::bdecode_node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1bdecode_1node_1bdecode_1node_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *arg1 = (std::pair< libTAU::bdecode_node,libTAU::bdecode_node > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< libTAU::bdecode_node,libTAU::bdecode_node > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1address_1sha160_1hash_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< libTAU::address,libTAU::digest32< 160 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< libTAU::address,libTAU::digest32< 160 > > *)new std::pair< libTAU::address,libTAU::digest32< 160 > >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::address,libTAU::digest32< 160 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1address_1sha160_1hash_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::address arg1 ;
  libTAU::digest32< 160 > arg2 ;
  libTAU::address *argp1 ;
  libTAU::digest32< 160 > *argp2 ;
  std::pair< libTAU::address,libTAU::digest32< 160 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(libTAU::address **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::address");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(libTAU::digest32< 160 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::digest32< 160 >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< libTAU::address,libTAU::digest32< 160 > > *)new std::pair< libTAU::address,libTAU::digest32< 160 > >(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::address,libTAU::digest32< 160 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1address_1sha160_1hash_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::address,libTAU::digest32< 160 > > *arg1 = 0 ;
  std::pair< libTAU::address,libTAU::digest32< 160 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::address,libTAU::digest32< 160 > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< libTAU::address,libTAU::digest32< 160 > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< libTAU::address,libTAU::digest32< 160 > > *)new std::pair< libTAU::address,libTAU::digest32< 160 > >((std::pair< libTAU::address,libTAU::digest32< 160 > > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::address,libTAU::digest32< 160 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha160_1hash_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< libTAU::address,libTAU::digest32< 160 > > *arg1 = (std::pair< libTAU::address,libTAU::digest32< 160 > > *) 0 ;
  libTAU::address *arg2 = (libTAU::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< libTAU::address,libTAU::digest32< 160 > > **)&jarg1; 
  arg2 = *(libTAU::address **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha160_1hash_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::address,libTAU::digest32< 160 > > *arg1 = (std::pair< libTAU::address,libTAU::digest32< 160 > > *) 0 ;
  libTAU::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::address,libTAU::digest32< 160 > > **)&jarg1; 
  result = (libTAU::address *)& ((arg1)->first);
  *(libTAU::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha160_1hash_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< libTAU::address,libTAU::digest32< 160 > > *arg1 = (std::pair< libTAU::address,libTAU::digest32< 160 > > *) 0 ;
  libTAU::digest32< 160 > *arg2 = (libTAU::digest32< 160 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< libTAU::address,libTAU::digest32< 160 > > **)&jarg1; 
  arg2 = *(libTAU::digest32< 160 > **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha160_1hash_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::address,libTAU::digest32< 160 > > *arg1 = (std::pair< libTAU::address,libTAU::digest32< 160 > > *) 0 ;
  libTAU::digest32< 160 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::address,libTAU::digest32< 160 > > **)&jarg1; 
  result = (libTAU::digest32< 160 > *)& ((arg1)->second);
  *(libTAU::digest32< 160 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1address_1sha160_1hash_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< libTAU::address,libTAU::digest32< 160 > > *arg1 = (std::pair< libTAU::address,libTAU::digest32< 160 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< libTAU::address,libTAU::digest32< 160 > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1address_1sha256_1hash_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< libTAU::address,libTAU::digest32< 256 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::pair< libTAU::address,libTAU::digest32< 256 > > *)new std::pair< libTAU::address,libTAU::digest32< 256 > >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::address,libTAU::digest32< 256 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1address_1sha256_1hash_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::address arg1 ;
  libTAU::digest32< 256 > arg2 ;
  libTAU::address *argp1 ;
  libTAU::digest32< 256 > *argp2 ;
  std::pair< libTAU::address,libTAU::digest32< 256 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(libTAU::address **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::address");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(libTAU::digest32< 256 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::digest32< 256 >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (std::pair< libTAU::address,libTAU::digest32< 256 > > *)new std::pair< libTAU::address,libTAU::digest32< 256 > >(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::address,libTAU::digest32< 256 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1address_1sha256_1hash_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::address,libTAU::digest32< 256 > > *arg1 = 0 ;
  std::pair< libTAU::address,libTAU::digest32< 256 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::address,libTAU::digest32< 256 > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< libTAU::address,libTAU::digest32< 256 > > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::pair< libTAU::address,libTAU::digest32< 256 > > *)new std::pair< libTAU::address,libTAU::digest32< 256 > >((std::pair< libTAU::address,libTAU::digest32< 256 > > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::address,libTAU::digest32< 256 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha256_1hash_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< libTAU::address,libTAU::digest32< 256 > > *arg1 = (std::pair< libTAU::address,libTAU::digest32< 256 > > *) 0 ;
  libTAU::address *arg2 = (libTAU::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< libTAU::address,libTAU::digest32< 256 > > **)&jarg1; 
  arg2 = *(libTAU::address **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha256_1hash_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::address,libTAU::digest32< 256 > > *arg1 = (std::pair< libTAU::address,libTAU::digest32< 256 > > *) 0 ;
  libTAU::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::address,libTAU::digest32< 256 > > **)&jarg1; 
  result = (libTAU::address *)& ((arg1)->first);
  *(libTAU::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha256_1hash_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< libTAU::address,libTAU::digest32< 256 > > *arg1 = (std::pair< libTAU::address,libTAU::digest32< 256 > > *) 0 ;
  libTAU::digest32< 256 > *arg2 = (libTAU::digest32< 256 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< libTAU::address,libTAU::digest32< 256 > > **)&jarg1; 
  arg2 = *(libTAU::digest32< 256 > **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha256_1hash_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< libTAU::address,libTAU::digest32< 256 > > *arg1 = (std::pair< libTAU::address,libTAU::digest32< 256 > > *) 0 ;
  libTAU::digest32< 256 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< libTAU::address,libTAU::digest32< 256 > > **)&jarg1; 
  result = (libTAU::digest32< 256 > *)& ((arg1)->second);
  *(libTAU::digest32< 256 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1address_1sha256_1hash_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< libTAU::address,libTAU::digest32< 256 > > *arg1 = (std::pair< libTAU::address,libTAU::digest32< 256 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< libTAU::address,libTAU::digest32< 256 > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1string_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1int_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< int > *)new std::vector< int >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1int_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  {
    try {
      result = (std::vector< int > *)new std::vector< int >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      result = ((std::vector< int > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      result = ((std::vector< int > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< int > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1int_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1int64_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< long long > *)new std::vector< long long >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1int64_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< long long >::size_type arg1 ;
  std::vector< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< long long >::size_type)jarg1; 
  {
    try {
      result = (std::vector< long long > *)new std::vector< long long >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int64_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  {
    try {
      result = ((std::vector< long long > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int64_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  {
    try {
      result = ((std::vector< long long > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int64_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = (std::vector< long long >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int64_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< long long > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int64_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int64_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  std::vector< long long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  temp2 = (std::vector< long long >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< long long >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int64_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< long long >::value_type *) &std_vector_Sl_long_SS_long_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int64_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  std::vector< long long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long long > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< long long >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_long_SS_long_Sg__set(arg1,arg2,(long long const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1int64_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< long long > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1byte_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::int8_t > *)new std::vector< std::int8_t >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1byte_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< signed char >::size_type arg1 ;
  std::vector< std::int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< signed char >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::int8_t > *)new std::vector< std::int8_t >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::int8_t > *arg1 = (std::vector< std::int8_t > *) 0 ;
  std::vector< signed char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::int8_t > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::int8_t > *arg1 = (std::vector< std::int8_t > *) 0 ;
  std::vector< signed char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::int8_t > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::int8_t > *arg1 = (std::vector< std::int8_t > *) 0 ;
  std::vector< signed char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1; 
  arg2 = (std::vector< signed char >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::int8_t > *arg1 = (std::vector< std::int8_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::int8_t > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::int8_t > *arg1 = (std::vector< std::int8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  std::vector< std::int8_t > *arg1 = (std::vector< std::int8_t > *) 0 ;
  std::vector< signed char >::value_type *arg2 = 0 ;
  std::vector< signed char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1; 
  temp2 = (std::vector< signed char >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< signed char >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jbyte JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jbyte jresult = 0 ;
  std::vector< std::int8_t > *arg1 = (std::vector< std::int8_t > *) 0 ;
  int arg2 ;
  std::vector< signed char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< signed char >::value_type *) &std_vector_Sl_std_int8_t_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jbyte)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyte jarg3) {
  std::vector< std::int8_t > *arg1 = (std::vector< std::int8_t > *) 0 ;
  int arg2 ;
  std::vector< signed char >::value_type *arg3 = 0 ;
  std::vector< signed char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< signed char >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_std_int8_t_Sg__set(arg1,arg2,(signed char const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1byte_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::int8_t > *arg1 = (std::vector< std::int8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::int8_t > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bool_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< bool > *)new std::vector< bool >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bool_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bool >::size_type arg1 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< bool >::size_type)jarg1; 
  {
    try {
      result = (std::vector< bool > *)new std::vector< bool >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  {
    try {
      result = ((std::vector< bool > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  {
    try {
      result = ((std::vector< bool > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (std::vector< bool >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< bool > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::value_type *arg2 = 0 ;
  std::vector< bool >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< bool >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (bool)std_vector_Sl_bool_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::value_type *arg3 = 0 ;
  std::vector< bool >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_bool_Sg__set(arg1,arg2,(bool const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1bool_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bool > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1char_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< char > *)new std::vector< char >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1char_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< char >::size_type arg1 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< char >::size_type)jarg1; 
  {
    try {
      result = (std::vector< char > *)new std::vector< char >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_char_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  {
    try {
      result = ((std::vector< char > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_char_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  {
    try {
      result = ((std::vector< char > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_char_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (std::vector< char >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_char_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< char > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_char_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_char_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  std::vector< char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  temp2 = (std::vector< char >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jchar JNICALL Java_org_libTAU4j_swig_libTAU_1jni_char_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jchar)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_char_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  std::vector< char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< char >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_char_Sg__set(arg1,arg2,(char const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1char_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< char > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1int_1byte_1pair_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,std::int8_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::pair< int,std::int8_t > > *)new std::vector< std::pair< int,std::int8_t > >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< int,std::int8_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1int_1byte_1pair_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,signed char > >::size_type arg1 ;
  std::vector< std::pair< int,std::int8_t > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::pair< int,signed char > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::pair< int,std::int8_t > > *)new std::vector< std::pair< int,std::int8_t > >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< int,std::int8_t > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1byte_1pair_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,std::int8_t > > *arg1 = (std::vector< std::pair< int,std::int8_t > > *) 0 ;
  std::vector< std::pair< int,signed char > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,std::int8_t > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< int,std::int8_t > > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1byte_1pair_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,std::int8_t > > *arg1 = (std::vector< std::pair< int,std::int8_t > > *) 0 ;
  std::vector< std::pair< int,signed char > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,std::int8_t > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< int,std::int8_t > > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1byte_1pair_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< int,std::int8_t > > *arg1 = (std::vector< std::pair< int,std::int8_t > > *) 0 ;
  std::vector< std::pair< int,signed char > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,std::int8_t > > **)&jarg1; 
  arg2 = (std::vector< std::pair< int,signed char > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1byte_1pair_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< int,std::int8_t > > *arg1 = (std::vector< std::pair< int,std::int8_t > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,std::int8_t > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::pair< int,std::int8_t > > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1byte_1pair_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< int,std::int8_t > > *arg1 = (std::vector< std::pair< int,std::int8_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,std::int8_t > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1byte_1pair_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< int,std::int8_t > > *arg1 = (std::vector< std::pair< int,std::int8_t > > *) 0 ;
  std::vector< std::pair< int,signed char > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< int,std::int8_t > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< int,signed char > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,signed char > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< int,signed char > >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1byte_1pair_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,std::int8_t > > *arg1 = (std::vector< std::pair< int,std::int8_t > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,std::int8_t > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,std::int8_t > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< int,std::int8_t > >::value_type *) &std_vector_Sl_std_pair_Sl_int_Sc_std_int8_t_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< int,std::int8_t > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1byte_1pair_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< int,std::int8_t > > *arg1 = (std::vector< std::pair< int,std::int8_t > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,signed char > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< int,std::int8_t > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< int,signed char > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,signed char > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_int_Sc_std_int8_t_Sg__Sg__set(arg1,arg2,(std::pair< int,signed char > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1int_1byte_1pair_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< int,std::int8_t > > *arg1 = (std::vector< std::pair< int,std::int8_t > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< int,std::int8_t > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1int_1pair_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::pair< std::string,int > > *)new std::vector< std::pair< std::string,int > >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< std::string,int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1int_1pair_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,int > >::size_type arg1 ;
  std::vector< std::pair< std::string,int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::pair< std::string,int > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::pair< std::string,int > > *)new std::vector< std::pair< std::string,int > >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< std::string,int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1int_1pair_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  std::vector< std::pair< std::string,int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< std::string,int > > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1int_1pair_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  std::vector< std::pair< std::string,int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< std::string,int > > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1int_1pair_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  std::vector< std::pair< std::string,int > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  arg2 = (std::vector< std::pair< std::string,int > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1int_1pair_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::pair< std::string,int > > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1int_1pair_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1int_1pair_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  std::vector< std::pair< std::string,int > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< std::string,int > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,int > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< std::string,int > >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1int_1pair_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,int > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< std::string,int > >::value_type *) &std_vector_Sl_std_pair_Sl_std_string_Sc_int_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< std::string,int > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1int_1pair_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,int > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< std::string,int > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,int > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_std_string_Sc_int_Sg__Sg__set(arg1,arg2,(std::pair< std::string,int > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1string_1int_1pair_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< std::string,int > > *arg1 = (std::vector< std::pair< std::string,int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< std::string,int > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1string_1pair_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::pair< std::string,std::string > > *)new std::vector< std::pair< std::string,std::string > >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< std::string,std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1string_1pair_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type arg1 ;
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::pair< std::string,std::string > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::pair< std::string,std::string > > *)new std::vector< std::pair< std::string,std::string > >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< std::string,std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1pair_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< std::string,std::string > > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1pair_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< std::string,std::string > > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1pair_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  arg2 = (std::vector< std::pair< std::string,std::string > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1pair_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::pair< std::string,std::string > > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1pair_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1pair_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< std::string,std::string > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,std::string > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< std::string,std::string > >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1pair_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,std::string > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< std::string,std::string > >::value_type *) &std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< std::string,std::string > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1pair_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< std::string,std::string > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::string,std::string > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__set(arg1,arg2,(std::pair< std::string,std::string > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1string_1string_1pair_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< std::string,std::string > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1tcp_1endpoint_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::tcp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::tcp::endpoint > *)new std::vector< libTAU::tcp::endpoint >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::tcp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1tcp_1endpoint_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::tcp::endpoint >::size_type arg1 ;
  std::vector< libTAU::tcp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::tcp::endpoint >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::tcp::endpoint > *)new std::vector< libTAU::tcp::endpoint >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::tcp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_tcp_1endpoint_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::tcp::endpoint > *arg1 = (std::vector< libTAU::tcp::endpoint > *) 0 ;
  std::vector< libTAU::tcp::endpoint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::tcp::endpoint > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::tcp::endpoint > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_tcp_1endpoint_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::tcp::endpoint > *arg1 = (std::vector< libTAU::tcp::endpoint > *) 0 ;
  std::vector< libTAU::tcp::endpoint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::tcp::endpoint > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::tcp::endpoint > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_tcp_1endpoint_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::tcp::endpoint > *arg1 = (std::vector< libTAU::tcp::endpoint > *) 0 ;
  std::vector< libTAU::tcp::endpoint >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::tcp::endpoint > **)&jarg1; 
  arg2 = (std::vector< libTAU::tcp::endpoint >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_tcp_1endpoint_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::tcp::endpoint > *arg1 = (std::vector< libTAU::tcp::endpoint > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::tcp::endpoint > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::tcp::endpoint > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_tcp_1endpoint_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::tcp::endpoint > *arg1 = (std::vector< libTAU::tcp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::tcp::endpoint > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_tcp_1endpoint_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::tcp::endpoint > *arg1 = (std::vector< libTAU::tcp::endpoint > *) 0 ;
  std::vector< libTAU::tcp::endpoint >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::tcp::endpoint > **)&jarg1; 
  arg2 = *(std::vector< libTAU::tcp::endpoint >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::tcp::endpoint >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::tcp::endpoint >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_tcp_1endpoint_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::tcp::endpoint > *arg1 = (std::vector< libTAU::tcp::endpoint > *) 0 ;
  int arg2 ;
  std::vector< libTAU::tcp::endpoint >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::tcp::endpoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::tcp::endpoint >::value_type *) &std_vector_Sl_libTAU_tcp_endpoint_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::tcp::endpoint >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_tcp_1endpoint_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::tcp::endpoint > *arg1 = (std::vector< libTAU::tcp::endpoint > *) 0 ;
  int arg2 ;
  std::vector< libTAU::tcp::endpoint >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::tcp::endpoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::tcp::endpoint >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::tcp::endpoint >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_tcp_endpoint_Sg__set(arg1,arg2,(libTAU::tcp::endpoint const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1tcp_1endpoint_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::tcp::endpoint > *arg1 = (std::vector< libTAU::tcp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::tcp::endpoint > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1udp_1endpoint_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::udp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::udp::endpoint > *)new std::vector< libTAU::udp::endpoint >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::udp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1udp_1endpoint_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::udp::endpoint >::size_type arg1 ;
  std::vector< libTAU::udp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::udp::endpoint >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::udp::endpoint > *)new std::vector< libTAU::udp::endpoint >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::udp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1endpoint_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::udp::endpoint > *arg1 = (std::vector< libTAU::udp::endpoint > *) 0 ;
  std::vector< libTAU::udp::endpoint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::udp::endpoint > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::udp::endpoint > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1endpoint_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::udp::endpoint > *arg1 = (std::vector< libTAU::udp::endpoint > *) 0 ;
  std::vector< libTAU::udp::endpoint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::udp::endpoint > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::udp::endpoint > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1endpoint_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::udp::endpoint > *arg1 = (std::vector< libTAU::udp::endpoint > *) 0 ;
  std::vector< libTAU::udp::endpoint >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::udp::endpoint > **)&jarg1; 
  arg2 = (std::vector< libTAU::udp::endpoint >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1endpoint_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::udp::endpoint > *arg1 = (std::vector< libTAU::udp::endpoint > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::udp::endpoint > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::udp::endpoint > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1endpoint_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::udp::endpoint > *arg1 = (std::vector< libTAU::udp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::udp::endpoint > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1endpoint_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::udp::endpoint > *arg1 = (std::vector< libTAU::udp::endpoint > *) 0 ;
  std::vector< libTAU::udp::endpoint >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::udp::endpoint > **)&jarg1; 
  arg2 = *(std::vector< libTAU::udp::endpoint >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::udp::endpoint >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::udp::endpoint >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1endpoint_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::udp::endpoint > *arg1 = (std::vector< libTAU::udp::endpoint > *) 0 ;
  int arg2 ;
  std::vector< libTAU::udp::endpoint >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::udp::endpoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::udp::endpoint >::value_type *) &std_vector_Sl_libTAU_udp_endpoint_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::udp::endpoint >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1endpoint_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::udp::endpoint > *arg1 = (std::vector< libTAU::udp::endpoint > *) 0 ;
  int arg2 ;
  std::vector< libTAU::udp::endpoint >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::udp::endpoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::udp::endpoint >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::udp::endpoint >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_udp_endpoint_Sg__set(arg1,arg2,(libTAU::udp::endpoint const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1udp_1endpoint_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::udp::endpoint > *arg1 = (std::vector< libTAU::udp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::udp::endpoint > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1announce_1endpoint_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::announce_endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::announce_endpoint > *)new std::vector< libTAU::announce_endpoint >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::announce_endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1announce_1endpoint_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::announce_endpoint >::size_type arg1 ;
  std::vector< libTAU::announce_endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::announce_endpoint >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::announce_endpoint > *)new std::vector< libTAU::announce_endpoint >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::announce_endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::announce_endpoint > *arg1 = (std::vector< libTAU::announce_endpoint > *) 0 ;
  std::vector< libTAU::announce_endpoint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::announce_endpoint > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::announce_endpoint > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::announce_endpoint > *arg1 = (std::vector< libTAU::announce_endpoint > *) 0 ;
  std::vector< libTAU::announce_endpoint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::announce_endpoint > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::announce_endpoint > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::announce_endpoint > *arg1 = (std::vector< libTAU::announce_endpoint > *) 0 ;
  std::vector< libTAU::announce_endpoint >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::announce_endpoint > **)&jarg1; 
  arg2 = (std::vector< libTAU::announce_endpoint >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::announce_endpoint > *arg1 = (std::vector< libTAU::announce_endpoint > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::announce_endpoint > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::announce_endpoint > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::announce_endpoint > *arg1 = (std::vector< libTAU::announce_endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::announce_endpoint > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::announce_endpoint > *arg1 = (std::vector< libTAU::announce_endpoint > *) 0 ;
  std::vector< libTAU::announce_endpoint >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::announce_endpoint > **)&jarg1; 
  arg2 = *(std::vector< libTAU::announce_endpoint >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::announce_endpoint >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::announce_endpoint >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::announce_endpoint > *arg1 = (std::vector< libTAU::announce_endpoint > *) 0 ;
  int arg2 ;
  std::vector< libTAU::announce_endpoint >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::announce_endpoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::announce_endpoint >::value_type *) &std_vector_Sl_libTAU_announce_endpoint_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::announce_endpoint >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::announce_endpoint > *arg1 = (std::vector< libTAU::announce_endpoint > *) 0 ;
  int arg2 ;
  std::vector< libTAU::announce_endpoint >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::announce_endpoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::announce_endpoint >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::announce_endpoint >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_announce_endpoint_Sg__set(arg1,arg2,(libTAU::announce_endpoint const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1announce_1endpoint_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::announce_endpoint > *arg1 = (std::vector< libTAU::announce_endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::announce_endpoint > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1announce_1entry_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::announce_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::announce_entry > *)new std::vector< libTAU::announce_entry >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::announce_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1announce_1entry_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::announce_entry >::size_type arg1 ;
  std::vector< libTAU::announce_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::announce_entry >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::announce_entry > *)new std::vector< libTAU::announce_entry >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::announce_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::announce_entry > *arg1 = (std::vector< libTAU::announce_entry > *) 0 ;
  std::vector< libTAU::announce_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::announce_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::announce_entry > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::announce_entry > *arg1 = (std::vector< libTAU::announce_entry > *) 0 ;
  std::vector< libTAU::announce_entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::announce_entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::announce_entry > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::announce_entry > *arg1 = (std::vector< libTAU::announce_entry > *) 0 ;
  std::vector< libTAU::announce_entry >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::announce_entry > **)&jarg1; 
  arg2 = (std::vector< libTAU::announce_entry >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::announce_entry > *arg1 = (std::vector< libTAU::announce_entry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::announce_entry > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::announce_entry > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::announce_entry > *arg1 = (std::vector< libTAU::announce_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::announce_entry > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::announce_entry > *arg1 = (std::vector< libTAU::announce_entry > *) 0 ;
  std::vector< libTAU::announce_entry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::announce_entry > **)&jarg1; 
  arg2 = *(std::vector< libTAU::announce_entry >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::announce_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::announce_entry >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::announce_entry > *arg1 = (std::vector< libTAU::announce_entry > *) 0 ;
  int arg2 ;
  std::vector< libTAU::announce_entry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::announce_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::announce_entry >::value_type *) &std_vector_Sl_libTAU_announce_entry_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::announce_entry >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::announce_entry > *arg1 = (std::vector< libTAU::announce_entry > *) 0 ;
  int arg2 ;
  std::vector< libTAU::announce_entry >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::announce_entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::announce_entry >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::announce_entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_announce_entry_Sg__set(arg1,arg2,(libTAU::announce_entry const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1announce_1entry_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::announce_entry > *arg1 = (std::vector< libTAU::announce_entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::announce_entry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1file_1slice_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::file_slice > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::file_slice > *)new std::vector< libTAU::file_slice >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::file_slice > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1file_1slice_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::file_slice >::size_type arg1 ;
  std::vector< libTAU::file_slice > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::file_slice >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::file_slice > *)new std::vector< libTAU::file_slice >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::file_slice > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::file_slice > *arg1 = (std::vector< libTAU::file_slice > *) 0 ;
  std::vector< libTAU::file_slice >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::file_slice > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::file_slice > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::file_slice > *arg1 = (std::vector< libTAU::file_slice > *) 0 ;
  std::vector< libTAU::file_slice >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::file_slice > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::file_slice > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::file_slice > *arg1 = (std::vector< libTAU::file_slice > *) 0 ;
  std::vector< libTAU::file_slice >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::file_slice > **)&jarg1; 
  arg2 = (std::vector< libTAU::file_slice >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::file_slice > *arg1 = (std::vector< libTAU::file_slice > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::file_slice > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::file_slice > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::file_slice > *arg1 = (std::vector< libTAU::file_slice > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::file_slice > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::file_slice > *arg1 = (std::vector< libTAU::file_slice > *) 0 ;
  std::vector< libTAU::file_slice >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::file_slice > **)&jarg1; 
  arg2 = *(std::vector< libTAU::file_slice >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::file_slice >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::file_slice >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::file_slice > *arg1 = (std::vector< libTAU::file_slice > *) 0 ;
  int arg2 ;
  std::vector< libTAU::file_slice >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::file_slice > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::file_slice >::value_type *) &std_vector_Sl_libTAU_file_slice_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::file_slice >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::file_slice > *arg1 = (std::vector< libTAU::file_slice > *) 0 ;
  int arg2 ;
  std::vector< libTAU::file_slice >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::file_slice > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::file_slice >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::file_slice >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_file_slice_Sg__set(arg1,arg2,(libTAU::file_slice const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1file_1slice_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::file_slice > *arg1 = (std::vector< libTAU::file_slice > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::file_slice > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1piece_1block_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::piece_block > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::piece_block > *)new std::vector< libTAU::piece_block >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::piece_block > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1piece_1block_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::piece_block >::size_type arg1 ;
  std::vector< libTAU::piece_block > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::piece_block >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::piece_block > *)new std::vector< libTAU::piece_block >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::piece_block > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::piece_block > *arg1 = (std::vector< libTAU::piece_block > *) 0 ;
  std::vector< libTAU::piece_block >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::piece_block > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::piece_block > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::piece_block > *arg1 = (std::vector< libTAU::piece_block > *) 0 ;
  std::vector< libTAU::piece_block >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::piece_block > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::piece_block > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::piece_block > *arg1 = (std::vector< libTAU::piece_block > *) 0 ;
  std::vector< libTAU::piece_block >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::piece_block > **)&jarg1; 
  arg2 = (std::vector< libTAU::piece_block >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::piece_block > *arg1 = (std::vector< libTAU::piece_block > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::piece_block > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::piece_block > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::piece_block > *arg1 = (std::vector< libTAU::piece_block > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::piece_block > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::piece_block > *arg1 = (std::vector< libTAU::piece_block > *) 0 ;
  std::vector< libTAU::piece_block >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::piece_block > **)&jarg1; 
  arg2 = *(std::vector< libTAU::piece_block >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::piece_block >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::piece_block >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::piece_block > *arg1 = (std::vector< libTAU::piece_block > *) 0 ;
  int arg2 ;
  std::vector< libTAU::piece_block >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::piece_block > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::piece_block >::value_type *) &std_vector_Sl_libTAU_piece_block_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::piece_block >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::piece_block > *arg1 = (std::vector< libTAU::piece_block > *) 0 ;
  int arg2 ;
  std::vector< libTAU::piece_block >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::piece_block > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::piece_block >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::piece_block >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_piece_block_Sg__set(arg1,arg2,(libTAU::piece_block const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1piece_1block_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::piece_block > *arg1 = (std::vector< libTAU::piece_block > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::piece_block > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1torrent_1status_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::torrent_status > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::torrent_status > *)new std::vector< libTAU::torrent_status >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::torrent_status > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1torrent_1status_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::torrent_status >::size_type arg1 ;
  std::vector< libTAU::torrent_status > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::torrent_status >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::torrent_status > *)new std::vector< libTAU::torrent_status >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::torrent_status > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::torrent_status > *arg1 = (std::vector< libTAU::torrent_status > *) 0 ;
  std::vector< libTAU::torrent_status >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::torrent_status > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::torrent_status > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::torrent_status > *arg1 = (std::vector< libTAU::torrent_status > *) 0 ;
  std::vector< libTAU::torrent_status >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::torrent_status > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::torrent_status > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::torrent_status > *arg1 = (std::vector< libTAU::torrent_status > *) 0 ;
  std::vector< libTAU::torrent_status >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::torrent_status > **)&jarg1; 
  arg2 = (std::vector< libTAU::torrent_status >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::torrent_status > *arg1 = (std::vector< libTAU::torrent_status > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::torrent_status > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::torrent_status > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::torrent_status > *arg1 = (std::vector< libTAU::torrent_status > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::torrent_status > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::torrent_status > *arg1 = (std::vector< libTAU::torrent_status > *) 0 ;
  std::vector< libTAU::torrent_status >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::torrent_status > **)&jarg1; 
  arg2 = *(std::vector< libTAU::torrent_status >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::torrent_status >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::torrent_status >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::torrent_status > *arg1 = (std::vector< libTAU::torrent_status > *) 0 ;
  int arg2 ;
  std::vector< libTAU::torrent_status >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::torrent_status > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::torrent_status >::value_type *) &std_vector_Sl_libTAU_torrent_status_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::torrent_status >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::torrent_status > *arg1 = (std::vector< libTAU::torrent_status > *) 0 ;
  int arg2 ;
  std::vector< libTAU::torrent_status >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::torrent_status > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::torrent_status >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::torrent_status >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_torrent_status_Sg__set(arg1,arg2,(libTAU::torrent_status const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1torrent_1status_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::torrent_status > *arg1 = (std::vector< libTAU::torrent_status > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::torrent_status > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1dht_1lookup_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::dht_lookup > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::dht_lookup > *)new std::vector< libTAU::dht_lookup >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::dht_lookup > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1dht_1lookup_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::dht_lookup >::size_type arg1 ;
  std::vector< libTAU::dht_lookup > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::dht_lookup >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::dht_lookup > *)new std::vector< libTAU::dht_lookup >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::dht_lookup > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::dht_lookup > *arg1 = (std::vector< libTAU::dht_lookup > *) 0 ;
  std::vector< libTAU::dht_lookup >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::dht_lookup > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::dht_lookup > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::dht_lookup > *arg1 = (std::vector< libTAU::dht_lookup > *) 0 ;
  std::vector< libTAU::dht_lookup >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::dht_lookup > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::dht_lookup > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::dht_lookup > *arg1 = (std::vector< libTAU::dht_lookup > *) 0 ;
  std::vector< libTAU::dht_lookup >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::dht_lookup > **)&jarg1; 
  arg2 = (std::vector< libTAU::dht_lookup >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::dht_lookup > *arg1 = (std::vector< libTAU::dht_lookup > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::dht_lookup > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::dht_lookup > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::dht_lookup > *arg1 = (std::vector< libTAU::dht_lookup > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::dht_lookup > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::dht_lookup > *arg1 = (std::vector< libTAU::dht_lookup > *) 0 ;
  std::vector< libTAU::dht_lookup >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::dht_lookup > **)&jarg1; 
  arg2 = *(std::vector< libTAU::dht_lookup >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::dht_lookup >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::dht_lookup >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::dht_lookup > *arg1 = (std::vector< libTAU::dht_lookup > *) 0 ;
  int arg2 ;
  std::vector< libTAU::dht_lookup >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::dht_lookup > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::dht_lookup >::value_type *) &std_vector_Sl_libTAU_dht_lookup_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::dht_lookup >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::dht_lookup > *arg1 = (std::vector< libTAU::dht_lookup > *) 0 ;
  int arg2 ;
  std::vector< libTAU::dht_lookup >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::dht_lookup > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::dht_lookup >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::dht_lookup >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_dht_lookup_Sg__set(arg1,arg2,(libTAU::dht_lookup const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1lookup_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::dht_lookup > *arg1 = (std::vector< libTAU::dht_lookup > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::dht_lookup > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1dht_1routing_1bucket_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::dht_routing_bucket > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::dht_routing_bucket > *)new std::vector< libTAU::dht_routing_bucket >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::dht_routing_bucket > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1dht_1routing_1bucket_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::dht_routing_bucket >::size_type arg1 ;
  std::vector< libTAU::dht_routing_bucket > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::dht_routing_bucket >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::dht_routing_bucket > *)new std::vector< libTAU::dht_routing_bucket >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::dht_routing_bucket > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::dht_routing_bucket > *arg1 = (std::vector< libTAU::dht_routing_bucket > *) 0 ;
  std::vector< libTAU::dht_routing_bucket >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::dht_routing_bucket > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::dht_routing_bucket > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::dht_routing_bucket > *arg1 = (std::vector< libTAU::dht_routing_bucket > *) 0 ;
  std::vector< libTAU::dht_routing_bucket >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::dht_routing_bucket > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::dht_routing_bucket > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::dht_routing_bucket > *arg1 = (std::vector< libTAU::dht_routing_bucket > *) 0 ;
  std::vector< libTAU::dht_routing_bucket >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::dht_routing_bucket > **)&jarg1; 
  arg2 = (std::vector< libTAU::dht_routing_bucket >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::dht_routing_bucket > *arg1 = (std::vector< libTAU::dht_routing_bucket > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::dht_routing_bucket > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::dht_routing_bucket > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::dht_routing_bucket > *arg1 = (std::vector< libTAU::dht_routing_bucket > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::dht_routing_bucket > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::dht_routing_bucket > *arg1 = (std::vector< libTAU::dht_routing_bucket > *) 0 ;
  std::vector< libTAU::dht_routing_bucket >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::dht_routing_bucket > **)&jarg1; 
  arg2 = *(std::vector< libTAU::dht_routing_bucket >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::dht_routing_bucket >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::dht_routing_bucket >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::dht_routing_bucket > *arg1 = (std::vector< libTAU::dht_routing_bucket > *) 0 ;
  int arg2 ;
  std::vector< libTAU::dht_routing_bucket >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::dht_routing_bucket > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::dht_routing_bucket >::value_type *) &std_vector_Sl_libTAU_dht_routing_bucket_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::dht_routing_bucket >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::dht_routing_bucket > *arg1 = (std::vector< libTAU::dht_routing_bucket > *) 0 ;
  int arg2 ;
  std::vector< libTAU::dht_routing_bucket >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::dht_routing_bucket > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::dht_routing_bucket >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::dht_routing_bucket >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_dht_routing_bucket_Sg__set(arg1,arg2,(libTAU::dht_routing_bucket const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1routing_1bucket_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::dht_routing_bucket > *arg1 = (std::vector< libTAU::dht_routing_bucket > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::dht_routing_bucket > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1entry_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::entry > *)new std::vector< libTAU::entry >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1entry_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::entry >::size_type arg1 ;
  std::vector< libTAU::entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::entry >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::entry > *)new std::vector< libTAU::entry >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::entry > *arg1 = (std::vector< libTAU::entry > *) 0 ;
  std::vector< libTAU::entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::entry > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::entry > *arg1 = (std::vector< libTAU::entry > *) 0 ;
  std::vector< libTAU::entry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::entry > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::entry > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::entry > *arg1 = (std::vector< libTAU::entry > *) 0 ;
  std::vector< libTAU::entry >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::entry > **)&jarg1; 
  arg2 = (std::vector< libTAU::entry >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::entry > *arg1 = (std::vector< libTAU::entry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::entry > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::entry > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::entry > *arg1 = (std::vector< libTAU::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::entry > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::entry > *arg1 = (std::vector< libTAU::entry > *) 0 ;
  std::vector< libTAU::entry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::entry > **)&jarg1; 
  arg2 = *(std::vector< libTAU::entry >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::entry >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::entry > *arg1 = (std::vector< libTAU::entry > *) 0 ;
  int arg2 ;
  std::vector< libTAU::entry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::entry >::value_type *) &std_vector_Sl_libTAU_entry_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::entry >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::entry > *arg1 = (std::vector< libTAU::entry > *) 0 ;
  int arg2 ;
  std::vector< libTAU::entry >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::entry > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::entry >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::entry >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_entry_Sg__set(arg1,arg2,(libTAU::entry const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1entry_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::entry > *arg1 = (std::vector< libTAU::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::entry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1partial_1piece_1info_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::partial_piece_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::partial_piece_info > *)new std::vector< libTAU::partial_piece_info >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::partial_piece_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1partial_1piece_1info_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::partial_piece_info >::size_type arg1 ;
  std::vector< libTAU::partial_piece_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::partial_piece_info >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::partial_piece_info > *)new std::vector< libTAU::partial_piece_info >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::partial_piece_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::partial_piece_info > *arg1 = (std::vector< libTAU::partial_piece_info > *) 0 ;
  std::vector< libTAU::partial_piece_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::partial_piece_info > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::partial_piece_info > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::partial_piece_info > *arg1 = (std::vector< libTAU::partial_piece_info > *) 0 ;
  std::vector< libTAU::partial_piece_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::partial_piece_info > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::partial_piece_info > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::partial_piece_info > *arg1 = (std::vector< libTAU::partial_piece_info > *) 0 ;
  std::vector< libTAU::partial_piece_info >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::partial_piece_info > **)&jarg1; 
  arg2 = (std::vector< libTAU::partial_piece_info >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::partial_piece_info > *arg1 = (std::vector< libTAU::partial_piece_info > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::partial_piece_info > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::partial_piece_info > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::partial_piece_info > *arg1 = (std::vector< libTAU::partial_piece_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::partial_piece_info > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::partial_piece_info > *arg1 = (std::vector< libTAU::partial_piece_info > *) 0 ;
  std::vector< libTAU::partial_piece_info >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::partial_piece_info > **)&jarg1; 
  arg2 = *(std::vector< libTAU::partial_piece_info >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::partial_piece_info >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::partial_piece_info >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::partial_piece_info > *arg1 = (std::vector< libTAU::partial_piece_info > *) 0 ;
  int arg2 ;
  std::vector< libTAU::partial_piece_info >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::partial_piece_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::partial_piece_info >::value_type *) &std_vector_Sl_libTAU_partial_piece_info_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::partial_piece_info >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::partial_piece_info > *arg1 = (std::vector< libTAU::partial_piece_info > *) 0 ;
  int arg2 ;
  std::vector< libTAU::partial_piece_info >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::partial_piece_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::partial_piece_info >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::partial_piece_info >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_partial_piece_info_Sg__set(arg1,arg2,(libTAU::partial_piece_info const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1partial_1piece_1info_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::partial_piece_info > *arg1 = (std::vector< libTAU::partial_piece_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::partial_piece_info > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1peer_1info_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::peer_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::peer_info > *)new std::vector< libTAU::peer_info >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::peer_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1peer_1info_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::peer_info >::size_type arg1 ;
  std::vector< libTAU::peer_info > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::peer_info >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::peer_info > *)new std::vector< libTAU::peer_info >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::peer_info > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::peer_info > *arg1 = (std::vector< libTAU::peer_info > *) 0 ;
  std::vector< libTAU::peer_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::peer_info > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::peer_info > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::peer_info > *arg1 = (std::vector< libTAU::peer_info > *) 0 ;
  std::vector< libTAU::peer_info >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::peer_info > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::peer_info > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::peer_info > *arg1 = (std::vector< libTAU::peer_info > *) 0 ;
  std::vector< libTAU::peer_info >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::peer_info > **)&jarg1; 
  arg2 = (std::vector< libTAU::peer_info >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::peer_info > *arg1 = (std::vector< libTAU::peer_info > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::peer_info > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::peer_info > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::peer_info > *arg1 = (std::vector< libTAU::peer_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::peer_info > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::peer_info > *arg1 = (std::vector< libTAU::peer_info > *) 0 ;
  std::vector< libTAU::peer_info >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::peer_info > **)&jarg1; 
  arg2 = *(std::vector< libTAU::peer_info >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::peer_info >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::peer_info >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::peer_info > *arg1 = (std::vector< libTAU::peer_info > *) 0 ;
  int arg2 ;
  std::vector< libTAU::peer_info >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::peer_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::peer_info >::value_type *) &std_vector_Sl_libTAU_peer_info_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::peer_info >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::peer_info > *arg1 = (std::vector< libTAU::peer_info > *) 0 ;
  int arg2 ;
  std::vector< libTAU::peer_info >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::peer_info > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::peer_info >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::peer_info >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_peer_info_Sg__set(arg1,arg2,(libTAU::peer_info const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1peer_1info_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::peer_info > *arg1 = (std::vector< libTAU::peer_info > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::peer_info > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1torrent_1handle_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::torrent_handle > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::torrent_handle > *)new std::vector< libTAU::torrent_handle >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::torrent_handle > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1torrent_1handle_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::torrent_handle >::size_type arg1 ;
  std::vector< libTAU::torrent_handle > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::torrent_handle >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::torrent_handle > *)new std::vector< libTAU::torrent_handle >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::torrent_handle > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::torrent_handle > *arg1 = (std::vector< libTAU::torrent_handle > *) 0 ;
  std::vector< libTAU::torrent_handle >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::torrent_handle > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::torrent_handle > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::torrent_handle > *arg1 = (std::vector< libTAU::torrent_handle > *) 0 ;
  std::vector< libTAU::torrent_handle >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::torrent_handle > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::torrent_handle > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::torrent_handle > *arg1 = (std::vector< libTAU::torrent_handle > *) 0 ;
  std::vector< libTAU::torrent_handle >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::torrent_handle > **)&jarg1; 
  arg2 = (std::vector< libTAU::torrent_handle >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::torrent_handle > *arg1 = (std::vector< libTAU::torrent_handle > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::torrent_handle > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::torrent_handle > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::torrent_handle > *arg1 = (std::vector< libTAU::torrent_handle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::torrent_handle > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::torrent_handle > *arg1 = (std::vector< libTAU::torrent_handle > *) 0 ;
  std::vector< libTAU::torrent_handle >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::torrent_handle > **)&jarg1; 
  arg2 = *(std::vector< libTAU::torrent_handle >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::torrent_handle >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::torrent_handle >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::torrent_handle > *arg1 = (std::vector< libTAU::torrent_handle > *) 0 ;
  int arg2 ;
  std::vector< libTAU::torrent_handle >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::torrent_handle > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::torrent_handle >::value_type *) &std_vector_Sl_libTAU_torrent_handle_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::torrent_handle >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::torrent_handle > *arg1 = (std::vector< libTAU::torrent_handle > *) 0 ;
  int arg2 ;
  std::vector< libTAU::torrent_handle >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::torrent_handle > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::torrent_handle >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::torrent_handle >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_torrent_handle_Sg__set(arg1,arg2,(libTAU::torrent_handle const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1torrent_1handle_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::torrent_handle > *arg1 = (std::vector< libTAU::torrent_handle > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::torrent_handle > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1alert_1ptr_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::alert * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::alert * > *)new std::vector< libTAU::alert * >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::alert * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1alert_1ptr_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::alert * >::size_type arg1 ;
  std::vector< libTAU::alert * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::alert * >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::alert * > *)new std::vector< libTAU::alert * >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::alert * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1ptr_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::alert * > *arg1 = (std::vector< libTAU::alert * > *) 0 ;
  std::vector< libTAU::alert * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::alert * > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::alert * > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1ptr_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::alert * > *arg1 = (std::vector< libTAU::alert * > *) 0 ;
  std::vector< libTAU::alert * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::alert * > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::alert * > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1ptr_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::alert * > *arg1 = (std::vector< libTAU::alert * > *) 0 ;
  std::vector< libTAU::alert * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::alert * > **)&jarg1; 
  arg2 = (std::vector< libTAU::alert * >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1ptr_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::alert * > *arg1 = (std::vector< libTAU::alert * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::alert * > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::alert * > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1ptr_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::alert * > *arg1 = (std::vector< libTAU::alert * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::alert * > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1ptr_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::alert * > *arg1 = (std::vector< libTAU::alert * > *) 0 ;
  std::vector< libTAU::alert * >::value_type *arg2 = 0 ;
  std::vector< libTAU::alert * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::alert * > **)&jarg1; 
  temp2 = *(std::vector< libTAU::alert * >::value_type *)&jarg2;
  arg2 = (std::vector< libTAU::alert * >::value_type *)&temp2; 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::alert * >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1ptr_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::alert * > *arg1 = (std::vector< libTAU::alert * > *) 0 ;
  int arg2 ;
  std::vector< libTAU::alert * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::alert * > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::alert * >::value_type *) &std_vector_Sl_libTAU_alert_Sm__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::alert * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1ptr_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::alert * > *arg1 = (std::vector< libTAU::alert * > *) 0 ;
  int arg2 ;
  std::vector< libTAU::alert * >::value_type *arg3 = 0 ;
  std::vector< libTAU::alert * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::alert * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< libTAU::alert * >::value_type *)&jarg3;
  arg3 = (std::vector< libTAU::alert * >::value_type *)&temp3; 
  {
    try {
      try {
        std_vector_Sl_libTAU_alert_Sm__Sg__set(arg1,arg2,(libTAU::alert *const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1alert_1ptr_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::alert * > *arg1 = (std::vector< libTAU::alert * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::alert * > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1stats_1metric_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::stats_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::stats_metric > *)new std::vector< libTAU::stats_metric >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::stats_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1stats_1metric_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::stats_metric >::size_type arg1 ;
  std::vector< libTAU::stats_metric > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::stats_metric >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::stats_metric > *)new std::vector< libTAU::stats_metric >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::stats_metric > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1metric_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::stats_metric > *arg1 = (std::vector< libTAU::stats_metric > *) 0 ;
  std::vector< libTAU::stats_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::stats_metric > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::stats_metric > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1metric_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::stats_metric > *arg1 = (std::vector< libTAU::stats_metric > *) 0 ;
  std::vector< libTAU::stats_metric >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::stats_metric > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::stats_metric > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1metric_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::stats_metric > *arg1 = (std::vector< libTAU::stats_metric > *) 0 ;
  std::vector< libTAU::stats_metric >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::stats_metric > **)&jarg1; 
  arg2 = (std::vector< libTAU::stats_metric >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1metric_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::stats_metric > *arg1 = (std::vector< libTAU::stats_metric > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::stats_metric > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::stats_metric > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1metric_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::stats_metric > *arg1 = (std::vector< libTAU::stats_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::stats_metric > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1metric_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::stats_metric > *arg1 = (std::vector< libTAU::stats_metric > *) 0 ;
  std::vector< libTAU::stats_metric >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::stats_metric > **)&jarg1; 
  arg2 = *(std::vector< libTAU::stats_metric >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::stats_metric >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::stats_metric >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1metric_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::stats_metric > *arg1 = (std::vector< libTAU::stats_metric > *) 0 ;
  int arg2 ;
  std::vector< libTAU::stats_metric >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::stats_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::stats_metric >::value_type *) &std_vector_Sl_libTAU_stats_metric_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::stats_metric >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1metric_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::stats_metric > *arg1 = (std::vector< libTAU::stats_metric > *) 0 ;
  int arg2 ;
  std::vector< libTAU::stats_metric >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::stats_metric > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::stats_metric >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::stats_metric >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_stats_metric_Sg__set(arg1,arg2,(libTAU::stats_metric const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1stats_1metric_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::stats_metric > *arg1 = (std::vector< libTAU::stats_metric > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::stats_metric > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1ip_1interface_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ip_interface > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< ip_interface > *)new std::vector< ip_interface >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< ip_interface > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1ip_1interface_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< ip_interface >::size_type arg1 ;
  std::vector< ip_interface > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< ip_interface >::size_type)jarg1; 
  {
    try {
      result = (std::vector< ip_interface > *)new std::vector< ip_interface >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< ip_interface > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ip_interface > *arg1 = (std::vector< ip_interface > *) 0 ;
  std::vector< ip_interface >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ip_interface > **)&jarg1; 
  {
    try {
      result = ((std::vector< ip_interface > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ip_interface > *arg1 = (std::vector< ip_interface > *) 0 ;
  std::vector< ip_interface >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ip_interface > **)&jarg1; 
  {
    try {
      result = ((std::vector< ip_interface > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ip_interface > *arg1 = (std::vector< ip_interface > *) 0 ;
  std::vector< ip_interface >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ip_interface > **)&jarg1; 
  arg2 = (std::vector< ip_interface >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ip_interface > *arg1 = (std::vector< ip_interface > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ip_interface > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< ip_interface > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ip_interface > *arg1 = (std::vector< ip_interface > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ip_interface > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ip_interface > *arg1 = (std::vector< ip_interface > *) 0 ;
  std::vector< ip_interface >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ip_interface > **)&jarg1; 
  arg2 = *(std::vector< ip_interface >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ip_interface >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< ip_interface >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ip_interface > *arg1 = (std::vector< ip_interface > *) 0 ;
  int arg2 ;
  std::vector< ip_interface >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ip_interface > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< ip_interface >::value_type *) &std_vector_Sl_ip_interface_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< ip_interface >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ip_interface > *arg1 = (std::vector< ip_interface > *) 0 ;
  int arg2 ;
  std::vector< ip_interface >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ip_interface > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ip_interface >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ip_interface >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_ip_interface_Sg__set(arg1,arg2,(ip_interface const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1ip_1interface_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ip_interface > *arg1 = (std::vector< ip_interface > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ip_interface > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1ip_1route_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ip_route > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< ip_route > *)new std::vector< ip_route >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< ip_route > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1ip_1route_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< ip_route >::size_type arg1 ;
  std::vector< ip_route > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< ip_route >::size_type)jarg1; 
  {
    try {
      result = (std::vector< ip_route > *)new std::vector< ip_route >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< ip_route > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ip_route > *arg1 = (std::vector< ip_route > *) 0 ;
  std::vector< ip_route >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ip_route > **)&jarg1; 
  {
    try {
      result = ((std::vector< ip_route > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ip_route > *arg1 = (std::vector< ip_route > *) 0 ;
  std::vector< ip_route >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ip_route > **)&jarg1; 
  {
    try {
      result = ((std::vector< ip_route > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ip_route > *arg1 = (std::vector< ip_route > *) 0 ;
  std::vector< ip_route >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ip_route > **)&jarg1; 
  arg2 = (std::vector< ip_route >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ip_route > *arg1 = (std::vector< ip_route > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ip_route > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< ip_route > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ip_route > *arg1 = (std::vector< ip_route > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ip_route > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ip_route > *arg1 = (std::vector< ip_route > *) 0 ;
  std::vector< ip_route >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ip_route > **)&jarg1; 
  arg2 = *(std::vector< ip_route >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ip_route >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< ip_route >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ip_route > *arg1 = (std::vector< ip_route > *) 0 ;
  int arg2 ;
  std::vector< ip_route >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ip_route > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< ip_route >::value_type *) &std_vector_Sl_ip_route_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< ip_route >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ip_route > *arg1 = (std::vector< ip_route > *) 0 ;
  int arg2 ;
  std::vector< ip_route >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ip_route > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ip_route >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ip_route >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_ip_route_Sg__set(arg1,arg2,(ip_route const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1ip_1route_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ip_route > *arg1 = (std::vector< ip_route > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ip_route > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bool_1vector_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< bool > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::vector< bool > > *)new std::vector< std::vector< bool > >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::vector< bool > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bool_1vector_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::vector< bool > >::size_type arg1 ;
  std::vector< std::vector< bool > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::vector< bool > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::vector< bool > > *)new std::vector< std::vector< bool > >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::vector< bool > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< bool > > *arg1 = (std::vector< std::vector< bool > > *) 0 ;
  std::vector< std::vector< bool > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< bool > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::vector< bool > > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< bool > > *arg1 = (std::vector< std::vector< bool > > *) 0 ;
  std::vector< std::vector< bool > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< bool > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::vector< bool > > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< bool > > *arg1 = (std::vector< std::vector< bool > > *) 0 ;
  std::vector< std::vector< bool > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< bool > > **)&jarg1; 
  arg2 = (std::vector< std::vector< bool > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< bool > > *arg1 = (std::vector< std::vector< bool > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< bool > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::vector< bool > > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< bool > > *arg1 = (std::vector< std::vector< bool > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< bool > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< bool > > *arg1 = (std::vector< std::vector< bool > > *) 0 ;
  std::vector< std::vector< bool > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< bool > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< bool > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< bool > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::vector< bool > >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< bool > > *arg1 = (std::vector< std::vector< bool > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< bool > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< bool > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::vector< bool > >::value_type *) &std_vector_Sl_std_vector_Sl_bool_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::vector< bool > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bool_1vector_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< bool > > *arg1 = (std::vector< std::vector< bool > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< bool > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< bool > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< bool > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< bool > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_bool_Sg__Sg__set(arg1,arg2,(std::vector< bool > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1bool_1vector_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< bool > > *arg1 = (std::vector< std::vector< bool > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< bool > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha256_1hash_1vector_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< libTAU::digest32< 256 > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::vector< libTAU::digest32< 256 > > > *)new std::vector< std::vector< libTAU::digest32< 256 > > >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::vector< libTAU::digest32< 256 > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha256_1hash_1vector_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::vector< libTAU::digest32< 256 > > >::size_type arg1 ;
  std::vector< std::vector< libTAU::digest32< 256 > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::vector< libTAU::digest32< 256 > > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::vector< libTAU::digest32< 256 > > > *)new std::vector< std::vector< libTAU::digest32< 256 > > >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::vector< libTAU::digest32< 256 > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< libTAU::digest32< 256 > > > *arg1 = (std::vector< std::vector< libTAU::digest32< 256 > > > *) 0 ;
  std::vector< std::vector< libTAU::digest32< 256 > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< libTAU::digest32< 256 > > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::vector< libTAU::digest32< 256 > > > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< libTAU::digest32< 256 > > > *arg1 = (std::vector< std::vector< libTAU::digest32< 256 > > > *) 0 ;
  std::vector< std::vector< libTAU::digest32< 256 > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< libTAU::digest32< 256 > > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::vector< libTAU::digest32< 256 > > > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< libTAU::digest32< 256 > > > *arg1 = (std::vector< std::vector< libTAU::digest32< 256 > > > *) 0 ;
  std::vector< std::vector< libTAU::digest32< 256 > > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< libTAU::digest32< 256 > > > **)&jarg1; 
  arg2 = (std::vector< std::vector< libTAU::digest32< 256 > > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< libTAU::digest32< 256 > > > *arg1 = (std::vector< std::vector< libTAU::digest32< 256 > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< libTAU::digest32< 256 > > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::vector< libTAU::digest32< 256 > > > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< libTAU::digest32< 256 > > > *arg1 = (std::vector< std::vector< libTAU::digest32< 256 > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< libTAU::digest32< 256 > > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< libTAU::digest32< 256 > > > *arg1 = (std::vector< std::vector< libTAU::digest32< 256 > > > *) 0 ;
  std::vector< std::vector< libTAU::digest32< 256 > > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< libTAU::digest32< 256 > > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< libTAU::digest32< 256 > > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< libTAU::digest32< 256 > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::vector< libTAU::digest32< 256 > > >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< libTAU::digest32< 256 > > > *arg1 = (std::vector< std::vector< libTAU::digest32< 256 > > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< libTAU::digest32< 256 > > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< libTAU::digest32< 256 > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::vector< libTAU::digest32< 256 > > >::value_type *) &std_vector_Sl_std_vector_Sl_libTAU_digest32_Sl_256_Sg__Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::vector< libTAU::digest32< 256 > > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< libTAU::digest32< 256 > > > *arg1 = (std::vector< std::vector< libTAU::digest32< 256 > > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< libTAU::digest32< 256 > > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< libTAU::digest32< 256 > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< libTAU::digest32< 256 > > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< libTAU::digest32< 256 > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_libTAU_digest32_Sl_256_Sg__Sg__Sg__set(arg1,arg2,(std::vector< libTAU::digest32< 256 > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1sha256_1hash_1vector_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< libTAU::digest32< 256 > > > *arg1 = (std::vector< std::vector< libTAU::digest32< 256 > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< libTAU::digest32< 256 > > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha256_1hash_1udp_1endpoint_1pair_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *)new std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha256_1hash_1udp_1endpoint_1pair_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::size_type arg1 ;
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *)new std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1udp_1endpoint_1pair_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *arg1 = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *) 0 ;
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1udp_1endpoint_1pair_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *arg1 = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *) 0 ;
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1udp_1endpoint_1pair_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *arg1 = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *) 0 ;
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > **)&jarg1; 
  arg2 = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1udp_1endpoint_1pair_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *arg1 = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1udp_1endpoint_1pair_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *arg1 = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1udp_1endpoint_1pair_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *arg1 = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *) 0 ;
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1udp_1endpoint_1pair_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *arg1 = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::value_type *) &std_vector_Sl_std_pair_Sl_libTAU_digest32_Sl_256_Sg__Sc_libTAU_udp_endpoint_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1udp_1endpoint_1pair_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *arg1 = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_libTAU_digest32_Sl_256_Sg__Sc_libTAU_udp_endpoint_Sg__Sg__set(arg1,arg2,(std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1sha256_1hash_1udp_1endpoint_1pair_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *arg1 = (std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< libTAU::digest32< 256 >,libTAU::udp::endpoint > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1address_1sha256_1hash_1pair_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *)new std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1address_1sha256_1hash_1pair_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::size_type arg1 ;
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *)new std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha256_1hash_1pair_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *arg1 = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *) 0 ;
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha256_1hash_1pair_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *arg1 = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *) 0 ;
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha256_1hash_1pair_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *arg1 = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *) 0 ;
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > **)&jarg1; 
  arg2 = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha256_1hash_1pair_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *arg1 = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha256_1hash_1pair_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *arg1 = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha256_1hash_1pair_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *arg1 = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *) 0 ;
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha256_1hash_1pair_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *arg1 = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::value_type *) &std_vector_Sl_std_pair_Sl_libTAU_address_Sc_libTAU_digest32_Sl_256_Sg__Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1sha256_1hash_1pair_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *arg1 = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_libTAU_address_Sc_libTAU_digest32_Sl_256_Sg__Sg__Sg__set(arg1,arg2,(std::pair< libTAU::address,libTAU::digest32< 256 > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1address_1sha256_1hash_1pair_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *arg1 = (std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< libTAU::address,libTAU::digest32< 256 > > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1byte_1array_132_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::array< std::int8_t,32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::array< std::int8_t,32 > *)new std::array< std::int8_t,32 >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::array< std::int8_t,32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1byte_1array_132_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< std::int8_t,32 > *arg1 = 0 ;
  std::array< std::int8_t,32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::int8_t,32 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< std::int8_t,32 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::array< std::int8_t,32 > *)new std::array< std::int8_t,32 >((std::array< std::int8_t,32 > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::array< std::int8_t,32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1array_132_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< std::int8_t,32 > *arg1 = (std::array< std::int8_t,32 > *) 0 ;
  std::array< signed char,32 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::int8_t,32 > **)&jarg1; 
  {
    try {
      result = ((std::array< std::int8_t,32 > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1array_132_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::array< std::int8_t,32 > *arg1 = (std::array< std::int8_t,32 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::int8_t,32 > **)&jarg1; 
  {
    try {
      result = (bool)((std::array< std::int8_t,32 > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1array_132_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  std::array< std::int8_t,32 > *arg1 = (std::array< std::int8_t,32 > *) 0 ;
  std::int8_t *arg2 = 0 ;
  std::int8_t temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::int8_t,32 > **)&jarg1; 
  temp2 = (std::int8_t)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->fill((std::int8_t const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jbyte JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1array_132_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jbyte jresult = 0 ;
  std::array< std::int8_t,32 > *arg1 = (std::array< std::int8_t,32 > *) 0 ;
  int arg2 ;
  std::int8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::int8_t,32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::int8_t *) &std_array_Sl_std_int8_t_Sc_32_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jbyte)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1array_132_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyte jarg3) {
  std::array< std::int8_t,32 > *arg1 = (std::array< std::int8_t,32 > *) 0 ;
  int arg2 ;
  std::array< signed char,32 >::value_type *arg3 = 0 ;
  std::array< signed char,32 >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::int8_t,32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::array< signed char,32 >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_array_Sl_std_int8_t_Sc_32_Sg__set(arg1,arg2,(signed char const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1byte_1array_132(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::array< std::int8_t,32 > *arg1 = (std::array< std::int8_t,32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::array< std::int8_t,32 > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1byte_1array_164_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::array< std::int8_t,64 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::array< std::int8_t,64 > *)new std::array< std::int8_t,64 >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::array< std::int8_t,64 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1byte_1array_164_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< std::int8_t,64 > *arg1 = 0 ;
  std::array< std::int8_t,64 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::int8_t,64 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< std::int8_t,64 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::array< std::int8_t,64 > *)new std::array< std::int8_t,64 >((std::array< std::int8_t,64 > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::array< std::int8_t,64 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1array_164_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< std::int8_t,64 > *arg1 = (std::array< std::int8_t,64 > *) 0 ;
  std::array< signed char,64 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::int8_t,64 > **)&jarg1; 
  {
    try {
      result = ((std::array< std::int8_t,64 > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1array_164_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::array< std::int8_t,64 > *arg1 = (std::array< std::int8_t,64 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::int8_t,64 > **)&jarg1; 
  {
    try {
      result = (bool)((std::array< std::int8_t,64 > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1array_164_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  std::array< std::int8_t,64 > *arg1 = (std::array< std::int8_t,64 > *) 0 ;
  std::int8_t *arg2 = 0 ;
  std::int8_t temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::int8_t,64 > **)&jarg1; 
  temp2 = (std::int8_t)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->fill((std::int8_t const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jbyte JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1array_164_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jbyte jresult = 0 ;
  std::array< std::int8_t,64 > *arg1 = (std::array< std::int8_t,64 > *) 0 ;
  int arg2 ;
  std::int8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::int8_t,64 > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::int8_t *) &std_array_Sl_std_int8_t_Sc_64_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jbyte)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1array_164_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyte jarg3) {
  std::array< std::int8_t,64 > *arg1 = (std::array< std::int8_t,64 > *) 0 ;
  int arg2 ;
  std::array< signed char,64 >::value_type *arg3 = 0 ;
  std::array< signed char,64 >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::int8_t,64 > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::array< signed char,64 >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_array_Sl_std_int8_t_Sc_64_Sg__set(arg1,arg2,(signed char const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1byte_1array_164(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::array< std::int8_t,64 > *arg1 = (std::array< std::int8_t,64 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::array< std::int8_t,64 > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1vector_1byte_1array_132_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::array< std::int8_t,32 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::array< std::int8_t,32 > > *)new std::vector< std::array< std::int8_t,32 > >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::array< std::int8_t,32 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1vector_1byte_1array_132_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::array< signed char,32 > >::size_type arg1 ;
  std::vector< std::array< std::int8_t,32 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::array< signed char,32 > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::array< std::int8_t,32 > > *)new std::vector< std::array< std::int8_t,32 > >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::array< std::int8_t,32 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_vector_1byte_1array_132_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::array< std::int8_t,32 > > *arg1 = (std::vector< std::array< std::int8_t,32 > > *) 0 ;
  std::vector< std::array< signed char,32 > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< std::int8_t,32 > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::array< std::int8_t,32 > > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_vector_1byte_1array_132_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::array< std::int8_t,32 > > *arg1 = (std::vector< std::array< std::int8_t,32 > > *) 0 ;
  std::vector< std::array< signed char,32 > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< std::int8_t,32 > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::array< std::int8_t,32 > > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_vector_1byte_1array_132_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::array< std::int8_t,32 > > *arg1 = (std::vector< std::array< std::int8_t,32 > > *) 0 ;
  std::vector< std::array< signed char,32 > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< std::int8_t,32 > > **)&jarg1; 
  arg2 = (std::vector< std::array< signed char,32 > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_vector_1byte_1array_132_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::array< std::int8_t,32 > > *arg1 = (std::vector< std::array< std::int8_t,32 > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< std::int8_t,32 > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::array< std::int8_t,32 > > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_vector_1byte_1array_132_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::array< std::int8_t,32 > > *arg1 = (std::vector< std::array< std::int8_t,32 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< std::int8_t,32 > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_vector_1byte_1array_132_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::array< std::int8_t,32 > > *arg1 = (std::vector< std::array< std::int8_t,32 > > *) 0 ;
  std::vector< std::array< signed char,32 > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::array< std::int8_t,32 > > **)&jarg1; 
  arg2 = *(std::vector< std::array< signed char,32 > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::array< signed char,32 > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::array< signed char,32 > >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_vector_1byte_1array_132_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::array< std::int8_t,32 > > *arg1 = (std::vector< std::array< std::int8_t,32 > > *) 0 ;
  int arg2 ;
  std::vector< std::array< std::int8_t,32 > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::array< std::int8_t,32 > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::array< std::int8_t,32 > >::value_type *) &std_vector_Sl_std_array_Sl_std_int8_t_Sc_32_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::array< std::int8_t,32 > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_vector_1byte_1array_132_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::array< std::int8_t,32 > > *arg1 = (std::vector< std::array< std::int8_t,32 > > *) 0 ;
  int arg2 ;
  std::vector< std::array< signed char,32 > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::array< std::int8_t,32 > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::array< signed char,32 > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::array< signed char,32 > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_array_Sl_std_int8_t_Sc_32_Sg__Sg__set(arg1,arg2,(std::array< signed char,32 > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1vector_1byte_1array_132(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::array< std::int8_t,32 > > *arg1 = (std::vector< std::array< std::int8_t,32 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::array< std::int8_t,32 > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1unsigned_1byte_1array_132_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::array< std::uint8_t,32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::array< std::uint8_t,32 > *)new std::array< std::uint8_t,32 >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::array< std::uint8_t,32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1unsigned_1byte_1array_132_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< std::uint8_t,32 > *arg1 = 0 ;
  std::array< std::uint8_t,32 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::uint8_t,32 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< std::uint8_t,32 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::array< std::uint8_t,32 > *)new std::array< std::uint8_t,32 >((std::array< std::uint8_t,32 > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::array< std::uint8_t,32 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_unsigned_1byte_1array_132_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::array< std::uint8_t,32 > *arg1 = (std::array< std::uint8_t,32 > *) 0 ;
  std::array< unsigned char,32 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::uint8_t,32 > **)&jarg1; 
  {
    try {
      result = ((std::array< std::uint8_t,32 > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_unsigned_1byte_1array_132_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::array< std::uint8_t,32 > *arg1 = (std::array< std::uint8_t,32 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::uint8_t,32 > **)&jarg1; 
  {
    try {
      result = (bool)((std::array< std::uint8_t,32 > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_unsigned_1byte_1array_132_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::array< std::uint8_t,32 > *arg1 = (std::array< std::uint8_t,32 > *) 0 ;
  std::uint8_t *arg2 = 0 ;
  std::uint8_t temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::uint8_t,32 > **)&jarg1; 
  temp2 = (std::uint8_t)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->fill((std::uint8_t const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_org_libTAU4j_swig_libTAU_1jni_unsigned_1byte_1array_132_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::array< std::uint8_t,32 > *arg1 = (std::array< std::uint8_t,32 > *) 0 ;
  int arg2 ;
  std::uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::uint8_t,32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::uint8_t *) &std_array_Sl_std_uint8_t_Sc_32_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_unsigned_1byte_1array_132_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  std::array< std::uint8_t,32 > *arg1 = (std::array< std::uint8_t,32 > *) 0 ;
  int arg2 ;
  std::array< unsigned char,32 >::value_type *arg3 = 0 ;
  std::array< unsigned char,32 >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::array< std::uint8_t,32 > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::array< unsigned char,32 >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_array_Sl_std_uint8_t_Sc_32_Sg__set(arg1,arg2,(unsigned char const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1unsigned_1byte_1array_132(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::array< std::uint8_t,32 > *arg1 = (std::array< std::uint8_t,32 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::array< std::uint8_t,32 > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1int_1string_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::map< int,std::string > *)new std::map< int,std::string >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::map< int,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1int_1string_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,std::string > *arg1 = 0 ;
  std::map< int,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,std::string > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::map< int,std::string > *)new std::map< int,std::string >((std::map< int,std::string > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::map< int,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1string_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,std::string > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::map< int,std::string > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1string_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,std::string > **)&jarg1; 
  {
    try {
      result = (bool)((std::map< int,std::string > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1string_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,std::string > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1string_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,std::string > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      try {
        result = (std::string *) &std_map_Sl_int_Sc_std_string_Sg__get(arg1,(int const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1string_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  int *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,std::string > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      std_map_Sl_int_Sc_std_string_Sg__set(arg1,(int const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1string_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,std::string > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      try {
        std_map_Sl_int_Sc_std_string_Sg__del(arg1,(int const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1string_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,std::string > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_map_Sl_int_Sc_std_string_Sg__has_key(arg1,(int const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1int_1string_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1string_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1string_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try {
      result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1string_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,(std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1string_1string_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1int_1bitfield_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,libTAU::bitfield > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::map< int,libTAU::bitfield > *)new std::map< int,libTAU::bitfield >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::map< int,libTAU::bitfield > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1int_1bitfield_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,libTAU::bitfield > *arg1 = 0 ;
  std::map< int,libTAU::bitfield > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libTAU::bitfield > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,libTAU::bitfield > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::map< int,libTAU::bitfield > *)new std::map< int,libTAU::bitfield >((std::map< int,libTAU::bitfield > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::map< int,libTAU::bitfield > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1bitfield_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,libTAU::bitfield > *arg1 = (std::map< int,libTAU::bitfield > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libTAU::bitfield > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::map< int,libTAU::bitfield > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1bitfield_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,libTAU::bitfield > *arg1 = (std::map< int,libTAU::bitfield > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libTAU::bitfield > **)&jarg1; 
  {
    try {
      result = (bool)((std::map< int,libTAU::bitfield > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1bitfield_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,libTAU::bitfield > *arg1 = (std::map< int,libTAU::bitfield > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libTAU::bitfield > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1bitfield_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::map< int,libTAU::bitfield > *arg1 = (std::map< int,libTAU::bitfield > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  libTAU::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libTAU::bitfield > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      try {
        result = (libTAU::bitfield *) &std_map_Sl_int_Sc_libTAU_bitfield_Sg__get(arg1,(int const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1bitfield_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::map< int,libTAU::bitfield > *arg1 = (std::map< int,libTAU::bitfield > *) 0 ;
  int *arg2 = 0 ;
  libTAU::bitfield *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< int,libTAU::bitfield > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(libTAU::bitfield **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bitfield const & reference is null");
    return ;
  } 
  {
    try {
      std_map_Sl_int_Sc_libTAU_bitfield_Sg__set(arg1,(int const &)*arg2,(libTAU::bitfield const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1bitfield_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,libTAU::bitfield > *arg1 = (std::map< int,libTAU::bitfield > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libTAU::bitfield > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      try {
        std_map_Sl_int_Sc_libTAU_bitfield_Sg__del(arg1,(int const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_int_1bitfield_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,libTAU::bitfield > *arg1 = (std::map< int,libTAU::bitfield > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,libTAU::bitfield > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_map_Sl_int_Sc_libTAU_bitfield_Sg__has_key(arg1,(int const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1int_1bitfield_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,libTAU::bitfield > *arg1 = (std::map< int,libTAU::bitfield > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,libTAU::bitfield > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1entry_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,libTAU::entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::map< std::string,libTAU::entry > *)new std::map< std::string,libTAU::entry >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::map< std::string,libTAU::entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1string_1entry_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,libTAU::entry > *arg1 = 0 ;
  std::map< std::string,libTAU::entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libTAU::entry > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,libTAU::entry > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::map< std::string,libTAU::entry > *)new std::map< std::string,libTAU::entry >((std::map< std::string,libTAU::entry > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::map< std::string,libTAU::entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1entry_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,libTAU::entry > *arg1 = (std::map< std::string,libTAU::entry > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libTAU::entry > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::map< std::string,libTAU::entry > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1entry_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,libTAU::entry > *arg1 = (std::map< std::string,libTAU::entry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libTAU::entry > **)&jarg1; 
  {
    try {
      result = (bool)((std::map< std::string,libTAU::entry > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1entry_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,libTAU::entry > *arg1 = (std::map< std::string,libTAU::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libTAU::entry > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1entry_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map< std::string,libTAU::entry > *arg1 = (std::map< std::string,libTAU::entry > *) 0 ;
  std::string *arg2 = 0 ;
  libTAU::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libTAU::entry > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        result = (libTAU::entry *) &std_map_Sl_std_string_Sc_libTAU_entry_Sg__get(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1entry_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  std::map< std::string,libTAU::entry > *arg1 = (std::map< std::string,libTAU::entry > *) 0 ;
  std::string *arg2 = 0 ;
  libTAU::entry *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< std::string,libTAU::entry > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(libTAU::entry **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::entry const & reference is null");
    return ;
  } 
  {
    try {
      std_map_Sl_std_string_Sc_libTAU_entry_Sg__set(arg1,(std::string const &)*arg2,(libTAU::entry const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1entry_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,libTAU::entry > *arg1 = (std::map< std::string,libTAU::entry > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libTAU::entry > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        std_map_Sl_std_string_Sc_libTAU_entry_Sg__del(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_string_1entry_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,libTAU::entry > *arg1 = (std::map< std::string,libTAU::entry > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,libTAU::entry > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_libTAU_entry_Sg__has_key(arg1,(std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1string_1entry_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,libTAU::entry > *arg1 = (std::map< std::string,libTAU::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,libTAU::entry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_boost_1string_1entry_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::container::map< std::string,libTAU::entry > *arg1 = (boost::container::map< std::string,libTAU::entry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::container::map< std::string,libTAU::entry > **)&jarg1; 
  {
    try {
      result = (bool)((boost::container::map< std::string,libTAU::entry > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_boost_1string_1entry_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  boost::container::map< std::string,libTAU::entry > *arg1 = (boost::container::map< std::string,libTAU::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::container::map< std::string,libTAU::entry > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_boost_1string_1entry_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::container::map< std::string,libTAU::entry > *arg1 = (boost::container::map< std::string,libTAU::entry > *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::container::map< std::string,libTAU::entry > **)&jarg1; 
  {
    try {
      result = (std::int64_t)((boost::container::map< std::string,libTAU::entry > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_boost_1string_1entry_1map_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  boost::container::map< std::string,libTAU::entry > *arg1 = (boost::container::map< std::string,libTAU::entry > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::container::map< std::string,libTAU::entry > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)boost_container_map_Sl_std_string_Sc_libTAU_entry_Sg__contains(arg1,(std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_boost_1string_1entry_1map_1put(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  boost::container::map< std::string,libTAU::entry > *arg1 = (boost::container::map< std::string,libTAU::entry > *) 0 ;
  std::string *arg2 = 0 ;
  libTAU::entry *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(boost::container::map< std::string,libTAU::entry > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(libTAU::entry **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::entry & reference is null");
    return ;
  } 
  {
    try {
      boost_container_map_Sl_std_string_Sc_libTAU_entry_Sg__put(arg1,(std::string const &)*arg2,*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_boost_1string_1entry_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  boost::container::map< std::string,libTAU::entry > *arg1 = (boost::container::map< std::string,libTAU::entry > *) 0 ;
  std::string *arg2 = 0 ;
  libTAU::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::container::map< std::string,libTAU::entry > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (libTAU::entry *) &boost_container_map_Sl_std_string_Sc_libTAU_entry_Sg__get(arg1,(std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_boost_1string_1entry_1map_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::container::map< std::string,libTAU::entry > *arg1 = (boost::container::map< std::string,libTAU::entry > *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::container::map< std::string,libTAU::entry > **)&jarg1; 
  {
    try {
      result = boost_container_map_Sl_std_string_Sc_libTAU_entry_Sg__keys(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_boost_1string_1entry_1map_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  boost::container::map< std::string,libTAU::entry > *arg1 = (boost::container::map< std::string,libTAU::entry > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::container::map< std::string,libTAU::entry > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      boost_container_map_Sl_std_string_Sc_libTAU_entry_Sg__remove(arg1,(std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1boost_1string_1entry_1map(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::container::map< std::string,libTAU::entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::container::map< std::string,libTAU::entry > *)new boost::container::map< std::string,libTAU::entry >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(boost::container::map< std::string,libTAU::entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1boost_1string_1entry_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::container::map< std::string,libTAU::entry > *arg1 = (boost::container::map< std::string,libTAU::entry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boost::container::map< std::string,libTAU::entry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitset_1128_1test(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  std::bitset< 128 > *arg1 = (std::bitset< 128 > *) 0 ;
  std::size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::bitset< 128 > **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try {
      result = (bool)((std::bitset< 128 > const *)arg1)->test(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitset_1128_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::bitset< 128 > *arg1 = (std::bitset< 128 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::bitset< 128 > **)&jarg1; 
  {
    try {
      result = (bool)((std::bitset< 128 > const *)arg1)->all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitset_1128_1any(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::bitset< 128 > *arg1 = (std::bitset< 128 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::bitset< 128 > **)&jarg1; 
  {
    try {
      result = (bool)((std::bitset< 128 > const *)arg1)->any();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitset_1128_1none(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::bitset< 128 > *arg1 = (std::bitset< 128 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::bitset< 128 > **)&jarg1; 
  {
    try {
      result = (bool)((std::bitset< 128 > const *)arg1)->none();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitset_1128_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::bitset< 128 > *arg1 = (std::bitset< 128 > *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::bitset< 128 > **)&jarg1; 
  {
    try {
      result = ((std::bitset< 128 > const *)arg1)->count();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitset_1128_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::bitset< 128 > *arg1 = (std::bitset< 128 > *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::bitset< 128 > **)&jarg1; 
  {
    try {
      result = ((std::bitset< 128 > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitset_1128_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  std::bitset< 128 > *arg1 = (std::bitset< 128 > *) 0 ;
  std::size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::bitset< 128 > **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try {
      result = (bool)std_bitset_Sl_128_Sg__get(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bitset_1128(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::bitset< 128 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::bitset< 128 > *)new std::bitset< 128 >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::bitset< 128 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1bitset_1128(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::bitset< 128 > *arg1 = (std::bitset< 128 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::bitset< 128 > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1error_1code(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::system::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (boost::system::error_code *)new boost::system::error_code();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(boost::system::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_error_1code_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_code **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_error_1code_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_code **)&jarg1; 
  {
    try {
      result = (int)(arg1)->value();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_error_1code_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_code **)&jarg1; 
  {
    try {
      result = (arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_error_1code_1failed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_code **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->failed();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_error_1code_1to_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::system::error_code **)&jarg1; 
  {
    try {
      result = (bool)((boost::system::error_code const *)arg1)->operator bool();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1error_1code(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::system::error_code *arg1 = (boost::system::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boost::system::error_code **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1span_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::span< std::int8_t const > *arg1 = (libTAU::span< std::int8_t const > *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::span< std::int8_t const > **)&jarg1; 
  {
    try {
      result = (std::int64_t)((libTAU::span< std::int8_t const > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1span_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::span< std::int8_t const > *arg1 = (libTAU::span< std::int8_t const > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::span< std::int8_t const > **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::span< std::int8_t const > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1span_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  libTAU::span< std::int8_t const > *arg1 = (libTAU::span< std::int8_t const > *) 0 ;
  std::int8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::span< std::int8_t const > **)&jarg1; 
  {
    try {
      result = (std::int8_t *) &((libTAU::span< std::int8_t const > const *)arg1)->front();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jbyte)*result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1span_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  libTAU::span< std::int8_t const > *arg1 = (libTAU::span< std::int8_t const > *) 0 ;
  std::int8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::span< std::int8_t const > **)&jarg1; 
  {
    try {
      result = (std::int8_t *) &((libTAU::span< std::int8_t const > const *)arg1)->back();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jbyte)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1span_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libTAU::span< std::int8_t const > *arg1 = (libTAU::span< std::int8_t const > *) 0 ;
  std::int64_t arg2 ;
  SwigValueWrapper< libTAU::span< signed char const > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::span< std::int8_t const > **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  {
    try {
      result = ((libTAU::span< std::int8_t const > const *)arg1)->first(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::span< std::int8_t const > **)&jresult = new libTAU::span< std::int8_t const >((const libTAU::span< std::int8_t const > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1span_1last(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libTAU::span< std::int8_t const > *arg1 = (libTAU::span< std::int8_t const > *) 0 ;
  std::int64_t arg2 ;
  SwigValueWrapper< libTAU::span< signed char const > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::span< std::int8_t const > **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  {
    try {
      result = ((libTAU::span< std::int8_t const > const *)arg1)->last(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::span< std::int8_t const > **)&jresult = new libTAU::span< std::int8_t const >((const libTAU::span< std::int8_t const > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1span_1subspan_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libTAU::span< std::int8_t const > *arg1 = (libTAU::span< std::int8_t const > *) 0 ;
  std::int64_t arg2 ;
  SwigValueWrapper< libTAU::span< signed char const > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::span< std::int8_t const > **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  {
    try {
      result = ((libTAU::span< std::int8_t const > const *)arg1)->subspan(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::span< std::int8_t const > **)&jresult = new libTAU::span< std::int8_t const >((const libTAU::span< std::int8_t const > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1span_1subspan_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  libTAU::span< std::int8_t const > *arg1 = (libTAU::span< std::int8_t const > *) 0 ;
  std::int64_t arg2 ;
  std::int64_t arg3 ;
  SwigValueWrapper< libTAU::span< signed char const > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::span< std::int8_t const > **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  arg3 = (std::int64_t)jarg3; 
  {
    try {
      result = ((libTAU::span< std::int8_t const > const *)arg1)->subspan(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::span< std::int8_t const > **)&jresult = new libTAU::span< std::int8_t const >((const libTAU::span< std::int8_t const > &)result); 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_org_libTAU4j_swig_libTAU_1jni_byte_1span_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jbyte jresult = 0 ;
  libTAU::span< std::int8_t const > *arg1 = (libTAU::span< std::int8_t const > *) 0 ;
  std::int64_t arg2 ;
  std::int8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::span< std::int8_t const > **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  {
    try {
      result = (std::int8_t *) &((libTAU::span< std::int8_t const > const *)arg1)->operator [](arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jbyte)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1byte_1span(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::span< std::int8_t const > *arg1 = (libTAU::span< std::int8_t const > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::span< std::int8_t const > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1address_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::address *)new libTAU::address();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1address_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::address *arg1 = 0 ;
  libTAU::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::address **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::address const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::address *)new libTAU::address((libTAU::address const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1is_1v4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::address *arg1 = (libTAU::address *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::address **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_v4();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1is_1v6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::address *arg1 = (libTAU::address *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::address **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_v6();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::address *arg1 = (libTAU::address *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::address **)&jarg1; 
  {
    try {
      result = (arg1)->to_string();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1is_1loopback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::address *arg1 = (libTAU::address *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::address **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_loopback();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1is_1unspecified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::address *arg1 = (libTAU::address *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::address **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_unspecified();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1is_1multicast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::address *arg1 = (libTAU::address *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::address **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_multicast();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1op_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::address *arg1 = (libTAU::address *) 0 ;
  libTAU::address *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::address **)&jarg1; 
  arg2 = *(libTAU::address **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::address const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)libTAU_address_op_lt(arg1,(libTAU::address const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  libTAU::address *arg1 = 0 ;
  libTAU::address *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::address **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::address const & reference is null");
    return 0;
  } 
  arg2 = *(libTAU::address **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::address const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)libTAU_address_compare((libTAU::address const &)*arg1,(libTAU::address const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1from_1string(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  boost::system::error_code *arg2 = 0 ;
  libTAU::address result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(boost::system::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = libTAU_address_from_string((std::string const &)*arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::address **)&jresult = new libTAU::address((const libTAU::address &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_address_1hash_1code(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::address *arg1 = (libTAU::address *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::address **)&jarg1; 
  {
    try {
      result = (int)libTAU_address_hash_code(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1address(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::address *arg1 = (libTAU::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::address **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1tcp_1endpoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::tcp::endpoint *)new libTAU::tcp::endpoint();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1tcp_1endpoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libTAU::address arg1 ;
  unsigned short arg2 ;
  libTAU::address *argp1 ;
  libTAU::tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(libTAU::address **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::address");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned short)jarg2; 
  {
    try {
      result = (libTAU::tcp::endpoint *)new libTAU::tcp::endpoint(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1tcp_1endpoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::tcp::endpoint *arg1 = 0 ;
  libTAU::tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::tcp::endpoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::tcp::endpoint const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::tcp::endpoint *)new libTAU::tcp::endpoint((libTAU::tcp::endpoint const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_tcp_1endpoint_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::tcp::endpoint *arg1 = (libTAU::tcp::endpoint *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::tcp::endpoint **)&jarg1; 
  {
    try {
      result = (unsigned short)(arg1)->port();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_tcp_1endpoint_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::tcp::endpoint *arg1 = (libTAU::tcp::endpoint *) 0 ;
  libTAU::address result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::tcp::endpoint **)&jarg1; 
  {
    try {
      result = (arg1)->address();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::address **)&jresult = new libTAU::address((const libTAU::address &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1tcp_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::tcp::endpoint *arg1 = (libTAU::tcp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::tcp::endpoint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1udp_1endpoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::udp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::udp::endpoint *)new libTAU::udp::endpoint();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::udp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1udp_1endpoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libTAU::address arg1 ;
  unsigned short arg2 ;
  libTAU::address *argp1 ;
  libTAU::udp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(libTAU::address **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::address");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned short)jarg2; 
  {
    try {
      result = (libTAU::udp::endpoint *)new libTAU::udp::endpoint(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::udp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1udp_1endpoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::udp::endpoint *arg1 = 0 ;
  libTAU::udp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::udp::endpoint **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::udp::endpoint const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::udp::endpoint *)new libTAU::udp::endpoint((libTAU::udp::endpoint const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::udp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1endpoint_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::udp::endpoint *arg1 = (libTAU::udp::endpoint *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::udp::endpoint **)&jarg1; 
  {
    try {
      result = (unsigned short)(arg1)->port();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1endpoint_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::udp::endpoint *arg1 = (libTAU::udp::endpoint *) 0 ;
  libTAU::address result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::udp::endpoint **)&jarg1; 
  {
    try {
      result = (arg1)->address();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::address **)&jresult = new libTAU::address((const libTAU::address &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1udp_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::udp::endpoint *arg1 = (libTAU::udp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::udp::endpoint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1state_1nids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht::dht_state *arg1 = (libTAU::dht::dht_state *) 0 ;
  std::vector< std::pair< libTAU::address,libTAU::sha256_hash > > *arg2 = (std::vector< std::pair< libTAU::address,libTAU::sha256_hash > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht::dht_state **)&jarg1; 
  arg2 = *(std::vector< std::pair< libTAU::address,libTAU::sha256_hash > > **)&jarg2; 
  if (arg1) (arg1)->nids = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1state_1nids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht::dht_state *arg1 = (libTAU::dht::dht_state *) 0 ;
  std::vector< std::pair< libTAU::address,libTAU::sha256_hash > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht::dht_state **)&jarg1; 
  result = (std::vector< std::pair< libTAU::address,libTAU::sha256_hash > > *)& ((arg1)->nids);
  *(std::vector< std::pair< libTAU::address,libTAU::sha256_hash > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1state_1nodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht::dht_state *arg1 = (libTAU::dht::dht_state *) 0 ;
  std::vector< libTAU::udp::endpoint > *arg2 = (std::vector< libTAU::udp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht::dht_state **)&jarg1; 
  arg2 = *(std::vector< libTAU::udp::endpoint > **)&jarg2; 
  if (arg1) (arg1)->nodes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1state_1nodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht::dht_state *arg1 = (libTAU::dht::dht_state *) 0 ;
  std::vector< libTAU::udp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht::dht_state **)&jarg1; 
  result = (std::vector< libTAU::udp::endpoint > *)& ((arg1)->nodes);
  *(std::vector< libTAU::udp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1state_1nodes6_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht::dht_state *arg1 = (libTAU::dht::dht_state *) 0 ;
  std::vector< libTAU::udp::endpoint > *arg2 = (std::vector< libTAU::udp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht::dht_state **)&jarg1; 
  arg2 = *(std::vector< libTAU::udp::endpoint > **)&jarg2; 
  if (arg1) (arg1)->nodes6 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1state_1nodes6_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht::dht_state *arg1 = (libTAU::dht::dht_state *) 0 ;
  std::vector< libTAU::udp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht::dht_state **)&jarg1; 
  result = (std::vector< libTAU::udp::endpoint > *)& ((arg1)->nodes6);
  *(std::vector< libTAU::udp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1state_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::dht::dht_state *arg1 = (libTAU::dht::dht_state *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht::dht_state **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1dht_1state(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::dht::dht_state *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::dht::dht_state *)new libTAU::dht::dht_state();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht::dht_state **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1state(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht::dht_state *arg1 = (libTAU::dht::dht_state *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht::dht_state **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1client_1data_1t_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::client_data_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::client_data_t *)new libTAU::client_data_t();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::client_data_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1client_1data_1t_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  libTAU::client_data_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (void *)jarg1; 
  {
    try {
      result = (libTAU::client_data_t *)new libTAU::client_data_t(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::client_data_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_client_1data_1t_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::client_data_t *arg1 = (libTAU::client_data_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::client_data_t **)&jarg1; 
  {
    try {
      result = (void *)libTAU_client_data_t_get(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1client_1data_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::client_data_t *arg1 = (libTAU::client_data_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::client_data_t **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::digest32< 160 >::difference_type result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::digest32< 160 >::SWIGTEMPLATEDISAMBIGUATOR size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha1_1hash_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::digest32< 160 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::digest32< 160 > *)new libTAU::digest32< 160 >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 160 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha1_1hash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::digest32< 160 > *arg1 = 0 ;
  libTAU::digest32< 160 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 160 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::digest32< 160 > *)new libTAU::digest32< 160 >((libTAU::digest32< 160 > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 160 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1max(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::digest32< 160 > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::digest32< 160 >::SWIGTEMPLATEDISAMBIGUATOR max();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 160 > **)&jresult = new libTAU::digest32< 160 >((const libTAU::digest32< 160 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1min(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::digest32< 160 > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::digest32< 160 >::SWIGTEMPLATEDISAMBIGUATOR min();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 160 > **)&jresult = new libTAU::digest32< 160 >((const libTAU::digest32< 160 > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1is_1all_1zeros(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::digest32< 160 > const *)arg1)->is_all_zeros();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  libTAU::digest32< 160 > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  arg2 = *(libTAU::digest32< 160 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 160 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::digest32< 160 > const *)arg1)->operator ==((libTAU::digest32< 160 > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  libTAU::digest32< 160 > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  arg2 = *(libTAU::digest32< 160 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 160 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::digest32< 160 > const *)arg1)->operator !=((libTAU::digest32< 160 > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  libTAU::digest32< 160 > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  arg2 = *(libTAU::digest32< 160 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 160 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::digest32< 160 > const *)arg1)->operator <((libTAU::digest32< 160 > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1count_1leading_1zeroes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  {
    try {
      result = (int)((libTAU::digest32< 160 > const *)arg1)->count_leading_zeroes();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  libTAU::digest32< 160 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  {
    try {
      result = ((libTAU::digest32< 160 > const *)arg1)->operator ~();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 160 > **)&jresult = new libTAU::digest32< 160 >((const libTAU::digest32< 160 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  libTAU::digest32< 160 > *arg2 = 0 ;
  libTAU::digest32< 160 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  arg2 = *(libTAU::digest32< 160 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 160 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((libTAU::digest32< 160 > const *)arg1)->operator ^((libTAU::digest32< 160 > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 160 > **)&jresult = new libTAU::digest32< 160 >((const libTAU::digest32< 160 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  libTAU::digest32< 160 > *arg2 = 0 ;
  libTAU::digest32< 160 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  arg2 = *(libTAU::digest32< 160 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 160 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((libTAU::digest32< 160 > const *)arg1)->operator &((libTAU::digest32< 160 > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 160 > **)&jresult = new libTAU::digest32< 160 >((const libTAU::digest32< 160 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha1_1hash_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::int8_t > *arg1 = 0 ;
  libTAU::digest32< 160 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::digest32< 160 > *)new_libTAU_digest32_Sl_160_Sg___SWIG_2((std::vector< signed char > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 160 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  std::vector< std::int8_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > const & reference is null");
    return ;
  } 
  {
    try {
      libTAU_digest32_Sl_160_Sg__assign(arg1,(std::vector< signed char > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1hash_1code(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  {
    try {
      result = (int)libTAU_digest32_Sl_160_Sg__hash_code(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1to_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  {
    try {
      result = libTAU_digest32_Sl_160_Sg__to_bytes(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1to_1hex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  {
    try {
      result = libTAU_digest32_Sl_160_Sg__to_hex(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1from_1hex(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  libTAU::digest32< 160 > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = libTAU_digest32_Sl_160_Sg__from_hex(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 160 > **)&jresult = new libTAU::digest32< 160 >((const libTAU::digest32< 160 > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  libTAU::digest32< 160 > *arg1 = 0 ;
  libTAU::digest32< 160 > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 160 > const & reference is null");
    return 0;
  } 
  arg2 = *(libTAU::digest32< 160 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 160 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)libTAU_digest32_Sl_160_Sg__compare((libTAU::digest32< 160 > const &)*arg1,(libTAU::digest32< 160 > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1sha1_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::digest32< 160 > *arg1 = (libTAU::digest32< 160 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::digest32< 160 > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1size(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::digest32< 256 >::difference_type result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::digest32< 256 >::SWIGTEMPLATEDISAMBIGUATOR size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha256_1hash_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::digest32< 256 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::digest32< 256 > *)new libTAU::digest32< 256 >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 256 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha256_1hash_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::digest32< 256 > *arg1 = 0 ;
  libTAU::digest32< 256 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 256 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::digest32< 256 > *)new libTAU::digest32< 256 >((libTAU::digest32< 256 > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 256 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1max(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::digest32< 256 > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::digest32< 256 >::SWIGTEMPLATEDISAMBIGUATOR max();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 256 > **)&jresult = new libTAU::digest32< 256 >((const libTAU::digest32< 256 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1min(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::digest32< 256 > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::digest32< 256 >::SWIGTEMPLATEDISAMBIGUATOR min();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 256 > **)&jresult = new libTAU::digest32< 256 >((const libTAU::digest32< 256 > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1is_1all_1zeros(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::digest32< 256 > const *)arg1)->is_all_zeros();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  libTAU::digest32< 256 > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  arg2 = *(libTAU::digest32< 256 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 256 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::digest32< 256 > const *)arg1)->operator ==((libTAU::digest32< 256 > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  libTAU::digest32< 256 > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  arg2 = *(libTAU::digest32< 256 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 256 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::digest32< 256 > const *)arg1)->operator !=((libTAU::digest32< 256 > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  libTAU::digest32< 256 > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  arg2 = *(libTAU::digest32< 256 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 256 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::digest32< 256 > const *)arg1)->operator <((libTAU::digest32< 256 > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1count_1leading_1zeroes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  {
    try {
      result = (int)((libTAU::digest32< 256 > const *)arg1)->count_leading_zeroes();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  libTAU::digest32< 256 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  {
    try {
      result = ((libTAU::digest32< 256 > const *)arg1)->operator ~();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 256 > **)&jresult = new libTAU::digest32< 256 >((const libTAU::digest32< 256 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  libTAU::digest32< 256 > *arg2 = 0 ;
  libTAU::digest32< 256 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  arg2 = *(libTAU::digest32< 256 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 256 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((libTAU::digest32< 256 > const *)arg1)->operator ^((libTAU::digest32< 256 > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 256 > **)&jresult = new libTAU::digest32< 256 >((const libTAU::digest32< 256 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  libTAU::digest32< 256 > *arg2 = 0 ;
  libTAU::digest32< 256 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  arg2 = *(libTAU::digest32< 256 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 256 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((libTAU::digest32< 256 > const *)arg1)->operator &((libTAU::digest32< 256 > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 256 > **)&jresult = new libTAU::digest32< 256 >((const libTAU::digest32< 256 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha256_1hash_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::int8_t > *arg1 = 0 ;
  libTAU::digest32< 256 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::digest32< 256 > *)new_libTAU_digest32_Sl_256_Sg___SWIG_2((std::vector< signed char > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 256 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  std::vector< std::int8_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > const & reference is null");
    return ;
  } 
  {
    try {
      libTAU_digest32_Sl_256_Sg__assign(arg1,(std::vector< signed char > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1hash_1code(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  {
    try {
      result = (int)libTAU_digest32_Sl_256_Sg__hash_code(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1to_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  {
    try {
      result = libTAU_digest32_Sl_256_Sg__to_bytes(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1to_1hex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  {
    try {
      result = libTAU_digest32_Sl_256_Sg__to_hex(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1from_1hex(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  libTAU::digest32< 256 > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = libTAU_digest32_Sl_256_Sg__from_hex(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::digest32< 256 > **)&jresult = new libTAU::digest32< 256 >((const libTAU::digest32< 256 > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  libTAU::digest32< 256 > *arg1 = 0 ;
  libTAU::digest32< 256 > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 256 > const & reference is null");
    return 0;
  } 
  arg2 = *(libTAU::digest32< 256 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::digest32< 256 > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)libTAU_digest32_Sl_256_Sg__compare((libTAU::digest32< 256 > const &)*arg1,(libTAU::digest32< 256 > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1sha256_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::digest32< 256 > *arg1 = (libTAU::digest32< 256 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::digest32< 256 > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha1_1hash_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::digest32< 160 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::digest32< 160 > > *)new std::vector< libTAU::digest32< 160 > >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::digest32< 160 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha1_1hash_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::digest32< 160 > >::size_type arg1 ;
  std::vector< libTAU::digest32< 160 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::digest32< 160 > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::digest32< 160 > > *)new std::vector< libTAU::digest32< 160 > >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::digest32< 160 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::digest32< 160 > > *arg1 = (std::vector< libTAU::digest32< 160 > > *) 0 ;
  std::vector< libTAU::digest32< 160 > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::digest32< 160 > > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::digest32< 160 > > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::digest32< 160 > > *arg1 = (std::vector< libTAU::digest32< 160 > > *) 0 ;
  std::vector< libTAU::digest32< 160 > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::digest32< 160 > > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::digest32< 160 > > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::digest32< 160 > > *arg1 = (std::vector< libTAU::digest32< 160 > > *) 0 ;
  std::vector< libTAU::digest32< 160 > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::digest32< 160 > > **)&jarg1; 
  arg2 = (std::vector< libTAU::digest32< 160 > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::digest32< 160 > > *arg1 = (std::vector< libTAU::digest32< 160 > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::digest32< 160 > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::digest32< 160 > > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::digest32< 160 > > *arg1 = (std::vector< libTAU::digest32< 160 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::digest32< 160 > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::digest32< 160 > > *arg1 = (std::vector< libTAU::digest32< 160 > > *) 0 ;
  std::vector< libTAU::digest32< 160 > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::digest32< 160 > > **)&jarg1; 
  arg2 = *(std::vector< libTAU::digest32< 160 > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::digest32< 160 > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::digest32< 160 > >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::digest32< 160 > > *arg1 = (std::vector< libTAU::digest32< 160 > > *) 0 ;
  int arg2 ;
  std::vector< libTAU::digest32< 160 > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::digest32< 160 > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::digest32< 160 > >::value_type *) &std_vector_Sl_libTAU_digest32_Sl_160_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::digest32< 160 > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha1_1hash_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::digest32< 160 > > *arg1 = (std::vector< libTAU::digest32< 160 > > *) 0 ;
  int arg2 ;
  std::vector< libTAU::digest32< 160 > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::digest32< 160 > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::digest32< 160 > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::digest32< 160 > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_digest32_Sl_160_Sg__Sg__set(arg1,arg2,(libTAU::digest32< 160 > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1sha1_1hash_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::digest32< 160 > > *arg1 = (std::vector< libTAU::digest32< 160 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::digest32< 160 > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha256_1hash_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::digest32< 256 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< libTAU::digest32< 256 > > *)new std::vector< libTAU::digest32< 256 > >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::digest32< 256 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1sha256_1hash_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< libTAU::digest32< 256 > >::size_type arg1 ;
  std::vector< libTAU::digest32< 256 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< libTAU::digest32< 256 > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< libTAU::digest32< 256 > > *)new std::vector< libTAU::digest32< 256 > >(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::digest32< 256 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::digest32< 256 > > *arg1 = (std::vector< libTAU::digest32< 256 > > *) 0 ;
  std::vector< libTAU::digest32< 256 > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::digest32< 256 > > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::digest32< 256 > > const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< libTAU::digest32< 256 > > *arg1 = (std::vector< libTAU::digest32< 256 > > *) 0 ;
  std::vector< libTAU::digest32< 256 > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::digest32< 256 > > **)&jarg1; 
  {
    try {
      result = ((std::vector< libTAU::digest32< 256 > > const *)arg1)->capacity();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< libTAU::digest32< 256 > > *arg1 = (std::vector< libTAU::digest32< 256 > > *) 0 ;
  std::vector< libTAU::digest32< 256 > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::digest32< 256 > > **)&jarg1; 
  arg2 = (std::vector< libTAU::digest32< 256 > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< libTAU::digest32< 256 > > *arg1 = (std::vector< libTAU::digest32< 256 > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::digest32< 256 > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< libTAU::digest32< 256 > > const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< libTAU::digest32< 256 > > *arg1 = (std::vector< libTAU::digest32< 256 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::digest32< 256 > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< libTAU::digest32< 256 > > *arg1 = (std::vector< libTAU::digest32< 256 > > *) 0 ;
  std::vector< libTAU::digest32< 256 > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< libTAU::digest32< 256 > > **)&jarg1; 
  arg2 = *(std::vector< libTAU::digest32< 256 > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::digest32< 256 > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< libTAU::digest32< 256 > >::value_type const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< libTAU::digest32< 256 > > *arg1 = (std::vector< libTAU::digest32< 256 > > *) 0 ;
  int arg2 ;
  std::vector< libTAU::digest32< 256 > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< libTAU::digest32< 256 > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< libTAU::digest32< 256 > >::value_type *) &std_vector_Sl_libTAU_digest32_Sl_256_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::digest32< 256 > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sha256_1hash_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< libTAU::digest32< 256 > > *arg1 = (std::vector< libTAU::digest32< 256 > > *) 0 ;
  int arg2 ;
  std::vector< libTAU::digest32< 256 > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< libTAU::digest32< 256 > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< libTAU::digest32< 256 > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::digest32< 256 > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_libTAU_digest32_Sl_256_Sg__Sg__set(arg1,arg2,(libTAU::digest32< 256 > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1sha256_1hash_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< libTAU::digest32< 256 > > *arg1 = (std::vector< libTAU::digest32< 256 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< libTAU::digest32< 256 > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_num_1protocols_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  result = libTAU::num_protocols;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1info_1hash_1t_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::info_hash_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::info_hash_t *)new libTAU::info_hash_t();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::info_hash_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1info_1hash_1t_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::sha1_hash arg1 ;
  libTAU::sha1_hash *argp1 ;
  libTAU::info_hash_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(libTAU::sha1_hash **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::sha1_hash");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (libTAU::info_hash_t *)new libTAU::info_hash_t(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::info_hash_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1info_1hash_1t_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::sha256_hash arg1 ;
  libTAU::sha256_hash *argp1 ;
  libTAU::info_hash_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(libTAU::sha256_hash **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::sha256_hash");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (libTAU::info_hash_t *)new libTAU::info_hash_t(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::info_hash_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1info_1hash_1t_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::sha1_hash arg1 ;
  libTAU::sha256_hash arg2 ;
  libTAU::sha1_hash *argp1 ;
  libTAU::sha256_hash *argp2 ;
  libTAU::info_hash_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(libTAU::sha1_hash **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::sha1_hash");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(libTAU::sha256_hash **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::sha256_hash");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (libTAU::info_hash_t *)new libTAU::info_hash_t(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::info_hash_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1info_1hash_1t_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::info_hash_t *arg1 = 0 ;
  libTAU::info_hash_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::info_hash_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::info_hash_t const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::info_hash_t *)new libTAU::info_hash_t((libTAU::info_hash_t const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::info_hash_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_info_1hash_1t_1has_1v1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::info_hash_t *arg1 = (libTAU::info_hash_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::info_hash_t **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::info_hash_t const *)arg1)->has_v1();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_info_1hash_1t_1has_1v2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::info_hash_t *arg1 = (libTAU::info_hash_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::info_hash_t **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::info_hash_t const *)arg1)->has_v2();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_info_1hash_1t_1has(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libTAU::info_hash_t *arg1 = (libTAU::info_hash_t *) 0 ;
  libTAU::protocol_version arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::info_hash_t **)&jarg1; 
  arg2 = (libTAU::protocol_version)jarg2; 
  {
    try {
      result = (bool)((libTAU::info_hash_t const *)arg1)->has(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_info_1hash_1t_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libTAU::info_hash_t *arg1 = (libTAU::info_hash_t *) 0 ;
  libTAU::protocol_version arg2 ;
  libTAU::sha1_hash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::info_hash_t **)&jarg1; 
  arg2 = (libTAU::protocol_version)jarg2; 
  {
    try {
      result = ((libTAU::info_hash_t const *)arg1)->get(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::sha1_hash **)&jresult = new libTAU::sha1_hash((const libTAU::sha1_hash &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_info_1hash_1t_1get_1best(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::info_hash_t *arg1 = (libTAU::info_hash_t *) 0 ;
  libTAU::sha1_hash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::info_hash_t **)&jarg1; 
  {
    try {
      result = ((libTAU::info_hash_t const *)arg1)->get_best();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::sha1_hash **)&jresult = new libTAU::sha1_hash((const libTAU::sha1_hash &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::info_hash_t *arg1 = 0 ;
  libTAU::info_hash_t *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::info_hash_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::info_hash_t const & reference is null");
    return 0;
  } 
  arg2 = *(libTAU::info_hash_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::info_hash_t const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)operator !=((libTAU::info_hash_t const &)*arg1,(libTAU::info_hash_t const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::info_hash_t *arg1 = 0 ;
  libTAU::info_hash_t *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::info_hash_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::info_hash_t const & reference is null");
    return 0;
  } 
  arg2 = *(libTAU::info_hash_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::info_hash_t const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)operator ==((libTAU::info_hash_t const &)*arg1,(libTAU::info_hash_t const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_info_1hash_1t_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::info_hash_t *arg1 = (libTAU::info_hash_t *) 0 ;
  libTAU::info_hash_t *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::info_hash_t **)&jarg1; 
  arg2 = *(libTAU::info_hash_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::info_hash_t const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::info_hash_t const *)arg1)->operator <((libTAU::info_hash_t const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_info_1hash_1t_1v1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::info_hash_t *arg1 = (libTAU::info_hash_t *) 0 ;
  libTAU::sha1_hash *arg2 = (libTAU::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::info_hash_t **)&jarg1; 
  arg2 = *(libTAU::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->v1 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_info_1hash_1t_1v1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::info_hash_t *arg1 = (libTAU::info_hash_t *) 0 ;
  libTAU::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::info_hash_t **)&jarg1; 
  result = (libTAU::sha1_hash *)& ((arg1)->v1);
  *(libTAU::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_info_1hash_1t_1v2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::info_hash_t *arg1 = (libTAU::info_hash_t *) 0 ;
  libTAU::sha256_hash *arg2 = (libTAU::sha256_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::info_hash_t **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2; 
  if (arg1) (arg1)->v2 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_info_1hash_1t_1v2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::info_hash_t *arg1 = (libTAU::info_hash_t *) 0 ;
  libTAU::sha256_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::info_hash_t **)&jarg1; 
  result = (libTAU::sha256_hash *)& ((arg1)->v2);
  *(libTAU::sha256_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_info_1hash_1t_1op_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::info_hash_t *arg1 = (libTAU::info_hash_t *) 0 ;
  libTAU::info_hash_t *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::info_hash_t **)&jarg1; 
  arg2 = *(libTAU::info_hash_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::info_hash_t const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)libTAU_info_hash_t_op_eq((libTAU::info_hash_t const *)arg1,(libTAU::info_hash_t const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_info_1hash_1t_1op_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::info_hash_t *arg1 = (libTAU::info_hash_t *) 0 ;
  libTAU::info_hash_t *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::info_hash_t **)&jarg1; 
  arg2 = *(libTAU::info_hash_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::info_hash_t const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)libTAU_info_hash_t_op_ne((libTAU::info_hash_t const *)arg1,(libTAU::info_hash_t const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1info_1hash_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::info_hash_t *arg1 = (libTAU::info_hash_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::info_hash_t **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bitfield_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::bitfield *)new libTAU::bitfield();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bitfield_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (libTAU::bitfield *)new libTAU::bitfield(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bitfield_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  libTAU::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (libTAU::bitfield *)new libTAU::bitfield(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bitfield_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::bitfield *arg1 = 0 ;
  libTAU::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bitfield const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::bitfield *)new libTAU::bitfield((libTAU::bitfield const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libTAU::bitfield const *)arg1)->operator [](arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1get_1bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libTAU::bitfield const *)arg1)->get_bit(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1clear_1bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->clear_bit(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1set_1bit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_bit(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1all_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::bitfield const *)arg1)->all_set();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1none_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::bitfield const *)arg1)->none_set();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  {
    try {
      result = (int)((libTAU::bitfield const *)arg1)->size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1num_1words(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  {
    try {
      result = (int)((libTAU::bitfield const *)arg1)->num_words();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::bitfield const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  libTAU::bitfield *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  arg2 = *(libTAU::bitfield **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bitfield & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->swap(*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  {
    try {
      result = (int)((libTAU::bitfield const *)arg1)->count();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1find_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  {
    try {
      result = (int)((libTAU::bitfield const *)arg1)->find_first_set();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1find_1last_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  {
    try {
      result = (int)((libTAU::bitfield const *)arg1)->find_last_clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->resize(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1set_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  {
    try {
      (arg1)->set_all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1clear_1all(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  {
    try {
      (arg1)->clear_all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bitfield_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::int8_t > *arg1 = 0 ;
  libTAU::bitfield *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::bitfield *)new_libTAU_bitfield__SWIG_4((std::vector< signed char > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bitfield **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bitfield_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  std::vector< std::int8_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > const & reference is null");
    return ;
  } 
  {
    try {
      libTAU_bitfield_assign(arg1,(std::vector< signed char > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1bitfield(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::bitfield *arg1 = (libTAU::bitfield *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::bitfield **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_operation_1name(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  libTAU::operation_t arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (libTAU::operation_t)jarg1; 
  {
    try {
      result = (char *)libTAU::operation_name(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_libTAU_1no_1error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::error_code_enum result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::error_code_enum)libTAU::errors::no_error;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_missing_1file_1sizes_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::error_code_enum result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::error_code_enum)libTAU::errors::missing_file_sizes;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_http_1parse_1error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::error_code_enum result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::error_code_enum)libTAU::errors::http_parse_error;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_no_1i2p_1router_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::error_code_enum result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::error_code_enum)libTAU::errors::no_i2p_router;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_no_1i2p_1endpoint_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::error_code_enum result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::error_code_enum)libTAU::errors::no_i2p_endpoint;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_scrape_1not_1available_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::error_code_enum result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::error_code_enum)libTAU::errors::scrape_not_available;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_no_1entropy_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::error_code_enum result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::error_code_enum)libTAU::errors::no_entropy;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1unknown_1version_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::error_code_enum result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::error_code_enum)libTAU::errors::torrent_unknown_version;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_cont_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::cont;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ok_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::ok;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_created_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::created;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_accepted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::accepted;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_no_1content_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::no_content;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_multiple_1choices_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::multiple_choices;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_moved_1permanently_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::moved_permanently;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_moved_1temporarily_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::moved_temporarily;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_not_1modified_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::not_modified;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bad_1request_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::bad_request;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_unauthorized_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::unauthorized;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_forbidden_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::forbidden;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_not_1found_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::not_found;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_internal_1server_1error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::internal_server_error;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_not_1implemented_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::not_implemented;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bad_1gateway_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::bad_gateway;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_service_1unavailable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::errors::http_errors result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::errors::http_errors)libTAU::errors::service_unavailable;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1storage_1error_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::storage_error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::storage_error *)new libTAU::storage_error();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::storage_error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1storage_1error_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::error_code arg1 ;
  libTAU::error_code *argp1 ;
  libTAU::storage_error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(libTAU::error_code **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::error_code");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (libTAU::storage_error *)new libTAU::storage_error(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::storage_error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1storage_1error_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libTAU::error_code arg1 ;
  libTAU::operation_t arg2 ;
  libTAU::error_code *argp1 ;
  libTAU::storage_error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(libTAU::error_code **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::error_code");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (libTAU::operation_t)jarg2; 
  {
    try {
      result = (libTAU::storage_error *)new libTAU::storage_error(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::storage_error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_storage_1error_1to_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::storage_error *arg1 = (libTAU::storage_error *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::storage_error **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::storage_error const *)arg1)->operator bool();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_storage_1error_1ec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::storage_error *arg1 = (libTAU::storage_error *) 0 ;
  libTAU::error_code *arg2 = (libTAU::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::storage_error **)&jarg1; 
  arg2 = *(libTAU::error_code **)&jarg2; 
  if (arg1) (arg1)->ec = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_storage_1error_1ec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::storage_error *arg1 = (libTAU::storage_error *) 0 ;
  libTAU::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::storage_error **)&jarg1; 
  result = (libTAU::error_code *)& ((arg1)->ec);
  *(libTAU::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_storage_1error_1file_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int jresult = 0 ;
  libTAU::storage_error *arg1 = (libTAU::storage_error *) 0 ;
  file_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::storage_error **)&jarg1; 
  {
    try {
      result = ((libTAU::storage_error const *)arg1)->file();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_storage_1error_1file_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  libTAU::storage_error *arg1 = (libTAU::storage_error *) 0 ;
  file_index_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::storage_error **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      (arg1)->file(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_storage_1error_1operation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::storage_error *arg1 = (libTAU::storage_error *) 0 ;
  libTAU::operation_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::storage_error **)&jarg1; 
  arg2 = (libTAU::operation_t)jarg2; 
  if (arg1) (arg1)->operation = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_storage_1error_1operation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::storage_error *arg1 = (libTAU::storage_error *) 0 ;
  libTAU::operation_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::storage_error **)&jarg1; 
  result = (libTAU::operation_t) ((arg1)->operation);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1storage_1error(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::storage_error *arg1 = (libTAU::storage_error *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::storage_error **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  result = (std::string *) & ((arg1)->message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1last_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  libTAU::error_code *arg2 = (libTAU::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  arg2 = *(libTAU::error_code **)&jarg2; 
  if (arg1) (arg1)->last_error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1last_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  libTAU::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  result = (libTAU::error_code *)& ((arg1)->last_error);
  *(libTAU::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1scrape_1incomplete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scrape_incomplete = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1scrape_1incomplete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  result = (int) ((arg1)->scrape_incomplete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1scrape_1complete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scrape_complete = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1scrape_1complete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  result = (int) ((arg1)->scrape_complete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1scrape_1downloaded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scrape_downloaded = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1scrape_1downloaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  result = (int) ((arg1)->scrape_downloaded);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1fails_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  std::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  if (arg1) (arg1)->fails = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1fails_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  std::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  result = (std::uint8_t) ((arg1)->fails);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1updating_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->updating = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1updating_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  result = (bool) ((arg1)->updating);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1start_1sent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->start_sent = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1start_1sent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  result = (bool) ((arg1)->start_sent);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1complete_1sent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->complete_sent = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1complete_1sent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  result = (bool) ((arg1)->complete_sent);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1triggered_1manually_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->triggered_manually = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1triggered_1manually_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  result = (bool) ((arg1)->triggered_manually);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1get_1next_1announce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  {
    try {
      result = (std::int64_t)libTAU_announce_infohash_get_next_announce(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1infohash_1get_1min_1announce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  {
    try {
      result = (std::int64_t)libTAU_announce_infohash_get_min_announce(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1announce_1infohash(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::announce_infohash *arg1 = (libTAU::announce_infohash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::announce_infohash **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1announce_1endpoint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::announce_endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::announce_endpoint *)new libTAU::announce_endpoint();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::announce_endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1local_1endpoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::announce_endpoint *arg1 = (libTAU::announce_endpoint *) 0 ;
  libTAU::tcp::endpoint *arg2 = (libTAU::tcp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::announce_endpoint **)&jarg1; 
  arg2 = *(libTAU::tcp::endpoint **)&jarg2; 
  if (arg1) (arg1)->local_endpoint = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1local_1endpoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::announce_endpoint *arg1 = (libTAU::announce_endpoint *) 0 ;
  libTAU::tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_endpoint **)&jarg1; 
  result = (libTAU::tcp::endpoint *)& ((arg1)->local_endpoint);
  *(libTAU::tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1enabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::announce_endpoint *arg1 = (libTAU::announce_endpoint *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_endpoint **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1enabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::announce_endpoint *arg1 = (libTAU::announce_endpoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_endpoint **)&jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1get_1infohash_1v1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::announce_endpoint *arg1 = (libTAU::announce_endpoint *) 0 ;
  libTAU::announce_infohash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_endpoint **)&jarg1; 
  {
    try {
      result = libTAU_announce_endpoint_get_infohash_v1(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::announce_infohash **)&jresult = new libTAU::announce_infohash((const libTAU::announce_infohash &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1endpoint_1get_1infohash_1v2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::announce_endpoint *arg1 = (libTAU::announce_endpoint *) 0 ;
  libTAU::announce_infohash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_endpoint **)&jarg1; 
  {
    try {
      result = libTAU_announce_endpoint_get_infohash_v2(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::announce_infohash **)&jresult = new libTAU::announce_infohash((const libTAU::announce_infohash &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1announce_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::announce_endpoint *arg1 = (libTAU::announce_endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::announce_endpoint **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1announce_1entry_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::announce_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::announce_entry *)new libTAU::announce_entry();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::announce_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1announce_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1announce_1entry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::announce_entry *arg1 = 0 ;
  libTAU::announce_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::announce_entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::announce_entry *)new libTAU::announce_entry((libTAU::announce_entry const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::announce_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1trackerid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->trackerid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1trackerid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  result = (std::string *) & ((arg1)->trackerid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1endpoints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  std::vector< libTAU::announce_endpoint > *arg2 = (std::vector< libTAU::announce_endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  arg2 = *(std::vector< libTAU::announce_endpoint > **)&jarg2; 
  if (arg1) (arg1)->endpoints = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1endpoints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  std::vector< libTAU::announce_endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  result = (std::vector< libTAU::announce_endpoint > *)& ((arg1)->endpoints);
  *(std::vector< libTAU::announce_endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1tier_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  std::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  if (arg1) (arg1)->tier = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1tier_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  std::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  result = (std::uint8_t) ((arg1)->tier);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1fail_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  std::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  if (arg1) (arg1)->fail_limit = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1fail_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  std::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  result = (std::uint8_t) ((arg1)->fail_limit);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1source_1torrent_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::announce_entry::tracker_source result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::announce_entry::tracker_source)libTAU::announce_entry::source_torrent;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1source_1client_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::announce_entry::tracker_source result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::announce_entry::tracker_source)libTAU::announce_entry::source_client;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1source_1magnet_1link_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::announce_entry::tracker_source result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::announce_entry::tracker_source)libTAU::announce_entry::source_magnet_link;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1source_1tex_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::announce_entry::tracker_source result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::announce_entry::tracker_source)libTAU::announce_entry::source_tex;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  std::uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  arg2 = (std::uint8_t)jarg2; 
  if (arg1) (arg1)->source = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  std::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  result = (std::uint8_t) ((arg1)->source);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1verified_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verified = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_announce_1entry_1verified_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::announce_entry *arg1 = (libTAU::announce_entry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::announce_entry **)&jarg1; 
  result = (bool) ((arg1)->verified);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1announce_1entry_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  libTAU::announce_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (libTAU::announce_entry *)new_libTAU_announce_entry__SWIG_2(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::announce_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1file_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  libTAU::file_slice *arg1 = (libTAU::file_slice *) 0 ;
  file_index_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_slice **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  if (arg1) (arg1)->file_index = arg2;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1file_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int jresult = 0 ;
  libTAU::file_slice *arg1 = (libTAU::file_slice *) 0 ;
  file_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_slice **)&jarg1; 
  result =  ((arg1)->file_index);
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1offset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::file_slice *arg1 = (libTAU::file_slice *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_slice **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1offset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::file_slice *arg1 = (libTAU::file_slice *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_slice **)&jarg1; 
  result = (std::int64_t) ((arg1)->offset);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::file_slice *arg1 = (libTAU::file_slice *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_slice **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1slice_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::file_slice *arg1 = (libTAU::file_slice *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_slice **)&jarg1; 
  result = (std::int64_t) ((arg1)->size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1file_1slice(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::file_slice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::file_slice *)new libTAU::file_slice();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::file_slice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1file_1slice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::file_slice *arg1 = (libTAU::file_slice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::file_slice **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1file_1storage_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::file_storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::file_storage *)new libTAU::file_storage();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::file_storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1file_1storage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1file_1storage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::file_storage *arg1 = 0 ;
  libTAU::file_storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::file_storage const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::file_storage *)new libTAU::file_storage((libTAU::file_storage const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::file_storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1max_1file_1size_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  result = (long long)libTAU::file_storage::max_file_size;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1max_1file_1offset_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  result = (long long)libTAU::file_storage::max_file_offset;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::file_storage const *)arg1)->is_valid();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1rename_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jstring jarg3) {
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->rename_file(arg2,(std::string const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1map_1block(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  piece_index_t arg2 ;
  std::int64_t arg3 ;
  std::int64_t arg4 ;
  std::vector< libTAU::file_slice > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  arg3 = (std::int64_t)jarg3; 
  arg4 = (std::int64_t)jarg4; 
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->map_block(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::file_slice > **)&jresult = new std::vector< libTAU::file_slice >((const std::vector< libTAU::file_slice > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1map_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  std::int64_t arg3 ;
  int arg4 ;
  libTAU::peer_request result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  arg3 = (std::int64_t)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->map_file(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::peer_request **)&jresult = new libTAU::peer_request((const libTAU::peer_request &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1num_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      result = (int)((libTAU::file_storage const *)arg1)->num_files();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1end_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->end_file();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1total_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      result = (std::int64_t)((libTAU::file_storage const *)arg1)->total_size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1size_1on_1disk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      result = (std::int64_t)((libTAU::file_storage const *)arg1)->size_on_disk();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1set_1num_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_num_pieces(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1num_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      result = (int)((libTAU::file_storage const *)arg1)->num_pieces();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1end_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  piece_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->end_piece();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1last_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  piece_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->last_piece();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1set_1piece_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_piece_length(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1piece_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      result = (int)((libTAU::file_storage const *)arg1)->piece_length();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1piece_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jint jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  piece_index_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (int)((libTAU::file_storage const *)arg1)->piece_size(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1piece_1size2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jint jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  piece_index_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (int)((libTAU::file_storage const *)arg1)->piece_size2(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1blocks_1in_1piece2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jint jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  piece_index_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (int)((libTAU::file_storage const *)arg1)->blocks_in_piece2(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1set_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->set_name((std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      result = (std::string *) &((libTAU::file_storage const *)arg1)->name();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  libTAU::file_storage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  arg2 = *(libTAU::file_storage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::file_storage & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->swap(*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1canonicalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      (arg1)->canonicalize();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1root(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jlong jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  libTAU::sha256_hash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->root(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::sha256_hash **)&jresult = new libTAU::sha256_hash((const libTAU::sha256_hash &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1root_1ptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jstring jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (char *)((libTAU::file_storage const *)arg1)->root_ptr(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1symlink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jstring jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->symlink(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1mtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jlong jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  std::time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->mtime(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1path_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->file_path(arg2,(std::string const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1path_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jstring jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->file_path(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jlong jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (std::int64_t)((libTAU::file_storage const *)arg1)->file_size(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1pad_1file_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jboolean jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (bool)((libTAU::file_storage const *)arg1)->pad_file_at(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jlong jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (std::int64_t)((libTAU::file_storage const *)arg1)->file_offset(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1num_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jint jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (int)((libTAU::file_storage const *)arg1)->file_num_pieces(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1num_1blocks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jint jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (int)((libTAU::file_storage const *)arg1)->file_num_blocks(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1first_1piece_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jint jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (int)((libTAU::file_storage const *)arg1)->file_first_piece_node(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1first_1block_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jint jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (int)((libTAU::file_storage const *)arg1)->file_first_block_node(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1flag_1pad_1file_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::file_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::file_flags_tag > *)&libTAU::file_storage::flag_pad_file;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::file_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1flag_1hidden_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::file_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::file_flags_tag > *)&libTAU::file_storage::flag_hidden;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::file_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1flag_1executable_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::file_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::file_flags_tag > *)&libTAU::file_storage::flag_executable;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::file_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1flag_1symlink_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::file_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::file_flags_tag > *)&libTAU::file_storage::flag_symlink;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::file_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jlong jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  libTAU::file_flags_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->file_flags(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::file_flags_t **)&jresult = new libTAU::file_flags_t((const libTAU::file_flags_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1absolute_1path(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jboolean jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (bool)((libTAU::file_storage const *)arg1)->file_absolute_path(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1index_1at_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  int jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  std::int64_t arg2 ;
  file_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->file_index_at_offset(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1index_1at_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  int jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  piece_index_t arg2 ;
  file_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->file_index_at_piece(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1last_1file_1index_1at_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  int jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  piece_index_t arg2 ;
  file_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->last_file_index_at_piece(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1index_1for_1root(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  int jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  libTAU::sha256_hash *arg2 = 0 ;
  file_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::sha256_hash const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->file_index_for_root((libTAU::sha256_hash const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1piece_1index_1at_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  int jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  piece_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->piece_index_at_file(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1last_1piece_1index_1at_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  int jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  file_index_t arg2 ;
  piece_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = ((libTAU::file_storage const *)arg1)->last_piece_index_at_file(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1sanitize_1symlinks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      (arg1)->sanitize_symlinks();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1v2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::file_storage const *)arg1)->v2();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1add_1file_1ex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jstring jarg7) {
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  libTAU::error_code *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::int64_t arg4 ;
  libTAU::file_flags_t arg5 ;
  std::time_t arg6 ;
  std::string arg7 ;
  libTAU::file_flags_t *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  arg2 = *(libTAU::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::error_code & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (std::int64_t)jarg4; 
  argp5 = *(libTAU::file_flags_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::file_flags_t");
    return ;
  }
  arg5 = *argp5; 
  arg6 = (std::time_t)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  {
    try {
      libTAU_file_storage_add_file_ex__SWIG_0(arg1,*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1add_1file_1ex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  libTAU::error_code *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::int64_t arg4 ;
  libTAU::file_flags_t arg5 ;
  std::time_t arg6 ;
  libTAU::file_flags_t *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  arg2 = *(libTAU::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::error_code & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (std::int64_t)jarg4; 
  argp5 = *(libTAU::file_flags_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::file_flags_t");
    return ;
  }
  arg5 = *argp5; 
  arg6 = (std::time_t)jarg6; 
  {
    try {
      libTAU_file_storage_add_file_ex__SWIG_0(arg1,*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1add_1file_1ex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  libTAU::error_code *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::int64_t arg4 ;
  libTAU::file_flags_t arg5 ;
  libTAU::file_flags_t *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  arg2 = *(libTAU::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::error_code & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (std::int64_t)jarg4; 
  argp5 = *(libTAU::file_flags_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::file_flags_t");
    return ;
  }
  arg5 = *argp5; 
  {
    try {
      libTAU_file_storage_add_file_ex__SWIG_0(arg1,*arg2,(std::string const &)*arg3,arg4,arg5);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1add_1file_1ex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  libTAU::error_code *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::int64_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  arg2 = *(libTAU::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::error_code & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (std::int64_t)jarg4; 
  {
    try {
      libTAU_file_storage_add_file_ex__SWIG_0(arg1,*arg2,(std::string const &)*arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1storage_1file_1name_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  libTAU::file_storage *arg1 = (libTAU::file_storage *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = libTAU_file_storage_file_name_ex(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1file_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1file_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1request_1piece_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  libTAU::peer_request *arg1 = (libTAU::peer_request *) 0 ;
  piece_index_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_request **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  if (arg1) (arg1)->piece = arg2;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1request_1piece_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int jresult = 0 ;
  libTAU::peer_request *arg1 = (libTAU::peer_request *) 0 ;
  piece_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_request **)&jarg1; 
  result =  ((arg1)->piece);
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1request_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_request *arg1 = (libTAU::peer_request *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_request **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1request_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_request *arg1 = (libTAU::peer_request *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_request **)&jarg1; 
  result = (int) ((arg1)->start);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1request_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_request *arg1 = (libTAU::peer_request *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_request **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1request_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_request *arg1 = (libTAU::peer_request *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_request **)&jarg1; 
  result = (int) ((arg1)->length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1request_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::peer_request *arg1 = (libTAU::peer_request *) 0 ;
  libTAU::peer_request *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::peer_request **)&jarg1; 
  arg2 = *(libTAU::peer_request **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::peer_request const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::peer_request const *)arg1)->operator ==((libTAU::peer_request const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1peer_1request(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::peer_request *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::peer_request *)new libTAU::peer_request();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::peer_request **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1peer_1request(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::peer_request *arg1 = (libTAU::peer_request *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::peer_request **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1no_1error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::bdecode_errors::error_code_enum result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::bdecode_errors::error_code_enum)libTAU::bdecode_errors::no_error;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bdecode_1node_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::bdecode_node *)new libTAU::bdecode_node();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bdecode_node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bdecode_1node_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = 0 ;
  libTAU::bdecode_node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bdecode_node const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::bdecode_node *)new libTAU::bdecode_node((libTAU::bdecode_node const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bdecode_node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  libTAU::bdecode_node::type_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  {
    try {
      result = (libTAU::bdecode_node::type_t)((libTAU::bdecode_node const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1to_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::bdecode_node const *)arg1)->operator bool();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1data_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  std::ptrdiff_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  {
    try {
      result = ((libTAU::bdecode_node const *)arg1)->data_offset();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1list_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  int arg2 ;
  libTAU::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((libTAU::bdecode_node const *)arg1)->list_at(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bdecode_node **)&jresult = new libTAU::bdecode_node((const libTAU::bdecode_node &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1list_1int_1value_1at_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  int arg2 ;
  std::int64_t arg3 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::int64_t)jarg3; 
  {
    try {
      result = (std::int64_t)((libTAU::bdecode_node const *)arg1)->list_int_value_at(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1list_1int_1value_1at_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  int arg2 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (std::int64_t)((libTAU::bdecode_node const *)arg1)->list_int_value_at(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  {
    try {
      result = (int)((libTAU::bdecode_node const *)arg1)->list_size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1dict_1at_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  int arg2 ;
  std::pair< libTAU::bdecode_node,libTAU::bdecode_node > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((libTAU::bdecode_node const *)arg1)->dict_at_node(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< libTAU::bdecode_node,libTAU::bdecode_node > **)&jresult = new std::pair< libTAU::bdecode_node,libTAU::bdecode_node >((const std::pair< libTAU::bdecode_node,libTAU::bdecode_node > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1dict_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  {
    try {
      result = (int)((libTAU::bdecode_node const *)arg1)->dict_size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1int_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  {
    try {
      result = (std::int64_t)((libTAU::bdecode_node const *)arg1)->int_value();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1string_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  {
    try {
      result = (int)((libTAU::bdecode_node const *)arg1)->string_length();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1string_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  std::ptrdiff_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  {
    try {
      result = ((libTAU::bdecode_node const *)arg1)->string_offset();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1list_1string_1value_1at_1ex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = libTAU_bdecode_node_list_string_value_at_ex__SWIG_0(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1list_1string_1value_1at_1ex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = libTAU_bdecode_node_list_string_value_at_ex__SWIG_0(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1dict_1find_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  std::string arg2 ;
  libTAU::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = libTAU_bdecode_node_dict_find_ex((libTAU::bdecode_node const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bdecode_node **)&jresult = new libTAU::bdecode_node((const libTAU::bdecode_node &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1dict_1find_1dict_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  std::string arg2 ;
  libTAU::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = libTAU_bdecode_node_dict_find_dict_ex((libTAU::bdecode_node const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bdecode_node **)&jresult = new libTAU::bdecode_node((const libTAU::bdecode_node &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1dict_1find_1list_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  std::string arg2 ;
  libTAU::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = libTAU_bdecode_node_dict_find_list_ex((libTAU::bdecode_node const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bdecode_node **)&jresult = new libTAU::bdecode_node((const libTAU::bdecode_node &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1dict_1find_1string_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  std::string arg2 ;
  libTAU::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = libTAU_bdecode_node_dict_find_string_ex((libTAU::bdecode_node const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bdecode_node **)&jresult = new libTAU::bdecode_node((const libTAU::bdecode_node &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1dict_1find_1int_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  std::string arg2 ;
  libTAU::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = libTAU_bdecode_node_dict_find_int_ex((libTAU::bdecode_node const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bdecode_node **)&jresult = new libTAU::bdecode_node((const libTAU::bdecode_node &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1dict_1find_1string_1value_1ex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = libTAU_bdecode_node_dict_find_string_value_ex__SWIG_0((libTAU::bdecode_node const *)arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1dict_1find_1string_1value_1ex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = libTAU_bdecode_node_dict_find_string_value_ex__SWIG_0((libTAU::bdecode_node const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1dict_1find_1int_1value_1ex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  std::string arg2 ;
  std::int64_t arg3 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (std::int64_t)jarg3; 
  {
    try {
      result = (std::int64_t)libTAU_bdecode_node_dict_find_int_value_ex__SWIG_0((libTAU::bdecode_node const *)arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1dict_1find_1int_1value_1ex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  std::string arg2 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (std::int64_t)libTAU_bdecode_node_dict_find_int_value_ex__SWIG_0((libTAU::bdecode_node const *)arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1string_1value_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  {
    try {
      result = libTAU_bdecode_node_string_value_ex((libTAU::bdecode_node const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  jstring jresult = 0 ;
  libTAU::bdecode_node *arg1 = 0 ;
  bool arg2 ;
  int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bdecode_node const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  {
    try {
      result = libTAU_bdecode_node_to_string((libTAU::bdecode_node const &)*arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bdecode_1node_1bdecode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  std::vector< std::int8_t > *arg1 = 0 ;
  libTAU::bdecode_node *arg2 = 0 ;
  libTAU::error_code *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > & reference is null");
    return 0;
  } 
  arg2 = *(libTAU::bdecode_node **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bdecode_node & reference is null");
    return 0;
  } 
  arg3 = *(libTAU::error_code **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = (int)libTAU_bdecode_node_bdecode(*arg1,*arg2,*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1bdecode_1node(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::bdecode_node *arg1 = (libTAU::bdecode_node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::bdecode_node **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_print_1entry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  jstring jresult = 0 ;
  libTAU::bdecode_node *arg1 = 0 ;
  bool arg2 ;
  int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bdecode_node const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  {
    try {
      result = libTAU::print_entry((libTAU::bdecode_node const &)*arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_print_1entry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ;
  libTAU::bdecode_node *arg1 = 0 ;
  bool arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bdecode_node const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = libTAU::print_entry((libTAU::bdecode_node const &)*arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_print_1entry_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::bdecode_node *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bdecode_node const & reference is null");
    return 0;
  } 
  {
    try {
      result = libTAU::print_entry((libTAU::bdecode_node const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1web_1seed_1entry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  libTAU::web_seed_entry::headers_t arg3 ;
  libTAU::web_seed_entry::headers_t *argp3 ;
  libTAU::web_seed_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(libTAU::web_seed_entry::headers_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::web_seed_entry::headers_t");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (libTAU::web_seed_entry *)new libTAU::web_seed_entry(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::web_seed_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1web_1seed_1entry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  libTAU::web_seed_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (libTAU::web_seed_entry *)new libTAU::web_seed_entry(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::web_seed_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1web_1seed_1entry_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  libTAU::web_seed_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (libTAU::web_seed_entry *)new libTAU::web_seed_entry(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::web_seed_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1web_1seed_1entry_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::web_seed_entry *arg1 = 0 ;
  libTAU::web_seed_entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::web_seed_entry **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::web_seed_entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::web_seed_entry *)new libTAU::web_seed_entry((libTAU::web_seed_entry const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::web_seed_entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_web_1seed_1entry_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::web_seed_entry *arg1 = (libTAU::web_seed_entry *) 0 ;
  libTAU::web_seed_entry *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::web_seed_entry **)&jarg1; 
  arg2 = *(libTAU::web_seed_entry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::web_seed_entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::web_seed_entry const *)arg1)->operator ==((libTAU::web_seed_entry const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_web_1seed_1entry_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::web_seed_entry *arg1 = (libTAU::web_seed_entry *) 0 ;
  libTAU::web_seed_entry *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::web_seed_entry **)&jarg1; 
  arg2 = *(libTAU::web_seed_entry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::web_seed_entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::web_seed_entry const *)arg1)->operator <((libTAU::web_seed_entry const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_web_1seed_1entry_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::web_seed_entry *arg1 = (libTAU::web_seed_entry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::web_seed_entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_web_1seed_1entry_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::web_seed_entry *arg1 = (libTAU::web_seed_entry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::web_seed_entry **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_web_1seed_1entry_1auth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::web_seed_entry *arg1 = (libTAU::web_seed_entry *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::web_seed_entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->auth = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_web_1seed_1entry_1auth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::web_seed_entry *arg1 = (libTAU::web_seed_entry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::web_seed_entry **)&jarg1; 
  result = (std::string *) & ((arg1)->auth);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_web_1seed_1entry_1extra_1headers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::web_seed_entry *arg1 = (libTAU::web_seed_entry *) 0 ;
  libTAU::web_seed_entry::headers_t *arg2 = (libTAU::web_seed_entry::headers_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::web_seed_entry **)&jarg1; 
  arg2 = *(libTAU::web_seed_entry::headers_t **)&jarg2; 
  if (arg1) (arg1)->extra_headers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_web_1seed_1entry_1extra_1headers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::web_seed_entry *arg1 = (libTAU::web_seed_entry *) 0 ;
  libTAU::web_seed_entry::headers_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::web_seed_entry **)&jarg1; 
  result = (libTAU::web_seed_entry::headers_t *)& ((arg1)->extra_headers);
  *(libTAU::web_seed_entry::headers_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1web_1seed_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::web_seed_entry *arg1 = (libTAU::web_seed_entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::web_seed_entry **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_load_1torrent_1limits_1max_1buffer_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::load_torrent_limits *arg1 = (libTAU::load_torrent_limits *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::load_torrent_limits **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_buffer_size = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_load_1torrent_1limits_1max_1buffer_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::load_torrent_limits *arg1 = (libTAU::load_torrent_limits *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::load_torrent_limits **)&jarg1; 
  result = (int) ((arg1)->max_buffer_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_load_1torrent_1limits_1max_1pieces_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::load_torrent_limits *arg1 = (libTAU::load_torrent_limits *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::load_torrent_limits **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_pieces = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_load_1torrent_1limits_1max_1pieces_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::load_torrent_limits *arg1 = (libTAU::load_torrent_limits *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::load_torrent_limits **)&jarg1; 
  result = (int) ((arg1)->max_pieces);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_load_1torrent_1limits_1max_1decode_1depth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::load_torrent_limits *arg1 = (libTAU::load_torrent_limits *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::load_torrent_limits **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_decode_depth = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_load_1torrent_1limits_1max_1decode_1depth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::load_torrent_limits *arg1 = (libTAU::load_torrent_limits *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::load_torrent_limits **)&jarg1; 
  result = (int) ((arg1)->max_decode_depth);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_load_1torrent_1limits_1max_1decode_1tokens_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::load_torrent_limits *arg1 = (libTAU::load_torrent_limits *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::load_torrent_limits **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_decode_tokens = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_load_1torrent_1limits_1max_1decode_1tokens_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::load_torrent_limits *arg1 = (libTAU::load_torrent_limits *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::load_torrent_limits **)&jarg1; 
  result = (int) ((arg1)->max_decode_tokens);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_load_1torrent_1limits_1max_1duplicate_1filenames_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::load_torrent_limits *arg1 = (libTAU::load_torrent_limits *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::load_torrent_limits **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_duplicate_filenames = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_load_1torrent_1limits_1max_1duplicate_1filenames_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::load_torrent_limits *arg1 = (libTAU::load_torrent_limits *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::load_torrent_limits **)&jarg1; 
  result = (int) ((arg1)->max_duplicate_filenames);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1load_1torrent_1limits(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::load_torrent_limits *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::load_torrent_limits *)new libTAU::load_torrent_limits();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::load_torrent_limits **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1load_1torrent_1limits(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::load_torrent_limits *arg1 = (libTAU::load_torrent_limits *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::load_torrent_limits **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1torrent_1info_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = 0 ;
  libTAU::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::torrent_info const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::torrent_info *)new libTAU::torrent_info((libTAU::torrent_info const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1torrent_1info_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::info_hash_t *arg1 = 0 ;
  libTAU::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::info_hash_t **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::info_hash_t const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::torrent_info *)new libTAU::torrent_info((libTAU::info_hash_t const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1torrent_1info_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = 0 ;
  libTAU::error_code *arg2 = 0 ;
  libTAU::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bdecode_node const & reference is null");
    return 0;
  } 
  arg2 = *(libTAU::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::torrent_info *)new libTAU::torrent_info((libTAU::bdecode_node const &)*arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1torrent_1info_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  libTAU::error_code *arg2 = 0 ;
  libTAU::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(libTAU::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::torrent_info *)new libTAU::torrent_info((std::string const &)*arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1torrent_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  libTAU::file_storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (libTAU::file_storage *) &((libTAU::torrent_info const *)arg1)->files();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::file_storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1orig_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  libTAU::file_storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (libTAU::file_storage *) &((libTAU::torrent_info const *)arg1)->orig_files();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::file_storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1rename_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jstring jarg3) {
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  file_index_t arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->rename_file(arg2,(std::string const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1remap_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  libTAU::file_storage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  arg2 = *(libTAU::file_storage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::file_storage const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->remap_files((libTAU::file_storage const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1add_1tracker_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->add_tracker((std::string const &)*arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1add_1tracker_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_tracker((std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1add_1tracker_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  libTAU::announce_entry::tracker_source arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (libTAU::announce_entry::tracker_source)jarg4; 
  {
    try {
      (arg1)->add_tracker((std::string const &)*arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1trackers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::vector< libTAU::announce_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (std::vector< libTAU::announce_entry > *) &((libTAU::torrent_info const *)arg1)->trackers();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::announce_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1clear_1trackers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      (arg1)->clear_trackers();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1similar_1torrents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::vector< libTAU::sha1_hash > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_info const *)arg1)->similar_torrents();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::sha1_hash > **)&jresult = new std::vector< libTAU::sha1_hash >((const std::vector< libTAU::sha1_hash > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1collections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_info const *)arg1)->collections();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1add_1url_1seed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  libTAU::web_seed_entry::headers_t *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(libTAU::web_seed_entry::headers_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::web_seed_entry::headers_t const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add_url_seed((std::string const &)*arg2,(std::string const &)*arg3,(libTAU::web_seed_entry::headers_t const &)*arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1add_1url_1seed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->add_url_seed((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1add_1url_1seed_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_url_seed((std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1web_1seeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::vector< libTAU::web_seed_entry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (std::vector< libTAU::web_seed_entry > *) &((libTAU::torrent_info const *)arg1)->web_seeds();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::web_seed_entry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1set_1web_1seeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  SwigValueWrapper< std::vector< libTAU::web_seed_entry > > arg2 ;
  std::vector< libTAU::web_seed_entry > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  argp2 = *(std::vector< libTAU::web_seed_entry > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< libTAU::web_seed_entry >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->set_web_seeds(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1total_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (std::int64_t)((libTAU::torrent_info const *)arg1)->total_size();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1size_1on_1disk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (std::int64_t)((libTAU::torrent_info const *)arg1)->size_on_disk();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1piece_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (int)((libTAU::torrent_info const *)arg1)->piece_length();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1num_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (int)((libTAU::torrent_info const *)arg1)->num_pieces();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1last_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  piece_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_info const *)arg1)->last_piece();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1end_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  piece_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_info const *)arg1)->end_piece();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1info_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  libTAU::sha1_hash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_info const *)arg1)->info_hash();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::sha1_hash **)&jresult = new libTAU::sha1_hash((const libTAU::sha1_hash &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1info_1hashes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  libTAU::info_hash_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (libTAU::info_hash_t *) &((libTAU::torrent_info const *)arg1)->info_hashes();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::info_hash_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1v1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::torrent_info const *)arg1)->v1();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1v2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::torrent_info const *)arg1)->v2();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1num_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (int)((libTAU::torrent_info const *)arg1)->num_files();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1map_1block(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  piece_index_t arg2 ;
  std::int64_t arg3 ;
  int arg4 ;
  std::vector< libTAU::file_slice > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  arg3 = (std::int64_t)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = ((libTAU::torrent_info const *)arg1)->map_block(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::file_slice > **)&jresult = new std::vector< libTAU::file_slice >((const std::vector< libTAU::file_slice > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1map_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  file_index_t arg2 ;
  std::int64_t arg3 ;
  int arg4 ;
  libTAU::peer_request result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  arg3 = (std::int64_t)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = ((libTAU::torrent_info const *)arg1)->map_file(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::peer_request **)&jresult = new libTAU::peer_request((const libTAU::peer_request &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::torrent_info const *)arg1)->is_valid();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1priv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::torrent_info const *)arg1)->priv();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1is_1i2p(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::torrent_info const *)arg1)->is_i2p();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1piece_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jint jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  piece_index_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (int)((libTAU::torrent_info const *)arg1)->piece_size(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1hash_1for_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  piece_index_t arg2 ;
  libTAU::sha1_hash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = ((libTAU::torrent_info const *)arg1)->hash_for_piece(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::sha1_hash **)&jresult = new libTAU::sha1_hash((const libTAU::sha1_hash &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1is_1loaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::torrent_info const *)arg1)->is_loaded();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (std::string *) &((libTAU::torrent_info const *)arg1)->name();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1creation_1date(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_info const *)arg1)->creation_date();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1creator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (std::string *) &((libTAU::torrent_info const *)arg1)->creator();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1comment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (std::string *) &((libTAU::torrent_info const *)arg1)->comment();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::vector< std::pair< std::string,int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = (std::vector< std::pair< std::string,int > > *) &((libTAU::torrent_info const *)arg1)->nodes();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< std::string,int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1add_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  std::pair< std::string,int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  arg2 = *(std::pair< std::string,int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,int > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add_node((std::pair< std::string,int > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  char *arg2 = (char *) 0 ;
  libTAU::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = ((libTAU::torrent_info const *)arg1)->info((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bdecode_node **)&jresult = new libTAU::bdecode_node((const libTAU::bdecode_node &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1free_1piece_1layers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      (arg1)->free_piece_layers();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1torrent_1info_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::int64_t arg1 ;
  int arg2 ;
  libTAU::error_code *arg3 = 0 ;
  libTAU::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (std::int64_t)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(libTAU::error_code **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::torrent_info *)new_libTAU_torrent_info__SWIG_4(arg1,arg2,*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1info_1get_1info_1section(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = (libTAU::torrent_info *) 0 ;
  SwigValueWrapper< libTAU::span< signed char const > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1; 
  {
    try {
      result = libTAU_torrent_info_get_info_section(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::span< std::int8_t const > **)&jresult = new libTAU::span< std::int8_t const >((const libTAU::span< std::int8_t const > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_seed_1mode_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::seed_mode;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_upload_1mode_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::upload_mode;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_share_1mode_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::share_mode;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_apply_1ip_1filter_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::apply_ip_filter;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_paused_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::paused;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_auto_1managed_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::auto_managed;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_duplicate_1is_1error_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::duplicate_is_error;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_update_1subscribe_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::update_subscribe;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_super_1seeding_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::super_seeding;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_sequential_1download_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::sequential_download;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stop_1when_1ready_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::stop_when_ready;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_override_1trackers_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::override_trackers;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_override_1web_1seeds_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::override_web_seeds;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_need_1save_1resume_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::need_save_resume;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_disable_1dht_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::disable_dht;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_disable_1lsd_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::disable_lsd;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_disable_1pex_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::disable_pex;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_no_1verify_1files_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::no_verify_files;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_all_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::all;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_default_1flags_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_flags_t *)&libTAU::torrent_flags::default_flags;
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1torrent_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag >((const libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag >((const libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag >((const libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag >((const libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag >((const libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint64_t_Sc_libTAU_torrent_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag >((const libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1torrent_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint64_t,libTAU::torrent_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1add_1torrent_1params_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::add_torrent_params *)new libTAU::add_torrent_params();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::add_torrent_params **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1add_1torrent_1params(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1add_1torrent_1params_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = 0 ;
  libTAU::add_torrent_params *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::add_torrent_params && reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::add_torrent_params *)new libTAU::add_torrent_params((libTAU::add_torrent_params &&)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::add_torrent_params **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->version);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1trackers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->trackers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1trackers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->trackers);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1tracker_1tiers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2; 
  if (arg1) (arg1)->tracker_tiers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1tracker_1tiers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (std::vector< int > *)& ((arg1)->tracker_tiers);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1dht_1nodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::pair< std::string,int > > *arg2 = (std::vector< std::pair< std::string,int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< std::pair< std::string,int > > **)&jarg2; 
  if (arg1) (arg1)->dht_nodes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1dht_1nodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::pair< std::string,int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (std::vector< std::pair< std::string,int > > *)& ((arg1)->dht_nodes);
  *(std::vector< std::pair< std::string,int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1save_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->save_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1save_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (std::string *) & ((arg1)->save_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1storage_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::storage_mode_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (libTAU::storage_mode_t)jarg2; 
  if (arg1) (arg1)->storage_mode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1storage_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::storage_mode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (libTAU::storage_mode_t) ((arg1)->storage_mode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1userdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::client_data_t *arg2 = (libTAU::client_data_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(libTAU::client_data_t **)&jarg2; 
  if (arg1) (arg1)->userdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1userdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::client_data_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (libTAU::client_data_t *)& ((arg1)->userdata);
  *(libTAU::client_data_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1trackerid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->trackerid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1trackerid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (std::string *) & ((arg1)->trackerid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::torrent_flags_t *arg2 = (libTAU::torrent_flags_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(libTAU::torrent_flags_t **)&jarg2; 
  if (arg1) (arg1)->flags = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (libTAU::torrent_flags_t *)& ((arg1)->flags);
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1info_1hashes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::info_hash_t *arg2 = (libTAU::info_hash_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(libTAU::info_hash_t **)&jarg2; 
  if (arg1) (arg1)->info_hashes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1info_1hashes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::info_hash_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (libTAU::info_hash_t *)& ((arg1)->info_hashes);
  *(libTAU::info_hash_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1max_1uploads_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_uploads = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1max_1uploads_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->max_uploads);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1max_1connections_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max_connections = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1max_1connections_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->max_connections);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1upload_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1upload_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->upload_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1download_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1download_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->download_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1total_1uploaded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total_uploaded = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1total_1uploaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (std::int64_t) ((arg1)->total_uploaded);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1total_1downloaded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total_downloaded = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1total_1downloaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (std::int64_t) ((arg1)->total_downloaded);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1active_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->active_time = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1active_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->active_time);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1finished_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->finished_time = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1finished_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->finished_time);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1seeding_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->seeding_time = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1seeding_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->seeding_time);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1added_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (std::time_t)jarg2; 
  if (arg1) (arg1)->added_time = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1added_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result =  ((arg1)->added_time);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1completed_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (std::time_t)jarg2; 
  if (arg1) (arg1)->completed_time = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1completed_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result =  ((arg1)->completed_time);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1last_1seen_1complete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (std::time_t)jarg2; 
  if (arg1) (arg1)->last_seen_complete = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1last_1seen_1complete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result =  ((arg1)->last_seen_complete);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1num_1complete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_complete = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1num_1complete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->num_complete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1num_1incomplete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_incomplete = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1num_1incomplete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->num_incomplete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1num_1downloaded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_downloaded = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1num_1downloaded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (int) ((arg1)->num_downloaded);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1url_1seeds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->url_seeds = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1url_1seeds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->url_seeds);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1peers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< libTAU::tcp::endpoint > *arg2 = (std::vector< libTAU::tcp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< libTAU::tcp::endpoint > **)&jarg2; 
  if (arg1) (arg1)->peers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1peers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< libTAU::tcp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (std::vector< libTAU::tcp::endpoint > *)& ((arg1)->peers);
  *(std::vector< libTAU::tcp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1banned_1peers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< libTAU::tcp::endpoint > *arg2 = (std::vector< libTAU::tcp::endpoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< libTAU::tcp::endpoint > **)&jarg2; 
  if (arg1) (arg1)->banned_peers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1banned_1peers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< libTAU::tcp::endpoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result = (std::vector< libTAU::tcp::endpoint > *)& ((arg1)->banned_peers);
  *(std::vector< libTAU::tcp::endpoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1last_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (std::time_t)jarg2; 
  if (arg1) (arg1)->last_download = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1last_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result =  ((arg1)->last_download);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1last_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = (std::time_t)jarg2; 
  if (arg1) (arg1)->last_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1last_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  result =  ((arg1)->last_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1ti_1ptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  {
    try {
      result = (libTAU::torrent_info *)libTAU_add_torrent_params_ti_ptr(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1set_1ti(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::torrent_info *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(libTAU::torrent_info **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::torrent_info const & reference is null");
    return ;
  } 
  {
    try {
      libTAU_add_torrent_params_set_ti(arg1,(libTAU::torrent_info const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1get_1file_1priorities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  {
    try {
      result = libTAU_add_torrent_params_get_file_priorities(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1set_1file_1priorities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::int8_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > & reference is null");
    return ;
  } 
  {
    try {
      libTAU_add_torrent_params_set_file_priorities(arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1get_1piece_1priorities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  {
    try {
      result = libTAU_add_torrent_params_get_piece_priorities(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1set_1piece_1priorities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::int8_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > & reference is null");
    return ;
  } 
  {
    try {
      libTAU_add_torrent_params_set_piece_priorities(arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1get_1merkle_1trees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::vector< libTAU::sha256_hash > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  {
    try {
      result = libTAU_add_torrent_params_get_merkle_trees(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::vector< libTAU::sha256_hash > > **)&jresult = new std::vector< std::vector< libTAU::sha256_hash > >((const std::vector< std::vector< libTAU::sha256_hash > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1set_1merkle_1trees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::vector< libTAU::sha256_hash > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< std::vector< libTAU::sha256_hash > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< libTAU::sha256_hash > > & reference is null");
    return ;
  } 
  {
    try {
      libTAU_add_torrent_params_set_merkle_trees(arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1get_1merkle_1tree_1mask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::vector< bool > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  {
    try {
      result = libTAU_add_torrent_params_get_merkle_tree_mask(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::vector< bool > > **)&jresult = new std::vector< std::vector< bool > >((const std::vector< std::vector< bool > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1set_1merkle_1tree_1mask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::vector< bool > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< std::vector< bool > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< bool > > & reference is null");
    return ;
  } 
  {
    try {
      libTAU_add_torrent_params_set_merkle_tree_mask(arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1get_1verified_1leaf_1hashes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::vector< bool > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  {
    try {
      result = libTAU_add_torrent_params_get_verified_leaf_hashes(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::vector< bool > > **)&jresult = new std::vector< std::vector< bool > >((const std::vector< std::vector< bool > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1set_1verified_1leaf_1hashes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::vector< std::vector< bool > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(std::vector< std::vector< bool > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< bool > > & reference is null");
    return ;
  } 
  {
    try {
      libTAU_add_torrent_params_set_verified_leaf_hashes(arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1get_1unfinished_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::map< int,libTAU::bitfield > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  {
    try {
      result = libTAU_add_torrent_params_get_unfinished_pieces(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::map< int,libTAU::bitfield > **)&jresult = new std::map< int,libTAU::bitfield >((const std::map< int,libTAU::bitfield > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1set_1unfinished_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::map< int,libTAU::bitfield > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(std::map< int,libTAU::bitfield > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,libTAU::bitfield > & reference is null");
    return ;
  } 
  {
    try {
      libTAU_add_torrent_params_set_unfinished_pieces(arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1get_1renamed_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::map< int,std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  {
    try {
      result = libTAU_add_torrent_params_get_renamed_files(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::map< int,std::string > **)&jresult = new std::map< int,std::string >((const std::map< int,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1set_1renamed_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  std::map< int,std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(std::map< int,std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,std::string > & reference is null");
    return ;
  } 
  {
    try {
      libTAU_add_torrent_params_set_renamed_files(arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1get_1have_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::bitfield result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  {
    try {
      result = libTAU_add_torrent_params_get_have_pieces(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bitfield **)&jresult = new libTAU::bitfield((const libTAU::bitfield &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1set_1have_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::bitfield *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(libTAU::bitfield **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bitfield & reference is null");
    return ;
  } 
  {
    try {
      libTAU_add_torrent_params_set_have_pieces(arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1get_1verified_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::bitfield result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  {
    try {
      result = libTAU_add_torrent_params_get_verified_pieces(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bitfield **)&jresult = new libTAU::bitfield((const libTAU::bitfield &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1torrent_1params_1set_1verified_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::add_torrent_params *arg1 = (libTAU::add_torrent_params *) 0 ;
  libTAU::bitfield *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1; 
  arg2 = *(libTAU::bitfield **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bitfield & reference is null");
    return ;
  } 
  {
    try {
      libTAU_add_torrent_params_set_verified_pieces(arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_close_1reason_1t_1none_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::close_reason_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::close_reason_t)libTAU::close_reason_t::none;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_close_1reason_1t_1encryption_1error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::close_reason_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::close_reason_t)libTAU::close_reason_t::encryption_error;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1peer_1info_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::peer_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::peer_info *)new libTAU::peer_info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::peer_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1peer_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1peer_1info_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = 0 ;
  libTAU::peer_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::peer_info const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::peer_info *)new libTAU::peer_info((libTAU::peer_info const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::peer_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1total_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total_download = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1total_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (std::int64_t) ((arg1)->total_download);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1total_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1total_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (std::int64_t) ((arg1)->total_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1interesting_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::interesting;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1choked_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::choked;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1remote_1interested_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::remote_interested;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1remote_1choked_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::remote_choked;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1supports_1extensions_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::supports_extensions;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1outgoing_1connection_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::outgoing_connection;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1local_1connection_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::local_connection;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1handshake_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::handshake;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1connecting_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::connecting;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1on_1parole_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::on_parole;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1seed_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::seed;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1optimistic_1unchoke_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::optimistic_unchoke;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1snubbed_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::snubbed;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1upload_1only_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::upload_only;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1endgame_1mode_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::endgame_mode;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1holepunched_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::holepunched;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1i2p_1socket_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::i2p_socket;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1utp_1socket_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::utp_socket;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1ssl_1socket_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::ssl_socket;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1rc4_1encrypted_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::rc4_encrypted;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1plaintext_1encrypted_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > *)&libTAU::peer_info::plaintext_encrypted;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::peer_flags_t *arg2 = (libTAU::peer_flags_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = *(libTAU::peer_flags_t **)&jarg2; 
  if (arg1) (arg1)->flags = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::peer_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (libTAU::peer_flags_t *)& ((arg1)->flags);
  *(libTAU::peer_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1tracker_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > *)&libTAU::peer_info::tracker;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1dht_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > *)&libTAU::peer_info::dht;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1pex_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > *)&libTAU::peer_info::pex;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1lsd_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > *)&libTAU::peer_info::lsd;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1resume_1data_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > *)&libTAU::peer_info::resume_data;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1incoming_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > *)&libTAU::peer_info::incoming;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::peer_source_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::peer_source_flags_t *arg2 = (libTAU::peer_source_flags_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = *(libTAU::peer_source_flags_t **)&jarg2; 
  if (arg1) (arg1)->source = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::peer_source_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (libTAU::peer_source_flags_t *)& ((arg1)->source);
  *(libTAU::peer_source_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1up_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->up_speed = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1up_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->up_speed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1down_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->down_speed = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1down_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->down_speed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1payload_1up_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->payload_up_speed = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1payload_1up_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->payload_up_speed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1payload_1down_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->payload_down_speed = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1payload_1down_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->payload_down_speed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1pid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::peer_id *arg2 = (libTAU::peer_id *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = *(libTAU::peer_id **)&jarg2; 
  if (arg1) (arg1)->pid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1pid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::peer_id *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (libTAU::peer_id *)& ((arg1)->pid);
  *(libTAU::peer_id **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1queue_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->queue_bytes = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1queue_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->queue_bytes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1request_1timeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->request_timeout = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1request_1timeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->request_timeout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1send_1buffer_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->send_buffer_size = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1send_1buffer_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->send_buffer_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1used_1send_1buffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->used_send_buffer = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1used_1send_1buffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->used_send_buffer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1receive_1buffer_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->receive_buffer_size = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1receive_1buffer_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->receive_buffer_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1used_1receive_1buffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->used_receive_buffer = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1used_1receive_1buffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->used_receive_buffer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1receive_1buffer_1watermark_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->receive_buffer_watermark = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1receive_1buffer_1watermark_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->receive_buffer_watermark);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1num_1hashfails_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_hashfails = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1num_1hashfails_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->num_hashfails);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1download_1queue_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_queue_length = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1download_1queue_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->download_queue_length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1timed_1out_1requests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->timed_out_requests = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1timed_1out_1requests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->timed_out_requests);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1busy_1requests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->busy_requests = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1busy_1requests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->busy_requests);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1requests_1in_1buffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->requests_in_buffer = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1requests_1in_1buffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->requests_in_buffer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1target_1dl_1queue_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->target_dl_queue_length = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1target_1dl_1queue_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->target_dl_queue_length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1upload_1queue_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_queue_length = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1upload_1queue_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->upload_queue_length);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1failcount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->failcount = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1failcount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->failcount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1downloading_1piece_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  piece_index_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  if (arg1) (arg1)->downloading_piece_index = arg2;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1downloading_1piece_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  piece_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result =  ((arg1)->downloading_piece_index);
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1downloading_1block_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->downloading_block_index = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1downloading_1block_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->downloading_block_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1downloading_1progress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->downloading_progress = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1downloading_1progress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->downloading_progress);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1downloading_1total_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->downloading_total = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1downloading_1total_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->downloading_total);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1standard_1bittorrent_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::connection_type_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::connection_type_tag > *)&libTAU::peer_info::standard_bittorrent;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::connection_type_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1web_1seed_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::connection_type_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::connection_type_tag > *)&libTAU::peer_info::web_seed;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::connection_type_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1http_1seed_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::connection_type_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::connection_type_tag > *)&libTAU::peer_info::http_seed;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::connection_type_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1connection_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::connection_type_t *arg2 = (libTAU::connection_type_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = *(libTAU::connection_type_t **)&jarg2; 
  if (arg1) (arg1)->connection_type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1connection_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::connection_type_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (libTAU::connection_type_t *)& ((arg1)->connection_type);
  *(libTAU::connection_type_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1pending_1disk_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pending_disk_bytes = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1pending_1disk_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->pending_disk_bytes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1pending_1disk_1read_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pending_disk_read_bytes = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1pending_1disk_1read_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->pending_disk_read_bytes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1send_1quota_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->send_quota = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1send_1quota_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->send_quota);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1receive_1quota_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->receive_quota = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1receive_1quota_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->receive_quota);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1rtt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rtt = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1rtt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->rtt);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1num_1pieces_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_pieces = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1num_1pieces_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->num_pieces);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1download_1rate_1peak_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_rate_peak = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1download_1rate_1peak_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->download_rate_peak);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1upload_1rate_1peak_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_rate_peak = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1upload_1rate_1peak_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->upload_rate_peak);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1progress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->progress = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1progress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (float) ((arg1)->progress);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1progress_1ppm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->progress_ppm = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1progress_1ppm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (int) ((arg1)->progress_ppm);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1ip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::tcp::endpoint *arg2 = (libTAU::tcp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = *(libTAU::tcp::endpoint **)&jarg2; 
  if (arg1) (arg1)->ip = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1ip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (libTAU::tcp::endpoint *)& ((arg1)->ip);
  *(libTAU::tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1local_1endpoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::tcp::endpoint *arg2 = (libTAU::tcp::endpoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = *(libTAU::tcp::endpoint **)&jarg2; 
  if (arg1) (arg1)->local_endpoint = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1local_1endpoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::tcp::endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (libTAU::tcp::endpoint *)& ((arg1)->local_endpoint);
  *(libTAU::tcp::endpoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1bw_1idle_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::bandwidth_state_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::bandwidth_state_flags_tag > *)&libTAU::peer_info::bw_idle;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::bandwidth_state_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1bw_1limit_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::bandwidth_state_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::bandwidth_state_flags_tag > *)&libTAU::peer_info::bw_limit;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::bandwidth_state_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1bw_1network_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::bandwidth_state_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::bandwidth_state_flags_tag > *)&libTAU::peer_info::bw_network;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::bandwidth_state_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1bw_1disk_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::bandwidth_state_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::bandwidth_state_flags_tag > *)&libTAU::peer_info::bw_disk;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::bandwidth_state_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1read_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::bandwidth_state_flags_t *arg2 = (libTAU::bandwidth_state_flags_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = *(libTAU::bandwidth_state_flags_t **)&jarg2; 
  if (arg1) (arg1)->read_state = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1read_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::bandwidth_state_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (libTAU::bandwidth_state_flags_t *)& ((arg1)->read_state);
  *(libTAU::bandwidth_state_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1write_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::bandwidth_state_flags_t *arg2 = (libTAU::bandwidth_state_flags_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  arg2 = *(libTAU::bandwidth_state_flags_t **)&jarg2; 
  if (arg1) (arg1)->write_state = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1write_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  libTAU::bandwidth_state_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  result = (libTAU::bandwidth_state_flags_t *)& ((arg1)->write_state);
  *(libTAU::bandwidth_state_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1get_1client(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  std::vector< int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  {
    try {
      result = libTAU_peer_info_get_client(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< int8_t > **)&jresult = new std::vector< int8_t >((const std::vector< int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1get_1last_1request(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  {
    try {
      result = (int64_t)libTAU_peer_info_get_last_request(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1get_1last_1active(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  {
    try {
      result = (int64_t)libTAU_peer_info_get_last_active(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1get_1download_1queue_1time(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  {
    try {
      result = (int64_t)libTAU_peer_info_get_download_queue_time(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1get_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  {
    try {
      result = (std::int32_t)libTAU_peer_info_get_flags(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1get_1source(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  std::int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  {
    try {
      result = (std::int8_t)libTAU_peer_info_get_source(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1get_1read_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  std::int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  {
    try {
      result = (std::int8_t)libTAU_peer_info_get_read_state(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1get_1write_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  std::int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  {
    try {
      result = (std::int8_t)libTAU_peer_info_get_write_state(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1info_1get_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_info *arg1 = (libTAU::peer_info *) 0 ;
  lt::bitfield result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_info **)&jarg1; 
  {
    try {
      result = libTAU_peer_info_get_pieces(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(lt::bitfield **)&jresult = new lt::bitfield((const lt::bitfield &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1bandwidth_1state_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bandwidth_1state_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bandwidth_1state_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bandwidth_1state_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bandwidth_1state_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bandwidth_1state_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bandwidth_1state_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bandwidth_1state_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bandwidth_1state_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bandwidth_1state_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_bandwidth_1state_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_bandwidth_state_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1bandwidth_1state_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::bandwidth_state_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1connection_1type_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_connection_1type_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_connection_1type_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_connection_1type_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_connection_1type_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_connection_1type_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_connection_1type_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_connection_1type_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_connection_1type_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_connection_1type_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_connection_1type_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_connection_type_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1connection_1type_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::connection_type_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1peer_1source_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1source_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1source_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1source_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1source_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1source_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1source_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1source_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1source_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1source_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1source_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_peer_source_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1peer_1source_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::peer_source_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1peer_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_peer_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1peer_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::peer_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1encryption_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::pex_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::pex_flags_t *)&libTAU::pex_encryption;
  *(libTAU::pex_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1seed_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::pex_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::pex_flags_t *)&libTAU::pex_seed;
  *(libTAU::pex_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1utp_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::pex_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::pex_flags_t *)&libTAU::pex_utp;
  *(libTAU::pex_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1holepunch_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::pex_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::pex_flags_t *)&libTAU::pex_holepunch;
  *(libTAU::pex_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1lt_1v2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::pex_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::pex_flags_t *)&libTAU::pex_lt_v2;
  *(libTAU::pex_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1pex_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pex_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pex_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1pex_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pex_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1torrent_1status_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::torrent_status *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::torrent_status *)new libTAU::torrent_status();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_status **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1torrent_1status(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1torrent_1status_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = 0 ;
  libTAU::torrent_status *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::torrent_status const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::torrent_status *)new libTAU::torrent_status((libTAU::torrent_status const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_status **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::torrent_status *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = *(libTAU::torrent_status **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::torrent_status const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::torrent_status const *)arg1)->operator ==((libTAU::torrent_status const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::torrent_handle *arg2 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = *(libTAU::torrent_handle **)&jarg2; 
  if (arg1) (arg1)->handle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::torrent_handle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (libTAU::torrent_handle *)& ((arg1)->handle);
  *(libTAU::torrent_handle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1checking_1files_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::torrent_status::state_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_status::state_t)libTAU::torrent_status::checking_files;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1checking_1resume_1data_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::torrent_status::state_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::torrent_status::state_t)libTAU::torrent_status::checking_resume_data;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1errc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::error_code *arg2 = (libTAU::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = *(libTAU::error_code **)&jarg2; 
  if (arg1) (arg1)->errc = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1errc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (libTAU::error_code *)& ((arg1)->errc);
  *(libTAU::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1error_1file_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  file_index_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  if (arg1) (arg1)->error_file = arg2;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1error_1file_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  file_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result =  ((arg1)->error_file);
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1error_1file_1none_1get(JNIEnv *jenv, jclass jcls) {
  int jresult = 0 ;
  file_index_t result;
  
  (void)jenv;
  (void)jcls;
  result = libTAU::torrent_status::error_file_none;
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1error_1file_1ssl_1ctx_1get(JNIEnv *jenv, jclass jcls) {
  int jresult = 0 ;
  file_index_t result;
  
  (void)jenv;
  (void)jcls;
  result = libTAU::torrent_status::error_file_ssl_ctx;
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1error_1file_1metadata_1get(JNIEnv *jenv, jclass jcls) {
  int jresult = 0 ;
  file_index_t result;
  
  (void)jenv;
  (void)jcls;
  result = libTAU::torrent_status::error_file_metadata;
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1error_1file_1exception_1get(JNIEnv *jenv, jclass jcls) {
  int jresult = 0 ;
  file_index_t result;
  
  (void)jenv;
  (void)jcls;
  result = libTAU::torrent_status::error_file_exception;
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1error_1file_1partfile_1get(JNIEnv *jenv, jclass jcls) {
  int jresult = 0 ;
  file_index_t result;
  
  (void)jenv;
  (void)jcls;
  result = libTAU::torrent_status::error_file_partfile;
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1save_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->save_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1save_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::string *) & ((arg1)->save_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1current_1tracker_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->current_tracker = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1current_1tracker_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::string *) & ((arg1)->current_tracker);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total_download = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::int64_t) ((arg1)->total_download);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::int64_t) ((arg1)->total_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1payload_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total_payload_download = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1payload_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::int64_t) ((arg1)->total_payload_download);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1payload_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total_payload_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1payload_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::int64_t) ((arg1)->total_payload_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1failed_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total_failed_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1failed_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::int64_t) ((arg1)->total_failed_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1redundant_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total_redundant_bytes = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1redundant_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::int64_t) ((arg1)->total_redundant_bytes);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1done_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total_done = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1done_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::int64_t) ((arg1)->total_done);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::int64_t) ((arg1)->total);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1wanted_1done_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total_wanted_done = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1wanted_1done_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::int64_t) ((arg1)->total_wanted_done);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1wanted_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->total_wanted = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1total_1wanted_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::int64_t) ((arg1)->total_wanted);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1all_1time_1upload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->all_time_upload = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1all_1time_1upload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::int64_t) ((arg1)->all_time_upload);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1all_1time_1download_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->all_time_download = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1all_1time_1download_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (std::int64_t) ((arg1)->all_time_download);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1added_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::time_t)jarg2; 
  if (arg1) (arg1)->added_time = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1added_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result =  ((arg1)->added_time);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1completed_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::time_t)jarg2; 
  if (arg1) (arg1)->completed_time = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1completed_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result =  ((arg1)->completed_time);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1last_1seen_1complete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (std::time_t)jarg2; 
  if (arg1) (arg1)->last_seen_complete = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1last_1seen_1complete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  std::time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result =  ((arg1)->last_seen_complete);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1storage_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::storage_mode_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (libTAU::storage_mode_t)jarg2; 
  if (arg1) (arg1)->storage_mode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1storage_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::storage_mode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (libTAU::storage_mode_t) ((arg1)->storage_mode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1progress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->progress = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1progress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (float) ((arg1)->progress);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1progress_1ppm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->progress_ppm = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1progress_1ppm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->progress_ppm);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1download_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1download_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->download_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1upload_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1upload_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->upload_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1download_1payload_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_payload_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1download_1payload_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->download_payload_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1upload_1payload_1rate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_payload_rate = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1upload_1payload_1rate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->upload_payload_rate);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1seeds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_seeds = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1seeds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_seeds);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1peers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_peers = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1peers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_peers);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1complete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_complete = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1complete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_complete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1incomplete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_incomplete = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1incomplete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_incomplete);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1list_1seeds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->list_seeds = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1list_1seeds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->list_seeds);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1list_1peers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->list_peers = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1list_1peers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->list_peers);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1connect_1candidates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->connect_candidates = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1connect_1candidates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->connect_candidates);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1pieces_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_pieces = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1pieces_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_pieces);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1distributed_1full_1copies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->distributed_full_copies = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1distributed_1full_1copies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->distributed_full_copies);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1distributed_1fraction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->distributed_fraction = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1distributed_1fraction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->distributed_fraction);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1distributed_1copies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->distributed_copies = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1distributed_1copies_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (float) ((arg1)->distributed_copies);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1block_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->block_size = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1block_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->block_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1uploads_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_uploads = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1uploads_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_uploads);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1connections_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_connections = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1num_1connections_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->num_connections);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1uploads_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->uploads_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1uploads_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->uploads_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1connections_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->connections_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1connections_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->connections_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1up_1bandwidth_1queue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->up_bandwidth_queue = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1up_1bandwidth_1queue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->up_bandwidth_queue);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1down_1bandwidth_1queue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->down_bandwidth_queue = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1down_1bandwidth_1queue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->down_bandwidth_queue);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1seed_1rank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->seed_rank = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1seed_1rank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (int) ((arg1)->seed_rank);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::torrent_status::state_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = (libTAU::torrent_status::state_t)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::torrent_status::state_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (libTAU::torrent_status::state_t) ((arg1)->state);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1need_1save_1resume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->need_save_resume = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1need_1save_1resume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->need_save_resume);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1is_1seeding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_seeding = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1is_1seeding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->is_seeding);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1is_1finished_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_finished = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1is_1finished_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->is_finished);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1has_1metadata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->has_metadata = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1has_1metadata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->has_metadata);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1has_1incoming_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->has_incoming = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1has_1incoming_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->has_incoming);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1moving_1storage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->moving_storage = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1moving_1storage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->moving_storage);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1announcing_1to_1trackers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->announcing_to_trackers = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1announcing_1to_1trackers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->announcing_to_trackers);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1announcing_1to_1lsd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->announcing_to_lsd = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1announcing_1to_1lsd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->announcing_to_lsd);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1announcing_1to_1dht_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->announcing_to_dht = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1announcing_1to_1dht_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (bool) ((arg1)->announcing_to_dht);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1info_1hashes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::info_hash_t *arg2 = (libTAU::info_hash_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = *(libTAU::info_hash_t **)&jarg2; 
  if (arg1) (arg1)->info_hashes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1info_1hashes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::info_hash_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (libTAU::info_hash_t *)& ((arg1)->info_hashes);
  *(libTAU::info_hash_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::torrent_flags_t *arg2 = (libTAU::torrent_flags_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  arg2 = *(libTAU::torrent_flags_t **)&jarg2; 
  if (arg1) (arg1)->flags = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::torrent_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  result = (libTAU::torrent_flags_t *)& ((arg1)->flags);
  *(libTAU::torrent_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1torrent_1file_1ptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  {
    try {
      result = (libTAU::torrent_info *)libTAU_torrent_status_torrent_file_ptr(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1get_1next_1announce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  {
    try {
      result = (int64_t)libTAU_torrent_status_get_next_announce(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1get_1last_1upload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  {
    try {
      result = (int64_t)libTAU_torrent_status_get_last_upload(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1get_1last_1download(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  {
    try {
      result = (int64_t)libTAU_torrent_status_get_last_download(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1get_1active_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  {
    try {
      result = (int64_t)libTAU_torrent_status_get_active_duration(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1get_1finished_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  {
    try {
      result = (int64_t)libTAU_torrent_status_get_finished_duration(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1get_1seeding_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  {
    try {
      result = (int64_t)libTAU_torrent_status_get_seeding_duration(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1get_1queue_1position(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  {
    try {
      result = (int)libTAU_torrent_status_get_queue_position(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1get_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::bitfield result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  {
    try {
      result = libTAU_torrent_status_get_pieces(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bitfield **)&jresult = new libTAU::bitfield((const libTAU::bitfield &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1status_1get_1verified_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_status *arg1 = (libTAU::torrent_status *) 0 ;
  libTAU::bitfield result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_status **)&jarg1; 
  {
    try {
      result = libTAU_torrent_status_get_verified_pieces(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bitfield **)&jresult = new libTAU::bitfield((const libTAU::bitfield &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_block_1info_1set_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::block_info *arg1 = (libTAU::block_info *) 0 ;
  libTAU::tcp::endpoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::block_info **)&jarg1; 
  arg2 = *(libTAU::tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::tcp::endpoint const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_peer((libTAU::tcp::endpoint const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_block_1info_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::block_info *arg1 = (libTAU::block_info *) 0 ;
  libTAU::tcp::endpoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::block_info **)&jarg1; 
  {
    try {
      result = ((libTAU::block_info const *)arg1)->peer();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::tcp::endpoint **)&jresult = new libTAU::tcp::endpoint((const libTAU::tcp::endpoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_block_1info_1bytes_1progress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::block_info *arg1 = (libTAU::block_info *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::block_info **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->bytes_progress = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_block_1info_1bytes_1progress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::block_info *arg1 = (libTAU::block_info *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::block_info **)&jarg1; 
  result = (unsigned int) ((arg1)->bytes_progress);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_block_1info_1block_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::block_info *arg1 = (libTAU::block_info *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::block_info **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->block_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_block_1info_1block_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::block_info *arg1 = (libTAU::block_info *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::block_info **)&jarg1; 
  result = (unsigned int) ((arg1)->block_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_block_1info_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::block_info *arg1 = (libTAU::block_info *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::block_info **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_block_1info_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::block_info *arg1 = (libTAU::block_info *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::block_info **)&jarg1; 
  result = (unsigned int) ((arg1)->state);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_block_1info_1num_1peers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::block_info *arg1 = (libTAU::block_info *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::block_info **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->num_peers = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_block_1info_1num_1peers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::block_info *arg1 = (libTAU::block_info *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::block_info **)&jarg1; 
  result = (unsigned int) ((arg1)->num_peers);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1block_1info(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::block_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::block_info *)new libTAU::block_info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::block_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1block_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::block_info *arg1 = (libTAU::block_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::block_info **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1piece_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  libTAU::partial_piece_info *arg1 = (libTAU::partial_piece_info *) 0 ;
  piece_index_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::partial_piece_info **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  if (arg1) (arg1)->piece_index = arg2;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1piece_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int jresult = 0 ;
  libTAU::partial_piece_info *arg1 = (libTAU::partial_piece_info *) 0 ;
  piece_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::partial_piece_info **)&jarg1; 
  result =  ((arg1)->piece_index);
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1blocks_1in_1piece_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::partial_piece_info *arg1 = (libTAU::partial_piece_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::partial_piece_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->blocks_in_piece = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1blocks_1in_1piece_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::partial_piece_info *arg1 = (libTAU::partial_piece_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::partial_piece_info **)&jarg1; 
  result = (int) ((arg1)->blocks_in_piece);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1finished_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::partial_piece_info *arg1 = (libTAU::partial_piece_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::partial_piece_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->finished = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1finished_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::partial_piece_info *arg1 = (libTAU::partial_piece_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::partial_piece_info **)&jarg1; 
  result = (int) ((arg1)->finished);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1writing_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::partial_piece_info *arg1 = (libTAU::partial_piece_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::partial_piece_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->writing = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1writing_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::partial_piece_info *arg1 = (libTAU::partial_piece_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::partial_piece_info **)&jarg1; 
  result = (int) ((arg1)->writing);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1requested_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::partial_piece_info *arg1 = (libTAU::partial_piece_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::partial_piece_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->requested = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1requested_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::partial_piece_info *arg1 = (libTAU::partial_piece_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::partial_piece_info **)&jarg1; 
  result = (int) ((arg1)->requested);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1blocks_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::partial_piece_info *arg1 = (libTAU::partial_piece_info *) 0 ;
  libTAU::block_info *arg2 = (libTAU::block_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::partial_piece_info **)&jarg1; 
  arg2 = *(libTAU::block_info **)&jarg2; 
  if (arg1) (arg1)->blocks = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_partial_1piece_1info_1blocks_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::partial_piece_info *arg1 = (libTAU::partial_piece_info *) 0 ;
  libTAU::block_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::partial_piece_info **)&jarg1; 
  result = (libTAU::block_info *) ((arg1)->blocks);
  *(libTAU::block_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1partial_1piece_1info(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::partial_piece_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::partial_piece_info *)new libTAU::partial_piece_info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::partial_piece_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1partial_1piece_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::partial_piece_info *arg1 = (libTAU::partial_piece_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::partial_piece_info **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1overwrite_1existing_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::add_piece_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::add_piece_flags_tag > *)&libTAU::torrent_handle::overwrite_existing;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::add_piece_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1read_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  piece_index_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->read_piece(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1set_1sequential_1range_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, int jarg3) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  piece_index_t arg2 ;
  piece_index_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    arg3 = piece_index_t(static_cast<std::int32_t>(jarg3));
  }
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->set_sequential_range(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1set_1sequential_1range_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  piece_index_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->set_sequential_range(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1have_1piece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jboolean jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  piece_index_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (bool)((libTAU::torrent_handle const *)arg1)->have_piece(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1get_1peer_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< libTAU::peer_info > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< libTAU::peer_info > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::peer_info > & reference is null");
    return ;
  } 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->get_peer_info(*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1query_1distributed_1copies_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *)&libTAU::torrent_handle::query_distributed_copies;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1query_1accurate_1download_1counters_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *)&libTAU::torrent_handle::query_accurate_download_counters;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1query_1last_1seen_1complete_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *)&libTAU::torrent_handle::query_last_seen_complete;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1query_1pieces_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *)&libTAU::torrent_handle::query_pieces;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1query_1verified_1pieces_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *)&libTAU::torrent_handle::query_verified_pieces;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1query_1torrent_1file_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *)&libTAU::torrent_handle::query_torrent_file;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1query_1name_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *)&libTAU::torrent_handle::query_name;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1query_1save_1path_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > *)&libTAU::torrent_handle::query_save_path;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::status_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1status_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::status_flags_t arg2 ;
  libTAU::status_flags_t *argp2 ;
  libTAU::torrent_status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  argp2 = *(libTAU::status_flags_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::status_flags_t");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((libTAU::torrent_handle const *)arg1)->status(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_status **)&jresult = new libTAU::torrent_status((const libTAU::torrent_status &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1status_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::torrent_status result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_handle const *)arg1)->status();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_status **)&jresult = new libTAU::torrent_status((const libTAU::torrent_status &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1get_1download_1queue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< libTAU::partial_piece_info > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_handle const *)arg1)->get_download_queue();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::partial_piece_info > **)&jresult = new std::vector< libTAU::partial_piece_info >((const std::vector< libTAU::partial_piece_info > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1get_1download_1queue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< libTAU::partial_piece_info > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< libTAU::partial_piece_info > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::partial_piece_info > & reference is null");
    return ;
  } 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->get_download_queue(*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1alert_1when_1available_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::deadline_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::deadline_flags_tag > *)&libTAU::torrent_handle::alert_when_available;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::deadline_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1set_1piece_1deadline_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  piece_index_t arg2 ;
  int arg3 ;
  libTAU::deadline_flags_t arg4 ;
  libTAU::deadline_flags_t *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  arg3 = (int)jarg3; 
  argp4 = *(libTAU::deadline_flags_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::deadline_flags_t");
    return ;
  }
  arg4 = *argp4; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->set_piece_deadline(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1set_1piece_1deadline_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jint jarg3) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  piece_index_t arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  arg3 = (int)jarg3; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->set_piece_deadline(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1reset_1piece_1deadline(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  piece_index_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->reset_piece_deadline(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1clear_1piece_1deadlines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->clear_piece_deadlines();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1piece_1granularity_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::file_progress_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::file_progress_flags_tag > *)&libTAU::torrent_handle::piece_granularity;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::file_progress_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1file_1progress_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< std::int64_t > *arg2 = 0 ;
  libTAU::file_progress_flags_t arg3 ;
  libTAU::file_progress_flags_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< std::int64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int64_t > & reference is null");
    return ;
  } 
  argp3 = *(libTAU::file_progress_flags_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::file_progress_flags_t");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->file_progress(*arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1file_1progress_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< std::int64_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< std::int64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int64_t > & reference is null");
    return ;
  } 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->file_progress(*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1file_1progress_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::file_progress_flags_t arg2 ;
  libTAU::file_progress_flags_t *argp2 ;
  std::vector< std::int64_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  argp2 = *(libTAU::file_progress_flags_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::file_progress_flags_t");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((libTAU::torrent_handle const *)arg1)->file_progress(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int64_t > **)&jresult = new std::vector< std::int64_t >((const std::vector< std::int64_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1file_1progress_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< std::int64_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_handle const *)arg1)->file_progress();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int64_t > **)&jresult = new std::vector< std::int64_t >((const std::vector< std::int64_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1clear_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->clear_error();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1trackers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< libTAU::announce_entry > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_handle const *)arg1)->trackers();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::announce_entry > **)&jresult = new std::vector< libTAU::announce_entry >((const std::vector< libTAU::announce_entry > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1replace_1trackers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< libTAU::announce_entry > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< libTAU::announce_entry > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< libTAU::announce_entry > const & reference is null");
    return ;
  } 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->replace_trackers((std::vector< libTAU::announce_entry > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1add_1tracker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::announce_entry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(libTAU::announce_entry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::announce_entry const & reference is null");
    return ;
  } 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->add_tracker((libTAU::announce_entry const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1add_1url_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->add_url_seed((std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1remove_1url_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->remove_url_seed((std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::torrent_handle const *)arg1)->is_valid();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1graceful_1pause_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::pause_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::pause_flags_tag > *)&libTAU::torrent_handle::graceful_pause;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::pause_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1clear_1disk_1cache_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::pause_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::pause_flags_tag > *)&libTAU::torrent_handle::clear_disk_cache;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::pause_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1pause_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::pause_flags_t arg2 ;
  libTAU::pause_flags_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  argp2 = *(libTAU::pause_flags_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::pause_flags_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->pause(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1pause_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->pause();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1resume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->resume();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::torrent_flags_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_handle const *)arg1)->flags();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_flags_t **)&jresult = new libTAU::torrent_flags_t((const libTAU::torrent_flags_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1set_1flags_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::torrent_flags_t arg2 ;
  libTAU::torrent_flags_t arg3 ;
  libTAU::torrent_flags_t *argp2 ;
  libTAU::torrent_flags_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  argp2 = *(libTAU::torrent_flags_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::torrent_flags_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(libTAU::torrent_flags_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::torrent_flags_t");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->set_flags(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1set_1flags_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::torrent_flags_t arg2 ;
  libTAU::torrent_flags_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  argp2 = *(libTAU::torrent_flags_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::torrent_flags_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->set_flags(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1unset_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::torrent_flags_t arg2 ;
  libTAU::torrent_flags_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  argp2 = *(libTAU::torrent_flags_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::torrent_flags_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->unset_flags(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1flush_1cache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->flush_cache();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1force_1recheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->force_recheck();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1flush_1disk_1cache_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::resume_data_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::resume_data_flags_tag > *)&libTAU::torrent_handle::flush_disk_cache;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::resume_data_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1save_1info_1dict_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::resume_data_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::resume_data_flags_tag > *)&libTAU::torrent_handle::save_info_dict;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::resume_data_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1only_1if_1modified_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::resume_data_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::resume_data_flags_tag > *)&libTAU::torrent_handle::only_if_modified;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::resume_data_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1save_1resume_1data_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::resume_data_flags_t arg2 ;
  libTAU::resume_data_flags_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  argp2 = *(libTAU::resume_data_flags_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::resume_data_flags_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->save_resume_data(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1save_1resume_1data_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->save_resume_data();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1need_1save_1resume_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::torrent_handle const *)arg1)->need_save_resume_data();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1queue_1position_1up(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->queue_position_up();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1queue_1position_1down(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->queue_position_down();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1queue_1position_1top(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->queue_position_top();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1queue_1position_1bottom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->queue_position_bottom();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1set_1ssl_1certificate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      (arg1)->set_ssl_certificate((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1set_1ssl_1certificate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      (arg1)->set_ssl_certificate((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1piece_1layers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< std::vector< libTAU::sha256_hash > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_handle const *)arg1)->piece_layers();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::vector< libTAU::sha256_hash > > **)&jresult = new std::vector< std::vector< libTAU::sha256_hash > >((const std::vector< std::vector< libTAU::sha256_hash > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1piece_1availability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > & reference is null");
    return ;
  } 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->piece_availability(*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1ignore_1min_1interval_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::reannounce_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::reannounce_flags_tag > *)&libTAU::torrent_handle::ignore_min_interval;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::reannounce_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1force_1reannounce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int arg2 ;
  int arg3 ;
  libTAU::reannounce_flags_t arg4 ;
  libTAU::reannounce_flags_t *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = *(libTAU::reannounce_flags_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::reannounce_flags_t");
    return ;
  }
  arg4 = *argp4; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->force_reannounce(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1force_1reannounce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->force_reannounce(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1force_1reannounce_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->force_reannounce(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1force_1reannounce_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->force_reannounce();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1force_1dht_1announce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->force_dht_announce();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1force_1lsd_1announce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->force_lsd_announce();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1scrape_1tracker_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->scrape_tracker(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1scrape_1tracker_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->scrape_tracker();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1set_1upload_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->set_upload_limit(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1upload_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = (int)((libTAU::torrent_handle const *)arg1)->upload_limit();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1set_1download_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->set_download_limit(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1download_1limit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = (int)((libTAU::torrent_handle const *)arg1)->download_limit();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1connect_1peer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::tcp::endpoint *arg2 = 0 ;
  libTAU::peer_source_flags_t arg3 ;
  libTAU::pex_flags_t arg4 ;
  libTAU::peer_source_flags_t *argp3 ;
  libTAU::pex_flags_t *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(libTAU::tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::tcp::endpoint const & reference is null");
    return ;
  } 
  argp3 = *(libTAU::peer_source_flags_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::peer_source_flags_t");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(libTAU::pex_flags_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::pex_flags_t");
    return ;
  }
  arg4 = *argp4; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->connect_peer((libTAU::tcp::endpoint const &)*arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1connect_1peer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::tcp::endpoint *arg2 = 0 ;
  libTAU::peer_source_flags_t arg3 ;
  libTAU::peer_source_flags_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(libTAU::tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::tcp::endpoint const & reference is null");
    return ;
  } 
  argp3 = *(libTAU::peer_source_flags_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::peer_source_flags_t");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->connect_peer((libTAU::tcp::endpoint const &)*arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1connect_1peer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::tcp::endpoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(libTAU::tcp::endpoint **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::tcp::endpoint const & reference is null");
    return ;
  } 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->connect_peer((libTAU::tcp::endpoint const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1clear_1peers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      (arg1)->clear_peers();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1set_1max_1uploads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->set_max_uploads(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1max_1uploads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = (int)((libTAU::torrent_handle const *)arg1)->max_uploads();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1set_1max_1connections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->set_max_connections(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1max_1connections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = (int)((libTAU::torrent_handle const *)arg1)->max_connections();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1move_1storage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  libTAU::move_flags_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (libTAU::move_flags_t)jarg3; 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->move_storage((std::string const &)*arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1move_1storage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->move_storage((std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1rename_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jstring jarg3) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  file_index_t arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      ((libTAU::torrent_handle const *)arg1)->rename_file(arg2,(std::string const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1info_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::sha1_hash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_handle const *)arg1)->info_hash();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::sha1_hash **)&jresult = new libTAU::sha1_hash((const libTAU::sha1_hash &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1info_1hashes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::info_hash_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_handle const *)arg1)->info_hashes();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::info_hash_t **)&jresult = new libTAU::info_hash_t((const libTAU::info_hash_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::torrent_handle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(libTAU::torrent_handle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::torrent_handle const *)arg1)->operator ==((libTAU::torrent_handle const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::torrent_handle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(libTAU::torrent_handle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::torrent_handle const *)arg1)->operator !=((libTAU::torrent_handle const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::torrent_handle *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(libTAU::torrent_handle **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::torrent_handle const *)arg1)->operator <((libTAU::torrent_handle const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((libTAU::torrent_handle const *)arg1)->id();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1userdata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::client_data_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_handle const *)arg1)->userdata();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::client_data_t **)&jresult = new libTAU::client_data_t((const libTAU::client_data_t &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1in_1session(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::torrent_handle const *)arg1)->in_session();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1add_1piece_1bytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int arg2 ;
  std::vector< int8_t > *arg3 = 0 ;
  libTAU::add_piece_flags_t arg4 ;
  libTAU::add_piece_flags_t *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< int8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > const & reference is null");
    return ;
  } 
  argp4 = *(libTAU::add_piece_flags_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::add_piece_flags_t");
    return ;
  }
  arg4 = *argp4; 
  {
    try {
      libTAU_torrent_handle_add_piece_bytes__SWIG_0(arg1,arg2,(std::vector< signed char > const &)*arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1add_1piece_1bytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int arg2 ;
  std::vector< int8_t > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< int8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > const & reference is null");
    return ;
  } 
  {
    try {
      libTAU_torrent_handle_add_piece_bytes__SWIG_0(arg1,arg2,(std::vector< signed char > const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1torrent_1file_1ptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = (libTAU::torrent_info *)libTAU_torrent_handle_torrent_file_ptr(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1torrent_1file_1with_1hashes_1ptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  libTAU::torrent_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = (libTAU::torrent_info *)libTAU_torrent_handle_torrent_file_with_hashes_ptr(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::torrent_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1get_1url_1seeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = libTAU_torrent_handle_get_url_seeds((libTAU::torrent_handle const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1set_1ssl_1certificate_1buffer_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  std::vector< int8_t > *arg3 = 0 ;
  std::vector< int8_t > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > const & reference is null");
    return ;
  } 
  arg3 = *(std::vector< int8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > const & reference is null");
    return ;
  } 
  arg4 = *(std::vector< int8_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > const & reference is null");
    return ;
  } 
  {
    try {
      libTAU_torrent_handle_set_ssl_certificate_buffer_ex(arg1,(std::vector< signed char > const &)*arg2,(std::vector< signed char > const &)*arg3,(std::vector< signed char > const &)*arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1queue_1position_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = (int)libTAU_torrent_handle_queue_position_ex((libTAU::torrent_handle const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1queue_1position_1set_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      libTAU_torrent_handle_queue_position_set_ex(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jbyte JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1piece_1priority_1ex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jbyte jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  piece_index_t arg2 ;
  std::int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (std::int8_t)libTAU_torrent_handle_piece_priority_ex__SWIG_0(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1piece_1priority_1ex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jbyte jarg3) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  piece_index_t arg2 ;
  std::int8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  arg3 = (std::int8_t)jarg3; 
  {
    try {
      libTAU_torrent_handle_piece_priority_ex__SWIG_1(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1prioritize_1pieces_1ex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< std::int8_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > const & reference is null");
    return ;
  } 
  {
    try {
      libTAU_torrent_handle_prioritize_pieces_ex__SWIG_0(arg1,(std::vector< signed char > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1prioritize_1pieces_1ex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< std::pair< int,std::int8_t > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< std::pair< int,std::int8_t > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,std::int8_t > > const & reference is null");
    return ;
  } 
  {
    try {
      libTAU_torrent_handle_prioritize_pieces_ex__SWIG_1(arg1,(std::vector< std::pair< int,signed char > > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1get_1piece_1priorities_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = libTAU_torrent_handle_get_piece_priorities_ex((libTAU::torrent_handle const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1file_1priority_1ex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jbyte jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  file_index_t arg2 ;
  std::int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (std::int8_t)libTAU_torrent_handle_file_priority_ex__SWIG_0(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1file_1priority_1ex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jbyte jarg3) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  file_index_t arg2 ;
  std::int8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  arg3 = (std::int8_t)jarg3; 
  {
    try {
      libTAU_torrent_handle_file_priority_ex__SWIG_1(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1prioritize_1files_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< std::int8_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > const & reference is null");
    return ;
  } 
  {
    try {
      libTAU_torrent_handle_prioritize_files_ex(arg1,(std::vector< signed char > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1handle_1get_1file_1priorities_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      result = libTAU_torrent_handle_get_file_priorities_ex((libTAU::torrent_handle const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1torrent_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::torrent_handle *arg1 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::torrent_handle **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1add_1piece_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1piece_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1piece_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1piece_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1piece_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1piece_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1piece_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1piece_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1piece_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1piece_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1piece_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_add_piece_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1add_1piece_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::add_piece_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1deadline_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_deadline_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_deadline_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_deadline_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_deadline_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_deadline_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_deadline_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_deadline_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_deadline_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_deadline_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_deadline_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_deadline_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1deadline_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::deadline_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1file_1progress_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1progress_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1progress_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1progress_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1progress_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1progress_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1progress_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1progress_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1progress_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1progress_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1progress_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_file_progress_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1file_1progress_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::file_progress_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1pause_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pause_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pause_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pause_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pause_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pause_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pause_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pause_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pause_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pause_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_pause_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_pause_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1pause_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::pause_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1resume_1data_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_resume_1data_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_resume_1data_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_resume_1data_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_resume_1data_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_resume_1data_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_resume_1data_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_resume_1data_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_resume_1data_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_resume_1data_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_resume_1data_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_resume_data_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1resume_1data_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::resume_data_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1reannounce_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reannounce_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reannounce_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reannounce_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reannounce_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reannounce_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reannounce_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reannounce_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reannounce_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reannounce_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reannounce_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reannounce_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1reannounce_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reannounce_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1status_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_status_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_status_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_status_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_status_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_status_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_status_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_status_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_status_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_status_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_status_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_status_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1status_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::status_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_counters_1num_1checking_1torrents_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::counters::stats_gauge_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::counters::stats_gauge_t)libTAU::counters::num_checking_torrents;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_counters_1num_1gauges_1counters_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::counters::stats_gauge_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::counters::stats_gauge_t)libTAU::counters::num_gauges_counters;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1counters_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::counters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::counters *)new libTAU::counters();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::counters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1counters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::counters *arg1 = 0 ;
  libTAU::counters *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::counters **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::counters const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::counters *)new libTAU::counters((libTAU::counters const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::counters **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_counters_1inc_1stats_1counter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  libTAU::counters *arg1 = (libTAU::counters *) 0 ;
  int arg2 ;
  std::int64_t arg3 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::counters **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::int64_t)jarg3; 
  {
    try {
      result = (std::int64_t)(arg1)->inc_stats_counter(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_counters_1inc_1stats_1counter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libTAU::counters *arg1 = (libTAU::counters *) 0 ;
  int arg2 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::counters **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (std::int64_t)(arg1)->inc_stats_counter(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_counters_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libTAU::counters *arg1 = (libTAU::counters *) 0 ;
  int arg2 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::counters **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (std::int64_t)((libTAU::counters const *)arg1)->operator [](arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_counters_1set_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  libTAU::counters *arg1 = (libTAU::counters *) 0 ;
  int arg2 ;
  std::int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::counters **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::int64_t)jarg3; 
  {
    try {
      (arg1)->set_value(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_counters_1blend_1stats_1counter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  libTAU::counters *arg1 = (libTAU::counters *) 0 ;
  int arg2 ;
  std::int64_t arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::counters **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::int64_t)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      (arg1)->blend_stats_counter(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1counters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::counters *arg1 = (libTAU::counters *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::counters **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1invalid_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::piece_block *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::piece_block *)&libTAU::piece_block::invalid;
  *(libTAU::piece_block **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1piece_1block_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::piece_block *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::piece_block *)new libTAU::piece_block();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::piece_block **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1piece_1block_1_1SWIG_11(JNIEnv *jenv, jclass jcls, int jarg1, jint jarg2) {
  jlong jresult = 0 ;
  piece_index_t arg1 ;
  int arg2 ;
  libTAU::piece_block *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1 = piece_index_t(static_cast<std::int32_t>(jarg1));
  }
  arg2 = (int)jarg2; 
  {
    try {
      result = (libTAU::piece_block *)new libTAU::piece_block(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::piece_block **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1piece_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  libTAU::piece_block *arg1 = (libTAU::piece_block *) 0 ;
  piece_index_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::piece_block **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  if (arg1) (arg1)->piece_index = arg2;
}


SWIGEXPORT int JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1piece_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  int jresult = 0 ;
  libTAU::piece_block *arg1 = (libTAU::piece_block *) 0 ;
  piece_index_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::piece_block **)&jarg1; 
  result =  ((arg1)->piece_index);
  {
    jresult = static_cast<std::int32_t>(static_cast<std::int32_t>(result));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1block_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::piece_block *arg1 = (libTAU::piece_block *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::piece_block **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->block_index = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1block_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::piece_block *arg1 = (libTAU::piece_block *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::piece_block **)&jarg1; 
  result = (int) ((arg1)->block_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::piece_block *arg1 = (libTAU::piece_block *) 0 ;
  libTAU::piece_block *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::piece_block **)&jarg1; 
  arg2 = *(libTAU::piece_block **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::piece_block const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::piece_block const *)arg1)->operator <((libTAU::piece_block const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::piece_block *arg1 = (libTAU::piece_block *) 0 ;
  libTAU::piece_block *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::piece_block **)&jarg1; 
  arg2 = *(libTAU::piece_block **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::piece_block const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::piece_block const *)arg1)->operator ==((libTAU::piece_block const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1block_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::piece_block *arg1 = (libTAU::piece_block *) 0 ;
  libTAU::piece_block *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::piece_block **)&jarg1; 
  arg2 = *(libTAU::piece_block **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::piece_block const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::piece_block const *)arg1)->operator !=((libTAU::piece_block const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1piece_1block(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::piece_block *arg1 = (libTAU::piece_block *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::piece_block **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  libTAU::entry::data_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::entry **)&jarg1; 
  {
    try {
      result = (libTAU::entry::data_type)((libTAU::entry const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1entry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::entry::dictionary_type arg1 ;
  libTAU::entry::dictionary_type *argp1 ;
  libTAU::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(libTAU::entry::dictionary_type **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::entry::dictionary_type");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (libTAU::entry *)new libTAU::entry(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1entry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  libTAU::entry::string_type arg1 ;
  libTAU::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (libTAU::entry *)new libTAU::entry(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1entry_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::entry::list_type arg1 ;
  libTAU::entry::list_type *argp1 ;
  libTAU::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(libTAU::entry::list_type **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::entry::list_type");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (libTAU::entry *)new libTAU::entry(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1entry_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  libTAU::entry::integer_type arg1 ;
  libTAU::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (libTAU::entry::integer_type)jarg1; 
  {
    try {
      result = (libTAU::entry *)new libTAU::entry(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1entry_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  libTAU::entry::data_type arg1 ;
  libTAU::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (libTAU::entry::data_type)jarg1; 
  {
    try {
      result = (libTAU::entry *)new libTAU::entry(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1entry_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::entry *arg1 = 0 ;
  libTAU::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::entry **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::entry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::entry *)new libTAU::entry((libTAU::entry const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1entry_1_1SWIG_16(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::entry *)new libTAU::entry();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1integer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  libTAU::entry::integer_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::entry **)&jarg1; 
  {
    try {
      result = (libTAU::entry::integer_type *) &((libTAU::entry const *)arg1)->integer();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  libTAU::entry::string_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::entry **)&jarg1; 
  {
    try {
      result = (libTAU::entry::string_type *) &((libTAU::entry const *)arg1)->string();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  libTAU::entry::list_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::entry **)&jarg1; 
  {
    try {
      result = (libTAU::entry::list_type *) &(arg1)->list();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry::list_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1dict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  libTAU::entry::dictionary_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::entry **)&jarg1; 
  {
    try {
      result = (libTAU::entry::dictionary_type *) &(arg1)->dict();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry::dictionary_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::entry **)&jarg1; 
  {
    try {
      result = ((libTAU::entry const *)arg1)->to_string();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  std::string *arg2 = 0 ;
  libTAU::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (libTAU::entry *) &libTAU_entry_get(arg1,(std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      libTAU_entry_set__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int8_t > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libTAU::entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< int8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > const & reference is null");
    return ;
  } 
  {
    try {
      libTAU_entry_set__SWIG_1(arg1,(std::string const &)*arg2,(std::vector< signed char > const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1set_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  std::string *arg2 = 0 ;
  long long *arg3 = 0 ;
  long long temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (long long)jarg3; 
  arg3 = &temp3; 
  {
    try {
      libTAU_entry_set__SWIG_2(arg1,(std::string const &)*arg2,(long long const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1set_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  std::string *arg2 = 0 ;
  libTAU::entry *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libTAU::entry **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(libTAU::entry **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::entry const & reference is null");
    return ;
  } 
  {
    try {
      libTAU_entry_set__SWIG_3(arg1,(std::string const &)*arg2,(libTAU::entry const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1string_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  std::vector< int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::entry **)&jarg1; 
  {
    try {
      result = libTAU_entry_string_bytes(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< int8_t > **)&jresult = new std::vector< int8_t >((const std::vector< int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1preformatted_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  std::vector< int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::entry **)&jarg1; 
  {
    try {
      result = libTAU_entry_preformatted_bytes(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< int8_t > **)&jresult = new std::vector< int8_t >((const std::vector< int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1bencode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  std::vector< int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::entry **)&jarg1; 
  {
    try {
      result = libTAU_entry_bencode(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< int8_t > **)&jresult = new std::vector< int8_t >((const std::vector< int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1from_1string_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int8_t > *arg1 = 0 ;
  libTAU::entry result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > const & reference is null");
    return 0;
  } 
  {
    try {
      result = libTAU_entry_from_string_bytes((std::vector< signed char > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = new libTAU::entry((const libTAU::entry &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1from_1preformatted_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int8_t > *arg1 = 0 ;
  libTAU::entry result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > const & reference is null");
    return 0;
  } 
  {
    try {
      result = libTAU_entry_from_preformatted_bytes((std::vector< signed char > const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = new libTAU::entry((const libTAU::entry &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_entry_1bdecode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int8_t > *arg1 = 0 ;
  libTAU::entry result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  {
    try {
      result = libTAU_entry_bdecode(*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = new libTAU::entry((const libTAU::entry &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::entry *arg1 = (libTAU::entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::entry **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_error_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::error;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::peer;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_port_1mapping_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::port_mapping;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_storage_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::storage;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_tracker_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::tracker;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_connect_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::connect;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_status_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::status;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1block_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::ip_block;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_performance_1warning_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::performance_warning;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::dht;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::stats;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1log_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::session_log;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1log_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::torrent_log;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1log_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::peer_log;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_incoming_1request_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::incoming_request;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1log_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::dht_log;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1operation_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::dht_operation;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_port_1mapping_1log_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::port_mapping_log;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::picker_log;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_file_1progress_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::file_progress;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_piece_1progress_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::piece_progress;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_upload_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::upload;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_block_1progress_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::block_progress;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::communication;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1log_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::alert_category_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::alert_category_t *)&libTAU::alert_category::communication_log;
  *(libTAU::alert_category_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1error_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::error_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1peer_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::peer_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1port_1mapping_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::port_mapping_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1storage_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::storage_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1tracker_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::tracker_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1connect_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::connect_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1status_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::status_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1ip_1block_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::ip_block_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1performance_1warning_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::performance_warning;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1dht_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::dht_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1session_1log_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::session_log_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1torrent_1log_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::torrent_log_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1peer_1log_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::peer_log_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1incoming_1request_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::incoming_request_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1dht_1log_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::dht_log_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1dht_1operation_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::dht_operation_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1port_1mapping_1log_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::port_mapping_log_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1picker_1log_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::picker_log_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1file_1progress_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::file_progress_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1piece_1progress_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::piece_progress_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1upload_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::upload_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1block_1progress_1notification_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::block_progress_notification;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1all_1categories_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alert::all_categories;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = ((libTAU::alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = ((libTAU::alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1get_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (std::int64_t)libTAU_alert_get_timestamp(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1udp_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::udp_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::udp_error_alert *)libTAU_alert_cast_to_udp_error_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::udp_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1external_1ip_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::external_ip_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::external_ip_alert *)libTAU_alert_cast_to_external_ip_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::external_ip_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1listen_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::listen_failed_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::listen_failed_alert *)libTAU_alert_cast_to_listen_failed_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::listen_failed_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1listen_1succeeded_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::listen_succeeded_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::listen_succeeded_alert *)libTAU_alert_cast_to_listen_succeeded_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::listen_succeeded_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1portmap_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::portmap_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::portmap_error_alert *)libTAU_alert_cast_to_portmap_error_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::portmap_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1portmap_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::portmap_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::portmap_alert *)libTAU_alert_cast_to_portmap_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::portmap_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1portmap_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::portmap_log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::portmap_log_alert *)libTAU_alert_cast_to_portmap_log_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::portmap_log_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1announce_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_announce_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_announce_alert *)libTAU_alert_cast_to_dht_announce_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_announce_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1get_1peers_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_get_peers_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_get_peers_alert *)libTAU_alert_cast_to_dht_get_peers_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_get_peers_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1bootstrap_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_bootstrap_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_bootstrap_alert *)libTAU_alert_cast_to_dht_bootstrap_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_bootstrap_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1session_1start_1over_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::session_start_over_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::session_start_over_alert *)libTAU_alert_cast_to_session_start_over_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_start_over_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1session_1stop_1over_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::session_stop_over_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::session_stop_over_alert *)libTAU_alert_cast_to_session_stop_over_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_stop_over_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1incoming_1connection_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::incoming_connection_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::incoming_connection_alert *)libTAU_alert_cast_to_incoming_connection_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::incoming_connection_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1state_1update_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::state_update_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::state_update_alert *)libTAU_alert_cast_to_state_update_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::state_update_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1session_1stats_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::session_stats_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::session_stats_alert *)libTAU_alert_cast_to_session_stats_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_stats_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_error_alert *)libTAU_alert_cast_to_dht_error_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1immutable_1item_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_immutable_item_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_immutable_item_alert *)libTAU_alert_cast_to_dht_immutable_item_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_immutable_item_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1mutable_1item_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_mutable_item_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_mutable_item_alert *)libTAU_alert_cast_to_dht_mutable_item_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_mutable_item_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1put_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_put_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_put_alert *)libTAU_alert_cast_to_dht_put_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_put_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1outgoing_1get_1peers_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_outgoing_get_peers_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_outgoing_get_peers_alert *)libTAU_alert_cast_to_dht_outgoing_get_peers_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_outgoing_get_peers_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::log_alert *)libTAU_alert_cast_to_log_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::log_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1peer_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::peer_log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::peer_log_alert *)libTAU_alert_cast_to_peer_log_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::peer_log_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1stats_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_stats_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_stats_alert *)libTAU_alert_cast_to_dht_stats_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_stats_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_log_alert *)libTAU_alert_cast_to_dht_log_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_log_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1pkt_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_pkt_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_pkt_alert *)libTAU_alert_cast_to_dht_pkt_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_pkt_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1get_1peers_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_get_peers_reply_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_get_peers_reply_alert *)libTAU_alert_cast_to_dht_get_peers_reply_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_get_peers_reply_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1direct_1response_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_direct_response_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_direct_response_alert *)libTAU_alert_cast_to_dht_direct_response_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_direct_response_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1picker_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::picker_log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::picker_log_alert *)libTAU_alert_cast_to_picker_log_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::picker_log_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1session_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::session_error_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::session_error_alert *)libTAU_alert_cast_to_session_error_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_error_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1live_1nodes_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_live_nodes_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_live_nodes_alert *)libTAU_alert_cast_to_dht_live_nodes_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_live_nodes_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1session_1stats_1header_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::session_stats_header_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::session_stats_header_alert *)libTAU_alert_cast_to_session_stats_header_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_stats_header_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1dht_1sample_1infohashes_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::dht_sample_infohashes_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::dht_sample_infohashes_alert *)libTAU_alert_cast_to_dht_sample_infohashes_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_sample_infohashes_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1alerts_1dropped_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::alerts_dropped_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::alerts_dropped_alert *)libTAU_alert_cast_to_alerts_dropped_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alerts_dropped_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1socks5_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::socks5_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::socks5_alert *)libTAU_alert_cast_to_socks5_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::socks5_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1communication_1new_1device_1id_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::communication_new_device_id_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::communication_new_device_id_alert *)libTAU_alert_cast_to_communication_new_device_id_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::communication_new_device_id_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1communication_1new_1message_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::communication_new_message_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::communication_new_message_alert *)libTAU_alert_cast_to_communication_new_message_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::communication_new_message_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1communication_1confirmation_1root_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::communication_confirmation_root_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::communication_confirmation_root_alert *)libTAU_alert_cast_to_communication_confirmation_root_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::communication_confirmation_root_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1communication_1syncing_1message_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::communication_syncing_message_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::communication_syncing_message_alert *)libTAU_alert_cast_to_communication_syncing_message_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::communication_syncing_message_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1communication_1friend_1info_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::communication_friend_info_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::communication_friend_info_alert *)libTAU_alert_cast_to_communication_friend_info_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::communication_friend_info_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1communication_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::communication_log_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::communication_log_alert *)libTAU_alert_cast_to_communication_log_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::communication_log_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1cast_1to_1communication_1last_1seen_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alert *arg1 = (libTAU::alert *) 0 ;
  libTAU::communication_last_seen_alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alert **)&jarg1; 
  {
    try {
      result = (libTAU::communication_last_seen_alert *)libTAU_alert_cast_to_communication_last_seen_alert((libTAU::alert const *)arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::communication_last_seen_alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1alert_1category_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *)new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1category_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1category_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1category_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1category_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1category_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1category_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1category_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1category_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1category_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1category_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_alert_category_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1alert_1category_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::alert_category_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1name(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (char *)libTAU::alert_name(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_user_1alert_1id_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::user_alert_id;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_num_1alert_1types_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::num_alert_types;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_abi_1alert_1count_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::abi_alert_count;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1priority_1normal_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::alert_priority)libTAU::alert_priority::normal;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1num_1nodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_routing_bucket *arg1 = (libTAU::dht_routing_bucket *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_routing_bucket **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_nodes = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1num_1nodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_routing_bucket *arg1 = (libTAU::dht_routing_bucket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_routing_bucket **)&jarg1; 
  result = (int) ((arg1)->num_nodes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1num_1replacements_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_routing_bucket *arg1 = (libTAU::dht_routing_bucket *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_routing_bucket **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_replacements = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1num_1replacements_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_routing_bucket *arg1 = (libTAU::dht_routing_bucket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_routing_bucket **)&jarg1; 
  result = (int) ((arg1)->num_replacements);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1last_1active_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_routing_bucket *arg1 = (libTAU::dht_routing_bucket *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_routing_bucket **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->last_active = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1routing_1bucket_1last_1active_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_routing_bucket *arg1 = (libTAU::dht_routing_bucket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_routing_bucket **)&jarg1; 
  result = (int) ((arg1)->last_active);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1dht_1routing_1bucket(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::dht_routing_bucket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::dht_routing_bucket *)new libTAU::dht_routing_bucket();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_routing_bucket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1routing_1bucket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_routing_bucket *arg1 = (libTAU::dht_routing_bucket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_routing_bucket **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::torrent_alert *arg1 = (libTAU::torrent_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::torrent_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1alert_1handle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::torrent_alert *arg1 = (libTAU::torrent_alert *) 0 ;
  libTAU::torrent_handle *arg2 = (libTAU::torrent_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::torrent_alert **)&jarg1; 
  arg2 = *(libTAU::torrent_handle **)&jarg2; 
  if (arg1) (arg1)->handle = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1alert_1handle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_alert *arg1 = (libTAU::torrent_alert *) 0 ;
  libTAU::torrent_handle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_alert **)&jarg1; 
  result = (libTAU::torrent_handle *)& ((arg1)->handle);
  *(libTAU::torrent_handle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1alert_1torrent_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::torrent_alert *arg1 = (libTAU::torrent_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::torrent_alert const *)arg1)->torrent_name();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1torrent_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::torrent_alert *arg1 = (libTAU::torrent_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::torrent_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::peer_alert *arg1 = (libTAU::peer_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::peer_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1alert_1pid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::peer_alert *arg1 = (libTAU::peer_alert *) 0 ;
  libTAU::peer_id *arg2 = (libTAU::peer_id *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::peer_alert **)&jarg1; 
  arg2 = *(libTAU::peer_id **)&jarg2; 
  if (arg1) (arg1)->pid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1alert_1pid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_alert *arg1 = (libTAU::peer_alert *) 0 ;
  libTAU::peer_id *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_alert **)&jarg1; 
  result = (libTAU::peer_id *)& ((arg1)->pid);
  *(libTAU::peer_id **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1alert_1get_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_alert *arg1 = (libTAU::peer_alert *) 0 ;
  libTAU::tcp::endpoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_alert **)&jarg1; 
  {
    try {
      result = libTAU_peer_alert_get_endpoint(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::tcp::endpoint **)&jresult = new libTAU::tcp::endpoint((const libTAU::tcp::endpoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1peer_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::peer_alert *arg1 = (libTAU::peer_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::peer_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1error_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::udp_error_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1error_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::udp_error_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1error_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::udp_error_alert *arg1 = (libTAU::udp_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::udp_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::udp_error_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1error_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::udp_error_alert *arg1 = (libTAU::udp_error_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::udp_error_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::udp_error_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1error_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::udp_error_alert *arg1 = (libTAU::udp_error_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::udp_error_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::udp_error_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1error_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::udp_error_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1error_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::udp_error_alert *arg1 = (libTAU::udp_error_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::udp_error_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::udp_error_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1error_1alert_1operation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::udp_error_alert *arg1 = (libTAU::udp_error_alert *) 0 ;
  libTAU::operation_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::udp_error_alert **)&jarg1; 
  arg2 = (libTAU::operation_t)jarg2; 
  if (arg1) (arg1)->operation = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1error_1alert_1operation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::udp_error_alert *arg1 = (libTAU::udp_error_alert *) 0 ;
  libTAU::operation_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::udp_error_alert **)&jarg1; 
  result = (libTAU::operation_t) ((arg1)->operation);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1error_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::udp_error_alert *arg1 = (libTAU::udp_error_alert *) 0 ;
  libTAU::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::udp_error_alert **)&jarg1; 
  result = (libTAU::error_code *)& ((arg1)->error);
  *(libTAU::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1error_1alert_1get_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::udp_error_alert *arg1 = (libTAU::udp_error_alert *) 0 ;
  libTAU::udp::endpoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::udp_error_alert **)&jarg1; 
  {
    try {
      result = libTAU_udp_error_alert_get_endpoint(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::udp::endpoint **)&jresult = new libTAU::udp::endpoint((const libTAU::udp::endpoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1udp_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::udp_error_alert *arg1 = (libTAU::udp_error_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::udp_error_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_external_1ip_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::external_ip_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_external_1ip_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::external_ip_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_external_1ip_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::external_ip_alert *arg1 = (libTAU::external_ip_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::external_ip_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::external_ip_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_external_1ip_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::external_ip_alert *arg1 = (libTAU::external_ip_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::external_ip_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::external_ip_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_external_1ip_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::external_ip_alert *arg1 = (libTAU::external_ip_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::external_ip_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::external_ip_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_external_1ip_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::external_ip_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_external_1ip_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::external_ip_alert *arg1 = (libTAU::external_ip_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::external_ip_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::external_ip_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_external_1ip_1alert_1get_1external_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::external_ip_alert *arg1 = (libTAU::external_ip_alert *) 0 ;
  libTAU::address result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::external_ip_alert **)&jarg1; 
  {
    try {
      result = libTAU_external_ip_alert_get_external_address(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::address **)&jresult = new libTAU::address((const libTAU::address &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1external_1ip_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::external_ip_alert *arg1 = (libTAU::external_ip_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::external_ip_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::listen_failed_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::listen_failed_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::listen_failed_alert *arg1 = (libTAU::listen_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_failed_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::listen_failed_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::listen_failed_alert *arg1 = (libTAU::listen_failed_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_failed_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::listen_failed_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::listen_failed_alert *arg1 = (libTAU::listen_failed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_failed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::listen_failed_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::listen_failed_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::listen_failed_alert *arg1 = (libTAU::listen_failed_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_failed_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::listen_failed_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1listen_1interface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::listen_failed_alert *arg1 = (libTAU::listen_failed_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_failed_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::listen_failed_alert const *)arg1)->listen_interface();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::listen_failed_alert *arg1 = (libTAU::listen_failed_alert *) 0 ;
  libTAU::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_failed_alert **)&jarg1; 
  result = (libTAU::error_code *)& ((arg1)->error);
  *(libTAU::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1op_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::listen_failed_alert *arg1 = (libTAU::listen_failed_alert *) 0 ;
  libTAU::operation_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_failed_alert **)&jarg1; 
  arg2 = (libTAU::operation_t)jarg2; 
  if (arg1) (arg1)->op = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1op_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::listen_failed_alert *arg1 = (libTAU::listen_failed_alert *) 0 ;
  libTAU::operation_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_failed_alert **)&jarg1; 
  result = (libTAU::operation_t) ((arg1)->op);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::listen_failed_alert *arg1 = (libTAU::listen_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_failed_alert **)&jarg1; 
  result = (int)(int) ((arg1)->port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1get_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::listen_failed_alert *arg1 = (libTAU::listen_failed_alert *) 0 ;
  libTAU::address result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_failed_alert **)&jarg1; 
  {
    try {
      result = libTAU_listen_failed_alert_get_address(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::address **)&jresult = new libTAU::address((const libTAU::address &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1get_1socket_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::listen_failed_alert *arg1 = (libTAU::listen_failed_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_failed_alert **)&jarg1; 
  {
    try {
      result = (int)libTAU_listen_failed_alert_get_socket_type(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1listen_1failed_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::listen_failed_alert *arg1 = (libTAU::listen_failed_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::listen_failed_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1succeeded_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::listen_succeeded_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1succeeded_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::listen_succeeded_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1succeeded_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::listen_succeeded_alert *arg1 = (libTAU::listen_succeeded_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_succeeded_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::listen_succeeded_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1succeeded_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::listen_succeeded_alert *arg1 = (libTAU::listen_succeeded_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_succeeded_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::listen_succeeded_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1succeeded_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::listen_succeeded_alert *arg1 = (libTAU::listen_succeeded_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_succeeded_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::listen_succeeded_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1succeeded_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::listen_succeeded_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1succeeded_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::listen_succeeded_alert *arg1 = (libTAU::listen_succeeded_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_succeeded_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::listen_succeeded_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1succeeded_1alert_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::listen_succeeded_alert *arg1 = (libTAU::listen_succeeded_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_succeeded_alert **)&jarg1; 
  result = (int)(int) ((arg1)->port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1succeeded_1alert_1get_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::listen_succeeded_alert *arg1 = (libTAU::listen_succeeded_alert *) 0 ;
  libTAU::address result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_succeeded_alert **)&jarg1; 
  {
    try {
      result = libTAU_listen_succeeded_alert_get_address(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::address **)&jresult = new libTAU::address((const libTAU::address &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1succeeded_1alert_1get_1socket_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::listen_succeeded_alert *arg1 = (libTAU::listen_succeeded_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::listen_succeeded_alert **)&jarg1; 
  {
    try {
      result = (int)libTAU_listen_succeeded_alert_get_socket_type(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1listen_1succeeded_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::listen_succeeded_alert *arg1 = (libTAU::listen_succeeded_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::listen_succeeded_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1error_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::portmap_error_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1error_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::portmap_error_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1error_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::portmap_error_alert *arg1 = (libTAU::portmap_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::portmap_error_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1error_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::portmap_error_alert *arg1 = (libTAU::portmap_error_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_error_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::portmap_error_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1error_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::portmap_error_alert *arg1 = (libTAU::portmap_error_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_error_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::portmap_error_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1error_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::portmap_error_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1error_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::portmap_error_alert *arg1 = (libTAU::portmap_error_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_error_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::portmap_error_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1error_1alert_1map_1transport_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::portmap_error_alert *arg1 = (libTAU::portmap_error_alert *) 0 ;
  libTAU::portmap_transport arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_error_alert **)&jarg1; 
  arg2 = (libTAU::portmap_transport)jarg2; 
  if (arg1) (arg1)->map_transport = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1error_1alert_1map_1transport_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::portmap_error_alert *arg1 = (libTAU::portmap_error_alert *) 0 ;
  libTAU::portmap_transport result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_error_alert **)&jarg1; 
  result = (libTAU::portmap_transport) ((arg1)->map_transport);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1error_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::portmap_error_alert *arg1 = (libTAU::portmap_error_alert *) 0 ;
  libTAU::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_error_alert **)&jarg1; 
  result = (libTAU::error_code *)& ((arg1)->error);
  *(libTAU::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1error_1alert_1get_1mapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::portmap_error_alert *arg1 = (libTAU::portmap_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_error_alert **)&jarg1; 
  {
    try {
      result = (int)libTAU_portmap_error_alert_get_mapping(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1portmap_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::portmap_error_alert *arg1 = (libTAU::portmap_error_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::portmap_error_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::portmap_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::portmap_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::portmap_alert *arg1 = (libTAU::portmap_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::portmap_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::portmap_alert *arg1 = (libTAU::portmap_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::portmap_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::portmap_alert *arg1 = (libTAU::portmap_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::portmap_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::portmap_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::portmap_alert *arg1 = (libTAU::portmap_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::portmap_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1alert_1external_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::portmap_alert *arg1 = (libTAU::portmap_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_alert **)&jarg1; 
  result = (int)(int) ((arg1)->external_port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1alert_1map_1protocol_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::portmap_alert *arg1 = (libTAU::portmap_alert *) 0 ;
  libTAU::portmap_protocol result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_alert **)&jarg1; 
  result = (libTAU::portmap_protocol)(libTAU::portmap_protocol) ((arg1)->map_protocol);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1alert_1map_1transport_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::portmap_alert *arg1 = (libTAU::portmap_alert *) 0 ;
  libTAU::portmap_transport result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_alert **)&jarg1; 
  result = (libTAU::portmap_transport)(libTAU::portmap_transport) ((arg1)->map_transport);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1alert_1get_1mapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::portmap_alert *arg1 = (libTAU::portmap_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_alert **)&jarg1; 
  {
    try {
      result = (int)libTAU_portmap_alert_get_mapping(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1portmap_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::portmap_alert *arg1 = (libTAU::portmap_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::portmap_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1log_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::portmap_log_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1log_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::portmap_log_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1log_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::portmap_log_alert *arg1 = (libTAU::portmap_log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_log_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::portmap_log_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1log_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::portmap_log_alert *arg1 = (libTAU::portmap_log_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_log_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::portmap_log_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1log_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::portmap_log_alert *arg1 = (libTAU::portmap_log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::portmap_log_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1log_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::portmap_log_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1log_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::portmap_log_alert *arg1 = (libTAU::portmap_log_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_log_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::portmap_log_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1log_1alert_1map_1transport_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::portmap_log_alert *arg1 = (libTAU::portmap_log_alert *) 0 ;
  libTAU::portmap_transport result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_log_alert **)&jarg1; 
  result = (libTAU::portmap_transport)(libTAU::portmap_transport) ((arg1)->map_transport);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1log_1alert_1log_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::portmap_log_alert *arg1 = (libTAU::portmap_log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::portmap_log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::portmap_log_alert const *)arg1)->log_message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1portmap_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::portmap_log_alert *arg1 = (libTAU::portmap_log_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::portmap_log_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1announce_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_announce_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1announce_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_announce_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1announce_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_announce_alert *arg1 = (libTAU::dht_announce_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_announce_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_announce_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1announce_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_announce_alert *arg1 = (libTAU::dht_announce_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_announce_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_announce_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1announce_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_announce_alert *arg1 = (libTAU::dht_announce_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_announce_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_announce_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1announce_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_announce_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1announce_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_announce_alert *arg1 = (libTAU::dht_announce_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_announce_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_announce_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1announce_1alert_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_announce_alert *arg1 = (libTAU::dht_announce_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_announce_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1announce_1alert_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_announce_alert *arg1 = (libTAU::dht_announce_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_announce_alert **)&jarg1; 
  result = (int) ((arg1)->port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1announce_1alert_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_announce_alert *arg1 = (libTAU::dht_announce_alert *) 0 ;
  libTAU::sha256_hash *arg2 = (libTAU::sha256_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_announce_alert **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1announce_1alert_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_announce_alert *arg1 = (libTAU::dht_announce_alert *) 0 ;
  libTAU::sha256_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_announce_alert **)&jarg1; 
  result = (libTAU::sha256_hash *)& ((arg1)->info_hash);
  *(libTAU::sha256_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1announce_1alert_1get_1ip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_announce_alert *arg1 = (libTAU::dht_announce_alert *) 0 ;
  libTAU::address result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_announce_alert **)&jarg1; 
  {
    try {
      result = libTAU_dht_announce_alert_get_ip(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::address **)&jresult = new libTAU::address((const libTAU::address &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1announce_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_announce_alert *arg1 = (libTAU::dht_announce_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_announce_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_get_peers_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_get_peers_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_get_peers_alert *arg1 = (libTAU::dht_get_peers_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_get_peers_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_get_peers_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_get_peers_alert *arg1 = (libTAU::dht_get_peers_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_get_peers_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_get_peers_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_get_peers_alert *arg1 = (libTAU::dht_get_peers_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_get_peers_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_get_peers_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_get_peers_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_get_peers_alert *arg1 = (libTAU::dht_get_peers_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_get_peers_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_get_peers_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1alert_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_get_peers_alert *arg1 = (libTAU::dht_get_peers_alert *) 0 ;
  libTAU::sha256_hash *arg2 = (libTAU::sha256_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_get_peers_alert **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1alert_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_get_peers_alert *arg1 = (libTAU::dht_get_peers_alert *) 0 ;
  libTAU::sha256_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_get_peers_alert **)&jarg1; 
  result = (libTAU::sha256_hash *)& ((arg1)->info_hash);
  *(libTAU::sha256_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1get_1peers_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_get_peers_alert *arg1 = (libTAU::dht_get_peers_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_get_peers_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1bootstrap_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_bootstrap_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1bootstrap_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_bootstrap_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1bootstrap_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_bootstrap_alert *arg1 = (libTAU::dht_bootstrap_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_bootstrap_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_bootstrap_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1bootstrap_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_bootstrap_alert *arg1 = (libTAU::dht_bootstrap_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_bootstrap_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_bootstrap_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1bootstrap_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_bootstrap_alert *arg1 = (libTAU::dht_bootstrap_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_bootstrap_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_bootstrap_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1bootstrap_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_bootstrap_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1bootstrap_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_bootstrap_alert *arg1 = (libTAU::dht_bootstrap_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_bootstrap_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_bootstrap_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1bootstrap_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_bootstrap_alert *arg1 = (libTAU::dht_bootstrap_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_bootstrap_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1start_1over_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::session_start_over_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1start_1over_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::session_start_over_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1start_1over_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::session_start_over_alert *arg1 = (libTAU::session_start_over_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_start_over_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::session_start_over_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1start_1over_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_start_over_alert *arg1 = (libTAU::session_start_over_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_start_over_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::session_start_over_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1start_1over_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::session_start_over_alert *arg1 = (libTAU::session_start_over_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_start_over_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::session_start_over_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1start_1over_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::session_start_over_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1start_1over_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::session_start_over_alert *arg1 = (libTAU::session_start_over_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_start_over_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::session_start_over_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1start_1over_1alert_1session_1start_1over_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::session_start_over_alert *arg1 = (libTAU::session_start_over_alert *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_start_over_alert **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->session_start_over = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1start_1over_1alert_1session_1start_1over_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::session_start_over_alert *arg1 = (libTAU::session_start_over_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_start_over_alert **)&jarg1; 
  result = (bool) ((arg1)->session_start_over);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1session_1start_1over_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::session_start_over_alert *arg1 = (libTAU::session_start_over_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::session_start_over_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_incoming_1connection_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::incoming_connection_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_incoming_1connection_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::incoming_connection_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_incoming_1connection_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::incoming_connection_alert *arg1 = (libTAU::incoming_connection_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::incoming_connection_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::incoming_connection_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_incoming_1connection_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::incoming_connection_alert *arg1 = (libTAU::incoming_connection_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::incoming_connection_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::incoming_connection_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_incoming_1connection_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::incoming_connection_alert *arg1 = (libTAU::incoming_connection_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::incoming_connection_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::incoming_connection_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_incoming_1connection_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::incoming_connection_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_incoming_1connection_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::incoming_connection_alert *arg1 = (libTAU::incoming_connection_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::incoming_connection_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::incoming_connection_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_incoming_1connection_1alert_1socket_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::incoming_connection_alert *arg1 = (libTAU::incoming_connection_alert *) 0 ;
  libTAU::socket_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::incoming_connection_alert **)&jarg1; 
  arg2 = (libTAU::socket_type_t)jarg2; 
  if (arg1) (arg1)->socket_type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_incoming_1connection_1alert_1socket_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::incoming_connection_alert *arg1 = (libTAU::incoming_connection_alert *) 0 ;
  libTAU::socket_type_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::incoming_connection_alert **)&jarg1; 
  result = (libTAU::socket_type_t) ((arg1)->socket_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_incoming_1connection_1alert_1get_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::incoming_connection_alert *arg1 = (libTAU::incoming_connection_alert *) 0 ;
  libTAU::tcp::endpoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::incoming_connection_alert **)&jarg1; 
  {
    try {
      result = libTAU_incoming_connection_alert_get_endpoint(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::tcp::endpoint **)&jresult = new libTAU::tcp::endpoint((const libTAU::tcp::endpoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1incoming_1connection_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::incoming_connection_alert *arg1 = (libTAU::incoming_connection_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::incoming_connection_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_state_1update_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::state_update_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_state_1update_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::state_update_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_state_1update_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::state_update_alert *arg1 = (libTAU::state_update_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::state_update_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::state_update_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_state_1update_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::state_update_alert *arg1 = (libTAU::state_update_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::state_update_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::state_update_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_state_1update_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::state_update_alert *arg1 = (libTAU::state_update_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::state_update_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::state_update_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_state_1update_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::state_update_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_state_1update_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::state_update_alert *arg1 = (libTAU::state_update_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::state_update_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::state_update_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_state_1update_1alert_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::state_update_alert *arg1 = (libTAU::state_update_alert *) 0 ;
  std::vector< libTAU::torrent_status > *arg2 = (std::vector< libTAU::torrent_status > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::state_update_alert **)&jarg1; 
  arg2 = *(std::vector< libTAU::torrent_status > **)&jarg2; 
  if (arg1) (arg1)->status = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_state_1update_1alert_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::state_update_alert *arg1 = (libTAU::state_update_alert *) 0 ;
  std::vector< libTAU::torrent_status > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::state_update_alert **)&jarg1; 
  result = (std::vector< libTAU::torrent_status > *)& ((arg1)->status);
  *(std::vector< libTAU::torrent_status > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1state_1update_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::state_update_alert *arg1 = (libTAU::state_update_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::state_update_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stop_1over_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::session_stop_over_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stop_1over_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::session_stop_over_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stop_1over_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::session_stop_over_alert *arg1 = (libTAU::session_stop_over_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stop_over_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::session_stop_over_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stop_1over_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_stop_over_alert *arg1 = (libTAU::session_stop_over_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stop_over_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::session_stop_over_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stop_1over_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::session_stop_over_alert *arg1 = (libTAU::session_stop_over_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stop_over_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::session_stop_over_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stop_1over_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::session_stop_over_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stop_1over_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::session_stop_over_alert *arg1 = (libTAU::session_stop_over_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stop_over_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::session_stop_over_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stop_1over_1alert_1session_1stop_1over_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::session_stop_over_alert *arg1 = (libTAU::session_stop_over_alert *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stop_over_alert **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->session_stop_over = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stop_1over_1alert_1session_1stop_1over_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::session_stop_over_alert *arg1 = (libTAU::session_stop_over_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stop_over_alert **)&jarg1; 
  result = (bool) ((arg1)->session_stop_over);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1session_1stop_1over_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::session_stop_over_alert *arg1 = (libTAU::session_stop_over_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::session_stop_over_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::session_stats_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::session_stats_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::session_stats_alert *arg1 = (libTAU::session_stats_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stats_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::session_stats_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_stats_alert *arg1 = (libTAU::session_stats_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stats_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::session_stats_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::session_stats_alert *arg1 = (libTAU::session_stats_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stats_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::session_stats_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::session_stats_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::session_stats_alert *arg1 = (libTAU::session_stats_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stats_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::session_stats_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1alert_1get_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libTAU::session_stats_alert *arg1 = (libTAU::session_stats_alert *) 0 ;
  int arg2 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stats_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (long long)libTAU_session_stats_alert_get_value(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1session_1stats_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::session_stats_alert *arg1 = (libTAU::session_stats_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::session_stats_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1error_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_error_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1error_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_error_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1error_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_error_alert *arg1 = (libTAU::dht_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_error_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1error_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_error_alert *arg1 = (libTAU::dht_error_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_error_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_error_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1error_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_error_alert *arg1 = (libTAU::dht_error_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_error_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_error_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1error_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_error_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1error_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_error_alert *arg1 = (libTAU::dht_error_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_error_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_error_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1error_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_error_alert *arg1 = (libTAU::dht_error_alert *) 0 ;
  libTAU::error_code *arg2 = (libTAU::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_error_alert **)&jarg1; 
  arg2 = *(libTAU::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1error_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_error_alert *arg1 = (libTAU::dht_error_alert *) 0 ;
  libTAU::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_error_alert **)&jarg1; 
  result = (libTAU::error_code *)& ((arg1)->error);
  *(libTAU::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1error_1alert_1op_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_error_alert *arg1 = (libTAU::dht_error_alert *) 0 ;
  libTAU::operation_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_error_alert **)&jarg1; 
  arg2 = (libTAU::operation_t)jarg2; 
  if (arg1) (arg1)->op = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1error_1alert_1op_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_error_alert *arg1 = (libTAU::dht_error_alert *) 0 ;
  libTAU::operation_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_error_alert **)&jarg1; 
  result = (libTAU::operation_t) ((arg1)->op);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_error_alert *arg1 = (libTAU::dht_error_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_error_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1immutable_1item_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_immutable_item_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1immutable_1item_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_immutable_item_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1immutable_1item_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_immutable_item_alert *arg1 = (libTAU::dht_immutable_item_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_immutable_item_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_immutable_item_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1immutable_1item_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_immutable_item_alert *arg1 = (libTAU::dht_immutable_item_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_immutable_item_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_immutable_item_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1immutable_1item_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_immutable_item_alert *arg1 = (libTAU::dht_immutable_item_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_immutable_item_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_immutable_item_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1immutable_1item_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_immutable_item_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1immutable_1item_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_immutable_item_alert *arg1 = (libTAU::dht_immutable_item_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_immutable_item_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_immutable_item_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1immutable_1item_1alert_1target_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_immutable_item_alert *arg1 = (libTAU::dht_immutable_item_alert *) 0 ;
  libTAU::sha256_hash *arg2 = (libTAU::sha256_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_immutable_item_alert **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2; 
  if (arg1) (arg1)->target = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1immutable_1item_1alert_1target_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_immutable_item_alert *arg1 = (libTAU::dht_immutable_item_alert *) 0 ;
  libTAU::sha256_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_immutable_item_alert **)&jarg1; 
  result = (libTAU::sha256_hash *)& ((arg1)->target);
  *(libTAU::sha256_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1immutable_1item_1alert_1item_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_immutable_item_alert *arg1 = (libTAU::dht_immutable_item_alert *) 0 ;
  libTAU::entry *arg2 = (libTAU::entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_immutable_item_alert **)&jarg1; 
  arg2 = *(libTAU::entry **)&jarg2; 
  if (arg1) (arg1)->item = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1immutable_1item_1alert_1item_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_immutable_item_alert *arg1 = (libTAU::dht_immutable_item_alert *) 0 ;
  libTAU::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_immutable_item_alert **)&jarg1; 
  result = (libTAU::entry *)& ((arg1)->item);
  *(libTAU::entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1immutable_1item_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_immutable_item_alert *arg1 = (libTAU::dht_immutable_item_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_immutable_item_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_mutable_item_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_mutable_item_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_mutable_item_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_mutable_item_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_mutable_item_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_mutable_item_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_mutable_item_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1ts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->ts = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1ts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  result = (std::int64_t) ((arg1)->ts);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1salt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->salt = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1salt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->salt);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1item_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  libTAU::entry *arg2 = (libTAU::entry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  arg2 = *(libTAU::entry **)&jarg2; 
  if (arg1) (arg1)->item = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1item_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  libTAU::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  result = (libTAU::entry *)& ((arg1)->item);
  *(libTAU::entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1authoritative_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->authoritative = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1authoritative_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  result = (bool) ((arg1)->authoritative);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1get_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  std::array< std::int8_t,32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = libTAU_dht_mutable_item_alert_get_key(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::array< std::int8_t,32 > **)&jresult = new std::array< std::int8_t,32 >((const std::array< std::int8_t,32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1get_1signature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  std::array< std::int8_t,64 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = libTAU_dht_mutable_item_alert_get_signature(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::array< std::int8_t,64 > **)&jresult = new std::array< std::int8_t,64 >((const std::array< std::int8_t,64 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1get_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = (int64_t)libTAU_dht_mutable_item_alert_get_timestamp(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1get_1salt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      result = libTAU_dht_mutable_item_alert_get_salt(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1mutable_1item_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_mutable_item_alert *arg1 = (libTAU::dht_mutable_item_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_mutable_item_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_put_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_put_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_put_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_put_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_put_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_put_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_put_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1target_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  libTAU::sha256_hash *arg2 = (libTAU::sha256_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2; 
  if (arg1) (arg1)->target = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1target_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  libTAU::sha256_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  result = (libTAU::sha256_hash *)& ((arg1)->target);
  *(libTAU::sha256_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1salt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->salt = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1salt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  result = (std::string *) & ((arg1)->salt);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1ts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  std::int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  if (arg1) (arg1)->ts = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1ts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  result = (std::int64_t) ((arg1)->ts);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1num_1success_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num_success = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1num_1success_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  result = (int) ((arg1)->num_success);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1get_1public_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  std::array< std::int8_t,32 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  {
    try {
      result = libTAU_dht_put_alert_get_public_key(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::array< std::int8_t,32 > **)&jresult = new std::array< std::int8_t,32 >((const std::array< std::int8_t,32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1get_1signature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  std::array< std::int8_t,64 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  {
    try {
      result = libTAU_dht_put_alert_get_signature(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::array< std::int8_t,64 > **)&jresult = new std::array< std::int8_t,64 >((const std::array< std::int8_t,64 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1get_1salt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  {
    try {
      result = libTAU_dht_put_alert_get_salt(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1get_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  {
    try {
      result = (int64_t)libTAU_dht_put_alert_get_timestamp(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1put_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_put_alert *arg1 = (libTAU::dht_put_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_put_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1outgoing_1get_1peers_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_outgoing_get_peers_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1outgoing_1get_1peers_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_outgoing_get_peers_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1outgoing_1get_1peers_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_outgoing_get_peers_alert *arg1 = (libTAU::dht_outgoing_get_peers_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_outgoing_get_peers_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_outgoing_get_peers_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1outgoing_1get_1peers_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_outgoing_get_peers_alert *arg1 = (libTAU::dht_outgoing_get_peers_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_outgoing_get_peers_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_outgoing_get_peers_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1outgoing_1get_1peers_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_outgoing_get_peers_alert *arg1 = (libTAU::dht_outgoing_get_peers_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_outgoing_get_peers_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_outgoing_get_peers_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1outgoing_1get_1peers_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_outgoing_get_peers_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1outgoing_1get_1peers_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_outgoing_get_peers_alert *arg1 = (libTAU::dht_outgoing_get_peers_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_outgoing_get_peers_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_outgoing_get_peers_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1outgoing_1get_1peers_1alert_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_outgoing_get_peers_alert *arg1 = (libTAU::dht_outgoing_get_peers_alert *) 0 ;
  libTAU::sha256_hash *arg2 = (libTAU::sha256_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_outgoing_get_peers_alert **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1outgoing_1get_1peers_1alert_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_outgoing_get_peers_alert *arg1 = (libTAU::dht_outgoing_get_peers_alert *) 0 ;
  libTAU::sha256_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_outgoing_get_peers_alert **)&jarg1; 
  result = (libTAU::sha256_hash *)& ((arg1)->info_hash);
  *(libTAU::sha256_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1outgoing_1get_1peers_1alert_1obfuscated_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_outgoing_get_peers_alert *arg1 = (libTAU::dht_outgoing_get_peers_alert *) 0 ;
  libTAU::sha256_hash *arg2 = (libTAU::sha256_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_outgoing_get_peers_alert **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2; 
  if (arg1) (arg1)->obfuscated_info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1outgoing_1get_1peers_1alert_1obfuscated_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_outgoing_get_peers_alert *arg1 = (libTAU::dht_outgoing_get_peers_alert *) 0 ;
  libTAU::sha256_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_outgoing_get_peers_alert **)&jarg1; 
  result = (libTAU::sha256_hash *)& ((arg1)->obfuscated_info_hash);
  *(libTAU::sha256_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1outgoing_1get_1peers_1alert_1get_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_outgoing_get_peers_alert *arg1 = (libTAU::dht_outgoing_get_peers_alert *) 0 ;
  libTAU::udp::endpoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_outgoing_get_peers_alert **)&jarg1; 
  {
    try {
      result = libTAU_dht_outgoing_get_peers_alert_get_endpoint(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::udp::endpoint **)&jresult = new libTAU::udp::endpoint((const libTAU::udp::endpoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1outgoing_1get_1peers_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_outgoing_get_peers_alert *arg1 = (libTAU::dht_outgoing_get_peers_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_outgoing_get_peers_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_log_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::log_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_log_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::log_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_log_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::log_alert *arg1 = (libTAU::log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::log_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::log_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_log_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::log_alert *arg1 = (libTAU::log_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::log_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::log_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_log_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::log_alert *arg1 = (libTAU::log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::log_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_log_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::log_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_log_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::log_alert *arg1 = (libTAU::log_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::log_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::log_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_log_1alert_1log_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::log_alert *arg1 = (libTAU::log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::log_alert const *)arg1)->log_message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::log_alert *arg1 = (libTAU::log_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::log_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1log_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::peer_log_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1log_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::peer_log_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1log_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_log_alert *arg1 = (libTAU::peer_log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_log_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::peer_log_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1log_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::peer_log_alert *arg1 = (libTAU::peer_log_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_log_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::peer_log_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1log_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::peer_log_alert *arg1 = (libTAU::peer_log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::peer_log_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1log_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::peer_log_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1log_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::peer_log_alert *arg1 = (libTAU::peer_log_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_log_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::peer_log_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1log_1alert_1direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_log_alert *arg1 = (libTAU::peer_log_alert *) 0 ;
  libTAU::peer_log_alert::direction_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_log_alert **)&jarg1; 
  arg2 = (libTAU::peer_log_alert::direction_t)jarg2; 
  if (arg1) (arg1)->direction = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1log_1alert_1direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_log_alert *arg1 = (libTAU::peer_log_alert *) 0 ;
  libTAU::peer_log_alert::direction_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_log_alert **)&jarg1; 
  result = (libTAU::peer_log_alert::direction_t) ((arg1)->direction);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1log_1alert_1log_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::peer_log_alert *arg1 = (libTAU::peer_log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::peer_log_alert const *)arg1)->log_message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1log_1alert_1get_1event_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::peer_log_alert *arg1 = (libTAU::peer_log_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_log_alert **)&jarg1; 
  {
    try {
      result = libTAU_peer_log_alert_get_event_type(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1peer_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::peer_log_alert *arg1 = (libTAU::peer_log_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::peer_log_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1outstanding_1requests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->outstanding_requests = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1outstanding_1requests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->outstanding_requests);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1timeouts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->timeouts = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1timeouts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->timeouts);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1responses_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->responses = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1responses_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->responses);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1branch_1factor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->branch_factor = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1branch_1factor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->branch_factor);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1nodes_1left_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nodes_left = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1nodes_1left_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->nodes_left);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1last_1sent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->last_sent = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1last_1sent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->last_sent);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1first_1timeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first_timeout = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1first_1timeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  result = (int) ((arg1)->first_timeout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1target_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  libTAU::sha1_hash *arg2 = (libTAU::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  arg2 = *(libTAU::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->target = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1target_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  libTAU::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  result = (libTAU::sha1_hash *)& ((arg1)->target);
  *(libTAU::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1lookup_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  {
    try {
      result = libTAU_dht_lookup_get_type(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1dht_1lookup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::dht_lookup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::dht_lookup *)new libTAU::dht_lookup();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::dht_lookup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1lookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_lookup *arg1 = (libTAU::dht_lookup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_lookup **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_stats_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_stats_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_stats_alert *arg1 = (libTAU::dht_stats_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_stats_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_stats_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_stats_alert *arg1 = (libTAU::dht_stats_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_stats_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_stats_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_stats_alert *arg1 = (libTAU::dht_stats_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_stats_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_stats_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_stats_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_stats_alert *arg1 = (libTAU::dht_stats_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_stats_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_stats_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1active_1requests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_stats_alert *arg1 = (libTAU::dht_stats_alert *) 0 ;
  std::vector< libTAU::dht_lookup > *arg2 = (std::vector< libTAU::dht_lookup > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_stats_alert **)&jarg1; 
  arg2 = *(std::vector< libTAU::dht_lookup > **)&jarg2; 
  if (arg1) (arg1)->active_requests = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1active_1requests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_stats_alert *arg1 = (libTAU::dht_stats_alert *) 0 ;
  std::vector< libTAU::dht_lookup > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_stats_alert **)&jarg1; 
  result = (std::vector< libTAU::dht_lookup > *)& ((arg1)->active_requests);
  *(std::vector< libTAU::dht_lookup > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1routing_1table_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_stats_alert *arg1 = (libTAU::dht_stats_alert *) 0 ;
  std::vector< libTAU::dht_routing_bucket > *arg2 = (std::vector< libTAU::dht_routing_bucket > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_stats_alert **)&jarg1; 
  arg2 = *(std::vector< libTAU::dht_routing_bucket > **)&jarg2; 
  if (arg1) (arg1)->routing_table = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1routing_1table_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_stats_alert *arg1 = (libTAU::dht_stats_alert *) 0 ;
  std::vector< libTAU::dht_routing_bucket > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_stats_alert **)&jarg1; 
  result = (std::vector< libTAU::dht_routing_bucket > *)& ((arg1)->routing_table);
  *(std::vector< libTAU::dht_routing_bucket > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1nid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_stats_alert *arg1 = (libTAU::dht_stats_alert *) 0 ;
  libTAU::sha256_hash *arg2 = (libTAU::sha256_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_stats_alert **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2; 
  if (arg1) (arg1)->nid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1nid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_stats_alert *arg1 = (libTAU::dht_stats_alert *) 0 ;
  libTAU::sha256_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_stats_alert **)&jarg1; 
  result = (libTAU::sha256_hash *)& ((arg1)->nid);
  *(libTAU::sha256_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1get_1local_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_stats_alert *arg1 = (libTAU::dht_stats_alert *) 0 ;
  libTAU::udp::endpoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_stats_alert **)&jarg1; 
  {
    try {
      result = libTAU_dht_stats_alert_get_local_endpoint(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::udp::endpoint **)&jresult = new libTAU::udp::endpoint((const libTAU::udp::endpoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1stats_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_stats_alert *arg1 = (libTAU::dht_stats_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_stats_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1log_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_log_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1log_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_log_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1log_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_log_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1log_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_log_alert *arg1 = (libTAU::dht_log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_log_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_log_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1log_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_log_alert *arg1 = (libTAU::dht_log_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_log_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_log_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1log_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_log_alert *arg1 = (libTAU::dht_log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_log_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1log_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_log_alert *arg1 = (libTAU::dht_log_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_log_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_log_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1log_1alert_1log_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_log_alert *arg1 = (libTAU::dht_log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_log_alert const *)arg1)->log_message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1log_1alert_1module_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_log_alert *arg1 = (libTAU::dht_log_alert *) 0 ;
  libTAU::dht_log_alert::dht_module_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_log_alert **)&jarg1; 
  arg2 = (libTAU::dht_log_alert::dht_module_t)jarg2; 
  if (arg1) (arg1)->module = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1log_1alert_1module_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_log_alert *arg1 = (libTAU::dht_log_alert *) 0 ;
  libTAU::dht_log_alert::dht_module_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_log_alert **)&jarg1; 
  result = (libTAU::dht_log_alert::dht_module_t) ((arg1)->module);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_log_alert *arg1 = (libTAU::dht_log_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_log_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1pkt_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_pkt_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1pkt_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_pkt_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1pkt_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_pkt_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1pkt_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_pkt_alert *arg1 = (libTAU::dht_pkt_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_pkt_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_pkt_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1pkt_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_pkt_alert *arg1 = (libTAU::dht_pkt_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_pkt_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_pkt_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1pkt_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_pkt_alert *arg1 = (libTAU::dht_pkt_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_pkt_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_pkt_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1pkt_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_pkt_alert *arg1 = (libTAU::dht_pkt_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_pkt_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_pkt_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1pkt_1alert_1direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::dht_pkt_alert *arg1 = (libTAU::dht_pkt_alert *) 0 ;
  libTAU::dht_pkt_alert::direction_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_pkt_alert **)&jarg1; 
  arg2 = (libTAU::dht_pkt_alert::direction_t)jarg2; 
  if (arg1) (arg1)->direction = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1pkt_1alert_1direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_pkt_alert *arg1 = (libTAU::dht_pkt_alert *) 0 ;
  libTAU::dht_pkt_alert::direction_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_pkt_alert **)&jarg1; 
  result = (libTAU::dht_pkt_alert::direction_t) ((arg1)->direction);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1pkt_1alert_1get_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_pkt_alert *arg1 = (libTAU::dht_pkt_alert *) 0 ;
  libTAU::udp::endpoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_pkt_alert **)&jarg1; 
  {
    try {
      result = libTAU_dht_pkt_alert_get_node(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::udp::endpoint **)&jresult = new libTAU::udp::endpoint((const libTAU::udp::endpoint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1pkt_1alert_1get_1pkt_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_pkt_alert *arg1 = (libTAU::dht_pkt_alert *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_pkt_alert **)&jarg1; 
  {
    try {
      result = libTAU_dht_pkt_alert_get_pkt_buf(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1pkt_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_pkt_alert *arg1 = (libTAU::dht_pkt_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_pkt_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1reply_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_get_peers_reply_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1reply_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_get_peers_reply_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1reply_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_get_peers_reply_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1reply_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_get_peers_reply_alert *arg1 = (libTAU::dht_get_peers_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_get_peers_reply_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_get_peers_reply_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1reply_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_get_peers_reply_alert *arg1 = (libTAU::dht_get_peers_reply_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_get_peers_reply_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_get_peers_reply_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1reply_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_get_peers_reply_alert *arg1 = (libTAU::dht_get_peers_reply_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_get_peers_reply_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_get_peers_reply_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1reply_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_get_peers_reply_alert *arg1 = (libTAU::dht_get_peers_reply_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_get_peers_reply_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_get_peers_reply_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1reply_1alert_1info_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_get_peers_reply_alert *arg1 = (libTAU::dht_get_peers_reply_alert *) 0 ;
  libTAU::sha1_hash *arg2 = (libTAU::sha1_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_get_peers_reply_alert **)&jarg1; 
  arg2 = *(libTAU::sha1_hash **)&jarg2; 
  if (arg1) (arg1)->info_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1reply_1alert_1info_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_get_peers_reply_alert *arg1 = (libTAU::dht_get_peers_reply_alert *) 0 ;
  libTAU::sha1_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_get_peers_reply_alert **)&jarg1; 
  result = (libTAU::sha1_hash *)& ((arg1)->info_hash);
  *(libTAU::sha1_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1reply_1alert_1num_1peers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_get_peers_reply_alert *arg1 = (libTAU::dht_get_peers_reply_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_get_peers_reply_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_get_peers_reply_alert const *)arg1)->num_peers();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1reply_1alert_1peers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_get_peers_reply_alert *arg1 = (libTAU::dht_get_peers_reply_alert *) 0 ;
  std::vector< libTAU::tcp::endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_get_peers_reply_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_get_peers_reply_alert const *)arg1)->peers();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::tcp::endpoint > **)&jresult = new std::vector< libTAU::tcp::endpoint >((const std::vector< libTAU::tcp::endpoint > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1get_1peers_1reply_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_get_peers_reply_alert *arg1 = (libTAU::dht_get_peers_reply_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_get_peers_reply_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1direct_1response_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_direct_response_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1direct_1response_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_direct_response_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1direct_1response_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_direct_response_alert *arg1 = (libTAU::dht_direct_response_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_direct_response_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_direct_response_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1direct_1response_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_direct_response_alert *arg1 = (libTAU::dht_direct_response_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_direct_response_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_direct_response_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1direct_1response_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_direct_response_alert *arg1 = (libTAU::dht_direct_response_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_direct_response_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_direct_response_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1direct_1response_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_direct_response_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1direct_1response_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_direct_response_alert *arg1 = (libTAU::dht_direct_response_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_direct_response_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_direct_response_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1direct_1response_1alert_1userdata_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_direct_response_alert *arg1 = (libTAU::dht_direct_response_alert *) 0 ;
  libTAU::client_data_t *arg2 = (libTAU::client_data_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_direct_response_alert **)&jarg1; 
  arg2 = *(libTAU::client_data_t **)&jarg2; 
  if (arg1) (arg1)->userdata = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1direct_1response_1alert_1userdata_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_direct_response_alert *arg1 = (libTAU::dht_direct_response_alert *) 0 ;
  libTAU::client_data_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_direct_response_alert **)&jarg1; 
  result = (libTAU::client_data_t *)& ((arg1)->userdata);
  *(libTAU::client_data_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1direct_1response_1alert_1response(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_direct_response_alert *arg1 = (libTAU::dht_direct_response_alert *) 0 ;
  libTAU::bdecode_node result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_direct_response_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_direct_response_alert const *)arg1)->response();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::bdecode_node **)&jresult = new libTAU::bdecode_node((const libTAU::bdecode_node &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1direct_1response_1alert_1get_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_direct_response_alert *arg1 = (libTAU::dht_direct_response_alert *) 0 ;
  libTAU::udp::endpoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_direct_response_alert **)&jarg1; 
  {
    try {
      result = libTAU_dht_direct_response_alert_get_endpoint(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::udp::endpoint **)&jresult = new libTAU::udp::endpoint((const libTAU::udp::endpoint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1direct_1response_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_direct_response_alert *arg1 = (libTAU::dht_direct_response_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_direct_response_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::picker_log_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::picker_log_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::picker_log_alert *arg1 = (libTAU::picker_log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::picker_log_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::picker_log_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::picker_log_alert *arg1 = (libTAU::picker_log_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::picker_log_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::picker_log_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::picker_log_alert *arg1 = (libTAU::picker_log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::picker_log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::picker_log_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::picker_log_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::picker_log_alert *arg1 = (libTAU::picker_log_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::picker_log_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::picker_log_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1partial_1ratio_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::partial_ratio;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1prioritize_1partials_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::prioritize_partials;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1rarest_1first_1partials_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::rarest_first_partials;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1rarest_1first_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::rarest_first;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1reverse_1rarest_1first_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::reverse_rarest_first;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1suggested_1pieces_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::suggested_pieces;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1prio_1sequential_1pieces_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::prio_sequential_pieces;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1sequential_1pieces_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::sequential_pieces;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1reverse_1pieces_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::reverse_pieces;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1time_1critical_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::time_critical;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1random_1pieces_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::random_pieces;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1prefer_1contiguous_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::prefer_contiguous;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1reverse_1sequential_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::reverse_sequential;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1backup1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::backup1;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1backup2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::backup2;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1end_1game_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::end_game;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1extent_1affinity_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > *)&libTAU::picker_log_alert::extent_affinity;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1picker_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::picker_log_alert *arg1 = (libTAU::picker_log_alert *) 0 ;
  libTAU::picker_flags_t *arg2 = (libTAU::picker_flags_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::picker_log_alert **)&jarg1; 
  arg2 = *(libTAU::picker_flags_t **)&jarg2; 
  if (arg1) (arg1)->picker_flags = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1picker_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::picker_log_alert *arg1 = (libTAU::picker_log_alert *) 0 ;
  libTAU::picker_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::picker_log_alert **)&jarg1; 
  result = (libTAU::picker_flags_t *)& ((arg1)->picker_flags);
  *(libTAU::picker_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1blocks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::picker_log_alert *arg1 = (libTAU::picker_log_alert *) 0 ;
  std::vector< libTAU::piece_block > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::picker_log_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::picker_log_alert const *)arg1)->blocks();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::piece_block > **)&jresult = new std::vector< libTAU::piece_block >((const std::vector< libTAU::piece_block > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1picker_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::picker_log_alert *arg1 = (libTAU::picker_log_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::picker_log_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1error_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::session_error_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1error_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::session_error_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1error_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::session_error_alert *arg1 = (libTAU::session_error_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_error_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::session_error_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1error_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_error_alert *arg1 = (libTAU::session_error_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_error_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::session_error_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1error_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::session_error_alert *arg1 = (libTAU::session_error_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_error_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::session_error_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1error_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::session_error_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1error_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::session_error_alert *arg1 = (libTAU::session_error_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_error_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::session_error_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1error_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_error_alert *arg1 = (libTAU::session_error_alert *) 0 ;
  libTAU::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_error_alert **)&jarg1; 
  result = (libTAU::error_code *)& ((arg1)->error);
  *(libTAU::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1session_1error_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::session_error_alert *arg1 = (libTAU::session_error_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::session_error_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1live_1nodes_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_live_nodes_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1live_1nodes_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_live_nodes_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1live_1nodes_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_live_nodes_alert *arg1 = (libTAU::dht_live_nodes_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_live_nodes_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_live_nodes_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1live_1nodes_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_live_nodes_alert *arg1 = (libTAU::dht_live_nodes_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_live_nodes_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_live_nodes_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1live_1nodes_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_live_nodes_alert *arg1 = (libTAU::dht_live_nodes_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_live_nodes_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_live_nodes_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1live_1nodes_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_live_nodes_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1live_1nodes_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_live_nodes_alert *arg1 = (libTAU::dht_live_nodes_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_live_nodes_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_live_nodes_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1live_1nodes_1alert_1node_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_live_nodes_alert *arg1 = (libTAU::dht_live_nodes_alert *) 0 ;
  libTAU::sha256_hash *arg2 = (libTAU::sha256_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_live_nodes_alert **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2; 
  if (arg1) (arg1)->node_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1live_1nodes_1alert_1node_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_live_nodes_alert *arg1 = (libTAU::dht_live_nodes_alert *) 0 ;
  libTAU::sha256_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_live_nodes_alert **)&jarg1; 
  result = (libTAU::sha256_hash *)& ((arg1)->node_id);
  *(libTAU::sha256_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1live_1nodes_1alert_1num_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_live_nodes_alert *arg1 = (libTAU::dht_live_nodes_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_live_nodes_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_live_nodes_alert const *)arg1)->num_nodes();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1live_1nodes_1alert_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_live_nodes_alert *arg1 = (libTAU::dht_live_nodes_alert *) 0 ;
  std::vector< std::pair< libTAU::sha256_hash,libTAU::udp::endpoint > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_live_nodes_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_live_nodes_alert const *)arg1)->nodes();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< libTAU::sha256_hash,libTAU::udp::endpoint > > **)&jresult = new std::vector< std::pair< libTAU::sha256_hash,libTAU::udp::endpoint > >((const std::vector< std::pair< libTAU::sha256_hash,libTAU::udp::endpoint > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1live_1nodes_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_live_nodes_alert *arg1 = (libTAU::dht_live_nodes_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_live_nodes_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1header_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::session_stats_header_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1header_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::session_stats_header_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1header_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::session_stats_header_alert *arg1 = (libTAU::session_stats_header_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stats_header_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::session_stats_header_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1header_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_stats_header_alert *arg1 = (libTAU::session_stats_header_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stats_header_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::session_stats_header_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1header_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::session_stats_header_alert *arg1 = (libTAU::session_stats_header_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stats_header_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::session_stats_header_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1header_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::session_stats_header_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1header_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::session_stats_header_alert *arg1 = (libTAU::session_stats_header_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_stats_header_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::session_stats_header_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1session_1stats_1header_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::session_stats_header_alert *arg1 = (libTAU::session_stats_header_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::session_stats_header_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::dht_sample_infohashes_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::dht_sample_infohashes_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::dht_sample_infohashes_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_sample_infohashes_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_sample_infohashes_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::dht_sample_infohashes_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_sample_infohashes_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1node_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  libTAU::sha256_hash *arg2 = (libTAU::sha256_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2; 
  if (arg1) (arg1)->node_id = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1node_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  libTAU::sha256_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  result = (libTAU::sha256_hash *)& ((arg1)->node_id);
  *(libTAU::sha256_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1num_1infohashes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  result = (int)(int) ((arg1)->num_infohashes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1num_1samples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_sample_infohashes_alert const *)arg1)->num_samples();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1samples(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  std::vector< libTAU::sha256_hash > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_sample_infohashes_alert const *)arg1)->samples();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::sha256_hash > **)&jresult = new std::vector< libTAU::sha256_hash >((const std::vector< libTAU::sha256_hash > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1num_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::dht_sample_infohashes_alert const *)arg1)->num_nodes();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  std::vector< std::pair< libTAU::sha256_hash,libTAU::udp::endpoint > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::dht_sample_infohashes_alert const *)arg1)->nodes();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::pair< libTAU::sha256_hash,libTAU::udp::endpoint > > **)&jresult = new std::vector< std::pair< libTAU::sha256_hash,libTAU::udp::endpoint > >((const std::vector< std::pair< libTAU::sha256_hash,libTAU::udp::endpoint > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1get_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  libTAU::udp::endpoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  {
    try {
      result = libTAU_dht_sample_infohashes_alert_get_endpoint(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::udp::endpoint **)&jresult = new libTAU::udp::endpoint((const libTAU::udp::endpoint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1get_1interval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  {
    try {
      result = (std::int64_t)libTAU_dht_sample_infohashes_alert_get_interval(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1dht_1sample_1infohashes_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::dht_sample_infohashes_alert *arg1 = (libTAU::dht_sample_infohashes_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::dht_sample_infohashes_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alerts_1dropped_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::alerts_dropped_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alerts_1dropped_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::alerts_dropped_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alerts_1dropped_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::alerts_dropped_alert *arg1 = (libTAU::alerts_dropped_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alerts_dropped_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::alerts_dropped_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alerts_1dropped_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alerts_dropped_alert *arg1 = (libTAU::alerts_dropped_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alerts_dropped_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::alerts_dropped_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alerts_1dropped_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::alerts_dropped_alert *arg1 = (libTAU::alerts_dropped_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alerts_dropped_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::alerts_dropped_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alerts_1dropped_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::alerts_dropped_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alerts_1dropped_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::alerts_dropped_alert *arg1 = (libTAU::alerts_dropped_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alerts_dropped_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::alerts_dropped_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alerts_1dropped_1alert_1dropped_1alerts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::alerts_dropped_alert *arg1 = (libTAU::alerts_dropped_alert *) 0 ;
  std::bitset< 128 > *arg2 = (std::bitset< 128 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::alerts_dropped_alert **)&jarg1; 
  arg2 = *(std::bitset< 128 > **)&jarg2; 
  if (arg1) (arg1)->dropped_alerts = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alerts_1dropped_1alert_1dropped_1alerts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::alerts_dropped_alert *arg1 = (libTAU::alerts_dropped_alert *) 0 ;
  std::bitset< 128 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::alerts_dropped_alert **)&jarg1; 
  result = (std::bitset< 128 > *)& ((arg1)->dropped_alerts);
  *(std::bitset< 128 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1alerts_1dropped_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::alerts_dropped_alert *arg1 = (libTAU::alerts_dropped_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::alerts_dropped_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_socks5_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::socks5_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_socks5_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::socks5_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_socks5_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::socks5_alert *arg1 = (libTAU::socks5_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::socks5_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::socks5_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_socks5_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::socks5_alert *arg1 = (libTAU::socks5_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::socks5_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::socks5_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_socks5_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::socks5_alert *arg1 = (libTAU::socks5_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::socks5_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::socks5_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_socks5_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::socks5_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_socks5_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::socks5_alert *arg1 = (libTAU::socks5_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::socks5_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::socks5_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_socks5_1alert_1error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::socks5_alert *arg1 = (libTAU::socks5_alert *) 0 ;
  libTAU::error_code *arg2 = (libTAU::error_code *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::socks5_alert **)&jarg1; 
  arg2 = *(libTAU::error_code **)&jarg2; 
  if (arg1) (arg1)->error = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_socks5_1alert_1error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::socks5_alert *arg1 = (libTAU::socks5_alert *) 0 ;
  libTAU::error_code *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::socks5_alert **)&jarg1; 
  result = (libTAU::error_code *)& ((arg1)->error);
  *(libTAU::error_code **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_socks5_1alert_1op_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::socks5_alert *arg1 = (libTAU::socks5_alert *) 0 ;
  libTAU::operation_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::socks5_alert **)&jarg1; 
  arg2 = (libTAU::operation_t)jarg2; 
  if (arg1) (arg1)->op = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_socks5_1alert_1op_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::socks5_alert *arg1 = (libTAU::socks5_alert *) 0 ;
  libTAU::operation_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::socks5_alert **)&jarg1; 
  result = (libTAU::operation_t) ((arg1)->op);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1socks5_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::socks5_alert *arg1 = (libTAU::socks5_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::socks5_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1device_1id_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::communication_new_device_id_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1device_1id_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::communication_new_device_id_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1device_1id_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::communication_new_device_id_alert *arg1 = (libTAU::communication_new_device_id_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_new_device_id_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::communication_new_device_id_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1device_1id_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_new_device_id_alert *arg1 = (libTAU::communication_new_device_id_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_new_device_id_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_new_device_id_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1device_1id_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_new_device_id_alert *arg1 = (libTAU::communication_new_device_id_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_new_device_id_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::communication_new_device_id_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1device_1id_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::communication_new_device_id_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1device_1id_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_new_device_id_alert *arg1 = (libTAU::communication_new_device_id_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_new_device_id_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_new_device_id_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1device_1id_1alert_1get_1device_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_new_device_id_alert *arg1 = (libTAU::communication_new_device_id_alert *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_new_device_id_alert **)&jarg1; 
  {
    try {
      result = libTAU_communication_new_device_id_alert_get_device_id(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1communication_1new_1device_1id_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::communication_new_device_id_alert *arg1 = (libTAU::communication_new_device_id_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::communication_new_device_id_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1message_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::communication_new_message_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1message_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::communication_new_message_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1message_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::communication_new_message_alert *arg1 = (libTAU::communication_new_message_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_new_message_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::communication_new_message_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1message_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_new_message_alert *arg1 = (libTAU::communication_new_message_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_new_message_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_new_message_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1message_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_new_message_alert *arg1 = (libTAU::communication_new_message_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_new_message_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::communication_new_message_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1message_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::communication_new_message_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1message_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_new_message_alert *arg1 = (libTAU::communication_new_message_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_new_message_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_new_message_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1message_1alert_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::communication_new_message_alert *arg1 = (libTAU::communication_new_message_alert *) 0 ;
  libTAU::communication::message *arg2 = (libTAU::communication::message *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::communication_new_message_alert **)&jarg1; 
  arg2 = *(libTAU::communication::message **)&jarg2; 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1message_1alert_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_new_message_alert *arg1 = (libTAU::communication_new_message_alert *) 0 ;
  libTAU::communication::message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_new_message_alert **)&jarg1; 
  result = (libTAU::communication::message *)& ((arg1)->msg);
  *(libTAU::communication::message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1communication_1new_1message_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::communication_new_message_alert *arg1 = (libTAU::communication_new_message_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::communication_new_message_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1confirmation_1root_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::communication_confirmation_root_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1confirmation_1root_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::communication_confirmation_root_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1confirmation_1root_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::communication_confirmation_root_alert *arg1 = (libTAU::communication_confirmation_root_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_confirmation_root_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::communication_confirmation_root_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1confirmation_1root_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_confirmation_root_alert *arg1 = (libTAU::communication_confirmation_root_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_confirmation_root_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_confirmation_root_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1confirmation_1root_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_confirmation_root_alert *arg1 = (libTAU::communication_confirmation_root_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_confirmation_root_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::communication_confirmation_root_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1confirmation_1root_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::communication_confirmation_root_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1confirmation_1root_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_confirmation_root_alert *arg1 = (libTAU::communication_confirmation_root_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_confirmation_root_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_confirmation_root_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1confirmation_1root_1alert_1confirmation_1roots_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::communication_confirmation_root_alert *arg1 = (libTAU::communication_confirmation_root_alert *) 0 ;
  std::vector< libTAU::sha256_hash > *arg2 = (std::vector< libTAU::sha256_hash > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::communication_confirmation_root_alert **)&jarg1; 
  arg2 = *(std::vector< libTAU::sha256_hash > **)&jarg2; 
  if (arg1) (arg1)->confirmation_roots = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1confirmation_1root_1alert_1confirmation_1roots_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_confirmation_root_alert *arg1 = (libTAU::communication_confirmation_root_alert *) 0 ;
  std::vector< libTAU::sha256_hash > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_confirmation_root_alert **)&jarg1; 
  result = (std::vector< libTAU::sha256_hash > *)& ((arg1)->confirmation_roots);
  *(std::vector< libTAU::sha256_hash > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1confirmation_1root_1alert_1get_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_confirmation_root_alert *arg1 = (libTAU::communication_confirmation_root_alert *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_confirmation_root_alert **)&jarg1; 
  {
    try {
      result = libTAU_communication_confirmation_root_alert_get_peer(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1confirmation_1root_1alert_1get_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_confirmation_root_alert *arg1 = (libTAU::communication_confirmation_root_alert *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_confirmation_root_alert **)&jarg1; 
  {
    try {
      result = (std::int64_t)libTAU_communication_confirmation_root_alert_get_timestamp(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1communication_1confirmation_1root_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::communication_confirmation_root_alert *arg1 = (libTAU::communication_confirmation_root_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::communication_confirmation_root_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1syncing_1message_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::communication_syncing_message_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1syncing_1message_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::communication_syncing_message_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1syncing_1message_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::communication_syncing_message_alert *arg1 = (libTAU::communication_syncing_message_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_syncing_message_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::communication_syncing_message_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1syncing_1message_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_syncing_message_alert *arg1 = (libTAU::communication_syncing_message_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_syncing_message_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_syncing_message_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1syncing_1message_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_syncing_message_alert *arg1 = (libTAU::communication_syncing_message_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_syncing_message_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::communication_syncing_message_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1syncing_1message_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::communication_syncing_message_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1syncing_1message_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_syncing_message_alert *arg1 = (libTAU::communication_syncing_message_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_syncing_message_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_syncing_message_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1syncing_1message_1alert_1syncing_1msg_1hash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::communication_syncing_message_alert *arg1 = (libTAU::communication_syncing_message_alert *) 0 ;
  libTAU::sha256_hash *arg2 = (libTAU::sha256_hash *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::communication_syncing_message_alert **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2; 
  if (arg1) (arg1)->syncing_msg_hash = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1syncing_1message_1alert_1syncing_1msg_1hash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_syncing_message_alert *arg1 = (libTAU::communication_syncing_message_alert *) 0 ;
  libTAU::sha256_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_syncing_message_alert **)&jarg1; 
  result = (libTAU::sha256_hash *)& ((arg1)->syncing_msg_hash);
  *(libTAU::sha256_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1syncing_1message_1alert_1get_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_syncing_message_alert *arg1 = (libTAU::communication_syncing_message_alert *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_syncing_message_alert **)&jarg1; 
  {
    try {
      result = libTAU_communication_syncing_message_alert_get_peer(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1syncing_1message_1alert_1get_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_syncing_message_alert *arg1 = (libTAU::communication_syncing_message_alert *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_syncing_message_alert **)&jarg1; 
  {
    try {
      result = (std::int64_t)libTAU_communication_syncing_message_alert_get_timestamp(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1communication_1syncing_1message_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::communication_syncing_message_alert *arg1 = (libTAU::communication_syncing_message_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::communication_syncing_message_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1friend_1info_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::communication_friend_info_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1friend_1info_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::communication_friend_info_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1friend_1info_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::communication_friend_info_alert *arg1 = (libTAU::communication_friend_info_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_friend_info_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::communication_friend_info_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1friend_1info_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_friend_info_alert *arg1 = (libTAU::communication_friend_info_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_friend_info_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_friend_info_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1friend_1info_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_friend_info_alert *arg1 = (libTAU::communication_friend_info_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_friend_info_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::communication_friend_info_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1friend_1info_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::communication_friend_info_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1friend_1info_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_friend_info_alert *arg1 = (libTAU::communication_friend_info_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_friend_info_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_friend_info_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1friend_1info_1alert_1get_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_friend_info_alert *arg1 = (libTAU::communication_friend_info_alert *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_friend_info_alert **)&jarg1; 
  {
    try {
      result = libTAU_communication_friend_info_alert_get_peer(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1friend_1info_1alert_1get_1friend_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_friend_info_alert *arg1 = (libTAU::communication_friend_info_alert *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_friend_info_alert **)&jarg1; 
  {
    try {
      result = libTAU_communication_friend_info_alert_get_friend_info(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1communication_1friend_1info_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::communication_friend_info_alert *arg1 = (libTAU::communication_friend_info_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::communication_friend_info_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1log_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::communication_log_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1log_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::communication_log_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1log_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::communication_log_alert *arg1 = (libTAU::communication_log_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_log_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::communication_log_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1log_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_log_alert *arg1 = (libTAU::communication_log_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_log_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_log_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1log_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_log_alert *arg1 = (libTAU::communication_log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::communication_log_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1log_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::communication_log_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1log_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_log_alert *arg1 = (libTAU::communication_log_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_log_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_log_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1log_1alert_1log_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_log_alert *arg1 = (libTAU::communication_log_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_log_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::communication_log_alert const *)arg1)->log_message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1communication_1log_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::communication_log_alert *arg1 = (libTAU::communication_log_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::communication_log_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1last_1seen_1alert_1priority_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::alert_priority result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::alert_priority)libTAU::communication_last_seen_alert::priority;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1last_1seen_1alert_1alert_1type_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::communication_last_seen_alert::alert_type;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1last_1seen_1alert_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::communication_last_seen_alert *arg1 = (libTAU::communication_last_seen_alert *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_last_seen_alert **)&jarg1; 
  {
    try {
      result = (int)((libTAU::communication_last_seen_alert const *)arg1)->type();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1last_1seen_1alert_1category(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_last_seen_alert *arg1 = (libTAU::communication_last_seen_alert *) 0 ;
  libTAU::alert_category_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_last_seen_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_last_seen_alert const *)arg1)->category();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert_category_t **)&jresult = new libTAU::alert_category_t((const libTAU::alert_category_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1last_1seen_1alert_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_last_seen_alert *arg1 = (libTAU::communication_last_seen_alert *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_last_seen_alert **)&jarg1; 
  {
    try {
      result = (char *)((libTAU::communication_last_seen_alert const *)arg1)->what();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1last_1seen_1alert_1static_1category_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > *)&libTAU::communication_last_seen_alert::static_category;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::alert_category_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1last_1seen_1alert_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication_last_seen_alert *arg1 = (libTAU::communication_last_seen_alert *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_last_seen_alert **)&jarg1; 
  {
    try {
      result = ((libTAU::communication_last_seen_alert const *)arg1)->message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1last_1seen_1alert_1get_1peer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_last_seen_alert *arg1 = (libTAU::communication_last_seen_alert *) 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_last_seen_alert **)&jarg1; 
  {
    try {
      result = libTAU_communication_last_seen_alert_get_peer(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1last_1seen_1alert_1get_1last_1seen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication_last_seen_alert *arg1 = (libTAU::communication_last_seen_alert *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication_last_seen_alert **)&jarg1; 
  {
    try {
      result = (std::int64_t)libTAU_communication_last_seen_alert_get_last_seen(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1communication_1last_1seen_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::communication_last_seen_alert *arg1 = (libTAU::communication_last_seen_alert *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::communication_last_seen_alert **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1picker_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_picker_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1picker_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::picker_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_name_1for_1setting(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (char *)libTAU::name_for_setting(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_default_1settings(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::settings_pack result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::default_settings();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::settings_pack **)&jresult = new libTAU::settings_pack((const libTAU::settings_pack &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1interface_1set_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  libTAU::settings_interface *arg1 = (libTAU::settings_interface *) 0 ;
  int arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_interface **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->set_str(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1interface_1set_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libTAU::settings_interface *arg1 = (libTAU::settings_interface *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_interface **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->set_int(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1interface_1set_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  libTAU::settings_interface *arg1 = (libTAU::settings_interface *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_interface **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->set_bool(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1interface_1has_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libTAU::settings_interface *arg1 = (libTAU::settings_interface *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_interface **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libTAU::settings_interface const *)arg1)->has_val(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1interface_1get_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  libTAU::settings_interface *arg1 = (libTAU::settings_interface *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_interface **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (std::string *) &((libTAU::settings_interface const *)arg1)->get_str(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1interface_1get_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libTAU::settings_interface *arg1 = (libTAU::settings_interface *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_interface **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((libTAU::settings_interface const *)arg1)->get_int(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1interface_1get_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libTAU::settings_interface *arg1 = (libTAU::settings_interface *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_interface **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libTAU::settings_interface const *)arg1)->get_bool(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1settings_1pack_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::settings_pack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::settings_pack *)new libTAU::settings_pack();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::settings_pack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1settings_1pack_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::settings_pack *arg1 = 0 ;
  libTAU::settings_pack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_pack **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::settings_pack const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::settings_pack *)new libTAU::settings_pack((libTAU::settings_pack const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::settings_pack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1set_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  libTAU::settings_pack *arg1 = (libTAU::settings_pack *) 0 ;
  int arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->set_str(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1set_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  libTAU::settings_pack *arg1 = (libTAU::settings_pack *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->set_int(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1set_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  libTAU::settings_pack *arg1 = (libTAU::settings_pack *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->set_bool(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1has_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libTAU::settings_pack *arg1 = (libTAU::settings_pack *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libTAU::settings_pack const *)arg1)->has_val(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1clear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::settings_pack *arg1 = (libTAU::settings_pack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_pack **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1clear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::settings_pack *arg1 = (libTAU::settings_pack *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->clear(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1get_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  libTAU::settings_pack *arg1 = (libTAU::settings_pack *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (std::string *) &((libTAU::settings_pack const *)arg1)->get_str(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1get_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  libTAU::settings_pack *arg1 = (libTAU::settings_pack *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((libTAU::settings_pack const *)arg1)->get_int(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1get_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  libTAU::settings_pack *arg1 = (libTAU::settings_pack *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((libTAU::settings_pack const *)arg1)->get_bool(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1string_1type_1base_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::type_bases result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::type_bases)libTAU::settings_pack::string_type_base;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1int_1type_1base_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::type_bases result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::type_bases)libTAU::settings_pack::int_type_base;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1bool_1type_1base_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::type_bases result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::type_bases)libTAU::settings_pack::bool_type_base;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1type_1mask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::type_bases result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::type_bases)libTAU::settings_pack::type_mask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1index_1mask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::type_bases result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::type_bases)libTAU::settings_pack::index_mask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1user_1agent_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::string_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::string_types)libTAU::settings_pack::user_agent;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1handshake_1client_1version_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::string_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::string_types)libTAU::settings_pack::handshake_client_version;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1allow_1multiple_1connections_1per_1ip_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bool_types)libTAU::settings_pack::allow_multiple_connections_per_ip;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1send_1redundant_1have_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bool_types)libTAU::settings_pack::send_redundant_have;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1use_1dht_1as_1fallback_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bool_types)libTAU::settings_pack::use_dht_as_fallback;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1auto_1manage_1prefer_1seeds_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bool_types)libTAU::settings_pack::auto_manage_prefer_seeds;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1disable_1hash_1checks_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bool_types)libTAU::settings_pack::disable_hash_checks;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1no_1atime_1storage_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bool_types)libTAU::settings_pack::no_atime_storage;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1enable_1outgoing_1utp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bool_types)libTAU::settings_pack::enable_outgoing_utp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1no_1recheck_1incomplete_1resume_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bool_types)libTAU::settings_pack::no_recheck_incomplete_resume;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1seeding_1outgoing_1connections_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bool_types)libTAU::settings_pack::seeding_outgoing_connections;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1ban_1web_1seeds_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bool_types)libTAU::settings_pack::ban_web_seeds;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1support_1share_1mode_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bool_types)libTAU::settings_pack::support_share_mode;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1report_1redundant_1bytes_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bool_types)libTAU::settings_pack::report_redundant_bytes;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1announce_1crypto_1support_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bool_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bool_types)libTAU::settings_pack::announce_crypto_support;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1tracker_1completion_1timeout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::int_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::int_types)libTAU::settings_pack::tracker_completion_timeout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1disk_1io_1write_1mode_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::int_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::int_types)libTAU::settings_pack::disk_io_write_mode;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1auto_1manage_1interval_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::int_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::int_types)libTAU::settings_pack::auto_manage_interval;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1read_1cache_1line_1size_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::int_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::int_types)libTAU::settings_pack::read_cache_line_size;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1num_1optimistic_1unchoke_1slots_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::int_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::int_types)libTAU::settings_pack::num_optimistic_unchoke_slots;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1max_1pex_1peers_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::int_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::int_types)libTAU::settings_pack::max_pex_peers;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1dht_1upload_1rate_1limit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::int_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::int_types)libTAU::settings_pack::dht_upload_rate_limit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1connections_1limit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::int_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::int_types)libTAU::settings_pack::connections_limit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1utp_1loss_1multiplier_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::int_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::int_types)libTAU::settings_pack::utp_loss_multiplier;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1tracker_1backoff_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::int_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::int_types)libTAU::settings_pack::tracker_backoff;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1urlseed_1max_1request_1bytes_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::int_types result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::int_types)libTAU::settings_pack::urlseed_max_request_bytes;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1num_1string_1settings_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::settings_pack::num_string_settings;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1num_1bool_1settings_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::settings_pack::num_bool_settings;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1num_1int_1settings_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)libTAU::settings_pack::num_int_settings;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1no_1piece_1suggestions_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::suggest_mode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::suggest_mode_t)libTAU::settings_pack::no_piece_suggestions;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1suggest_1read_1cache_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::suggest_mode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::suggest_mode_t)libTAU::settings_pack::suggest_read_cache;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1fixed_1slots_1choker_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::choking_algorithm_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::choking_algorithm_t)libTAU::settings_pack::fixed_slots_choker;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1rate_1based_1choker_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::choking_algorithm_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::choking_algorithm_t)libTAU::settings_pack::rate_based_choker;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1enable_1os_1cache_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::io_buffer_mode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::io_buffer_mode_t)libTAU::settings_pack::enable_os_cache;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1disable_1os_1cache_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::io_buffer_mode_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::io_buffer_mode_t)libTAU::settings_pack::disable_os_cache;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1prefer_1tcp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bandwidth_mixed_algo_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bandwidth_mixed_algo_t)libTAU::settings_pack::prefer_tcp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1peer_1proportional_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::bandwidth_mixed_algo_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::bandwidth_mixed_algo_t)libTAU::settings_pack::peer_proportional;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1pe_1plaintext_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::enc_level result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::enc_level)libTAU::settings_pack::pe_plaintext;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1pe_1rc4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::enc_level result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::enc_level)libTAU::settings_pack::pe_rc4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1pe_1both_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::settings_pack::enc_level result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::settings_pack::enc_level)libTAU::settings_pack::pe_both;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1get_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libTAU::settings_pack *arg1 = (libTAU::settings_pack *) 0 ;
  int arg2 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = libTAU_settings_pack_get_bytes(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1set_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  libTAU::settings_pack *arg1 = (libTAU::settings_pack *) 0 ;
  int arg2 ;
  std::vector< std::int8_t > arg3 ;
  std::vector< std::int8_t > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libTAU::settings_pack **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(std::vector< std::int8_t > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::int8_t >");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      libTAU_settings_pack_set_bytes(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1settings_1pack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::settings_pack *arg1 = (libTAU::settings_pack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::settings_pack **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1ignore_1unchoke_1slots_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ignore_unchoke_slots = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1ignore_1unchoke_1slots_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  result = (bool) ((arg1)->ignore_unchoke_slots);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1connection_1limit_1factor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->connection_limit_factor = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1connection_1limit_1factor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  result = (int) ((arg1)->connection_limit_factor);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1label_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->label = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1label_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  result = (std::string *) & ((arg1)->label);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1upload_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1upload_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  result = (int) ((arg1)->upload_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1download_1limit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_limit = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1download_1limit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  result = (int) ((arg1)->download_limit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1upload_1priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->upload_priority = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1upload_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  result = (int) ((arg1)->upload_priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1download_1priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->download_priority = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1info_1download_1priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  result = (int) ((arg1)->download_priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1peer_1class_1info(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::peer_class_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::peer_class_info *)new libTAU::peer_class_info();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::peer_class_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1peer_1class_1info(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::peer_class_info *arg1 = (libTAU::peer_class_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::peer_class_info **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1peer_1class_1type_1filter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::peer_class_type_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::peer_class_type_filter *)new libTAU::peer_class_type_filter();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::peer_class_type_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1type_1filter_1tcp_1socket_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::peer_class_type_filter::socket_type_t result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::peer_class_type_filter::socket_type_t)libTAU::peer_class_type_filter::tcp_socket;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1class_1type_1filter_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  libTAU::peer_class_type_filter *arg1 = (libTAU::peer_class_type_filter *) 0 ;
  libTAU::peer_class_type_filter::socket_type_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::peer_class_type_filter **)&jarg1; 
  arg2 = (libTAU::peer_class_type_filter::socket_type_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  {
    try {
      result = (std::uint32_t)(arg1)->apply(arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1peer_1class_1type_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::peer_class_type_filter *arg1 = (libTAU::peer_class_type_filter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::peer_class_type_filter **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1ip_1filter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::ip_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::ip_filter *)new libTAU::ip_filter();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::ip_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1ip_1filter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::ip_filter *arg1 = 0 ;
  libTAU::ip_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::ip_filter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::ip_filter const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::ip_filter *)new libTAU::ip_filter((libTAU::ip_filter const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::ip_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1filter_1blocked_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::ip_filter::access_flags result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::ip_filter::access_flags)libTAU::ip_filter::blocked;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1filter_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::ip_filter *arg1 = (libTAU::ip_filter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::ip_filter **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::ip_filter const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1filter_1add_1rule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  libTAU::ip_filter *arg1 = (libTAU::ip_filter *) 0 ;
  libTAU::address *arg2 = 0 ;
  libTAU::address *arg3 = 0 ;
  std::uint32_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libTAU::ip_filter **)&jarg1; 
  arg2 = *(libTAU::address **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::address const & reference is null");
    return ;
  } 
  arg3 = *(libTAU::address **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::address const & reference is null");
    return ;
  } 
  arg4 = (std::uint32_t)jarg4; 
  {
    try {
      (arg1)->add_rule((libTAU::address const &)*arg2,(libTAU::address const &)*arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1filter_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::ip_filter *arg1 = (libTAU::ip_filter *) 0 ;
  libTAU::address *arg2 = 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::ip_filter **)&jarg1; 
  arg2 = *(libTAU::address **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::address const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::uint32_t)((libTAU::ip_filter const *)arg1)->access((libTAU::address const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1ip_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::ip_filter *arg1 = (libTAU::ip_filter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::ip_filter **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1port_1filter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::port_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::port_filter *)new libTAU::port_filter();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::port_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1port_1filter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::port_filter *arg1 = 0 ;
  libTAU::port_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::port_filter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::port_filter const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::port_filter *)new libTAU::port_filter((libTAU::port_filter const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::port_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1port_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::port_filter *arg1 = (libTAU::port_filter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::port_filter **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_port_1filter_1blocked_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  libTAU::port_filter::access_flags result;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::port_filter::access_flags)libTAU::port_filter::blocked;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_port_1filter_1add_1rule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  libTAU::port_filter *arg1 = (libTAU::port_filter *) 0 ;
  std::uint16_t arg2 ;
  std::uint16_t arg3 ;
  std::uint32_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::port_filter **)&jarg1; 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (std::uint16_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  {
    try {
      (arg1)->add_rule(arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_port_1filter_1access(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libTAU::port_filter *arg1 = (libTAU::port_filter *) 0 ;
  std::uint16_t arg2 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::port_filter **)&jarg1; 
  arg2 = (std::uint16_t)jarg2; 
  {
    try {
      result = (std::uint32_t)((libTAU::port_filter const *)arg1)->access(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1message_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::communication::message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::communication::message *)new libTAU::communication::message();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::communication::message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1message_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::entry arg1 ;
  libTAU::entry *argp1 ;
  libTAU::communication::message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(libTAU::entry **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::entry");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (libTAU::communication::message *)new libTAU::communication::message(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::communication::message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1message_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  libTAU::communication::message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (libTAU::communication::message *)new libTAU::communication::message(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::communication::message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1message_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  std::int64_t arg1 ;
  libTAU::aux::bytes arg2 ;
  libTAU::aux::bytes arg3 ;
  libTAU::aux::bytes arg4 ;
  libTAU::aux::bytes *argp2 ;
  libTAU::aux::bytes *argp3 ;
  libTAU::aux::bytes *argp4 ;
  libTAU::communication::message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = (std::int64_t)jarg1; 
  argp2 = *(libTAU::aux::bytes **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::aux::bytes");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(libTAU::aux::bytes **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::aux::bytes");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(libTAU::aux::bytes **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::aux::bytes");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (libTAU::communication::message *)new libTAU::communication::message(arg1,arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::communication::message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  std::int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  {
    try {
      result = (std::int64_t)((libTAU::communication::message const *)arg1)->timestamp();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1sender(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  libTAU::aux::bytes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  {
    try {
      result = (libTAU::aux::bytes *) &((libTAU::communication::message const *)arg1)->sender();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::aux::bytes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1receiver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  libTAU::aux::bytes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  {
    try {
      result = (libTAU::aux::bytes *) &((libTAU::communication::message const *)arg1)->receiver();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::aux::bytes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1payload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  libTAU::aux::bytes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  {
    try {
      result = (libTAU::aux::bytes *) &((libTAU::communication::message const *)arg1)->payload();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::aux::bytes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1get_1entry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  libTAU::entry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  {
    try {
      result = (libTAU::entry *) &((libTAU::communication::message const *)arg1)->get_entry();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1encode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  {
    try {
      result = (std::string *) &((libTAU::communication::message const *)arg1)->encode();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1sha256(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  libTAU::sha256_hash *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  {
    try {
      result = (libTAU::sha256_hash *) &((libTAU::communication::message const *)arg1)->sha256();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::sha256_hash **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  {
    try {
      result = ((libTAU::communication::message const *)arg1)->to_string();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::communication::message const *)arg1)->empty();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  libTAU::communication::message *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  arg2 = *(libTAU::communication::message **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::communication::message const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::communication::message const *)arg1)->operator ==((libTAU::communication::message const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  libTAU::communication::message *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  arg2 = *(libTAU::communication::message **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::communication::message const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::communication::message const *)arg1)->operator !=((libTAU::communication::message const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  libTAU::communication::message *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  arg2 = *(libTAU::communication::message **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::communication::message const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::communication::message const *)arg1)->operator <((libTAU::communication::message const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1gt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  libTAU::communication::message *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  arg2 = *(libTAU::communication::message **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::communication::message const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::communication::message const *)arg1)->operator >((libTAU::communication::message const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1lte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  libTAU::communication::message *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  arg2 = *(libTAU::communication::message **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::communication::message const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::communication::message const *)arg1)->operator <=((libTAU::communication::message const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_message_1gte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  libTAU::communication::message *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  arg2 = *(libTAU::communication::message **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::communication::message const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((libTAU::communication::message const *)arg1)->operator >=((libTAU::communication::message const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1message(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::communication::message *arg1 = (libTAU::communication::message *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::communication::message **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1remove_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_remove_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_remove_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_remove_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_remove_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_remove_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_remove_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_remove_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_remove_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_remove_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_remove_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_remove_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1remove_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::remove_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1save_1state_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_save_1state_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_save_1state_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_save_1state_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_save_1state_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_save_1state_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_save_1state_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_save_1state_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_save_1state_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_save_1state_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_save_1state_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_save_state_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1save_1state_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::save_state_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1session_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_session_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1session_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::session_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1reopen_1network_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reopen_1network_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reopen_1network_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reopen_1network_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reopen_1network_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reopen_1network_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reopen_1network_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reopen_1network_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reopen_1network_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reopen_1network_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_reopen_1network_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint8_t_Sc_libTAU_reopen_network_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag >((const libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1reopen_1network_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint8_t,libTAU::reopen_network_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1session_1params_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::settings_pack *arg1 = 0 ;
  libTAU::session_params *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::settings_pack **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::settings_pack const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::session_params *)new libTAU::session_params((libTAU::settings_pack const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_params **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1session_1params_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::session_params *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::session_params *)new libTAU::session_params();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_params **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1session_1params(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::session_params *arg1 = (libTAU::session_params *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::session_params **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1session_1params_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_params *arg1 = 0 ;
  libTAU::session_params *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_params **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::session_params const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::session_params *)new libTAU::session_params((libTAU::session_params const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_params **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1settings_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_params *arg1 = (libTAU::session_params *) 0 ;
  libTAU::settings_pack *arg2 = (libTAU::settings_pack *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_params **)&jarg1; 
  arg2 = *(libTAU::settings_pack **)&jarg2; 
  if (arg1) (arg1)->settings = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1settings_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_params *arg1 = (libTAU::session_params *) 0 ;
  libTAU::settings_pack *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_params **)&jarg1; 
  result = (libTAU::settings_pack *)& ((arg1)->settings);
  *(libTAU::settings_pack **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_params *arg1 = (libTAU::session_params *) 0 ;
  libTAU::session_flags_t *arg2 = (libTAU::session_flags_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_params **)&jarg1; 
  arg2 = *(libTAU::session_flags_t **)&jarg2; 
  if (arg1) (arg1)->flags = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_params *arg1 = (libTAU::session_params *) 0 ;
  libTAU::session_flags_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_params **)&jarg1; 
  result = (libTAU::session_flags_t *)& ((arg1)->flags);
  *(libTAU::session_flags_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1dht_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_params *arg1 = (libTAU::session_params *) 0 ;
  libTAU::dht::dht_state *arg2 = (libTAU::dht::dht_state *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_params **)&jarg1; 
  arg2 = *(libTAU::dht::dht_state **)&jarg2; 
  if (arg1) (arg1)->dht_state = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1dht_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_params *arg1 = (libTAU::session_params *) 0 ;
  libTAU::dht::dht_state *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_params **)&jarg1; 
  result = (libTAU::dht::dht_state *)& ((arg1)->dht_state);
  *(libTAU::dht::dht_state **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1dht_1storage_1constructor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::session_params *arg1 = (libTAU::session_params *) 0 ;
  libTAU::dht::dht_storage_constructor_type arg2 ;
  libTAU::dht::dht_storage_constructor_type *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_params **)&jarg1; 
  argp2 = *(libTAU::dht::dht_storage_constructor_type **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::dht::dht_storage_constructor_type");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->dht_storage_constructor = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1dht_1storage_1constructor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_params *arg1 = (libTAU::session_params *) 0 ;
  libTAU::dht::dht_storage_constructor_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_params **)&jarg1; 
  result =  ((arg1)->dht_storage_constructor);
  *(libTAU::dht::dht_storage_constructor_type **)&jresult = new libTAU::dht::dht_storage_constructor_type((const libTAU::dht::dht_storage_constructor_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1ext_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_params *arg1 = (libTAU::session_params *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_params **)&jarg1; 
  arg2 = *(std::map< std::string,std::string > **)&jarg2; 
  if (arg1) (arg1)->ext_state = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1ext_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_params *arg1 = (libTAU::session_params *) 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_params **)&jarg1; 
  result = (std::map< std::string,std::string > *)& ((arg1)->ext_state);
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1ip_1filter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_params *arg1 = (libTAU::session_params *) 0 ;
  libTAU::ip_filter *arg2 = (libTAU::ip_filter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_params **)&jarg1; 
  arg2 = *(libTAU::ip_filter **)&jarg2; 
  if (arg1) (arg1)->ip_filter = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1ip_1filter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_params *arg1 = (libTAU::session_params *) 0 ;
  libTAU::ip_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_params **)&jarg1; 
  result = (libTAU::ip_filter *)& ((arg1)->ip_filter);
  *(libTAU::ip_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1read_1session_1params_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  lt::bdecode_node *arg1 = 0 ;
  lt::save_state_flags_t arg2 ;
  lt::save_state_flags_t *argp2 ;
  lt::session_params result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lt::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::bdecode_node const & reference is null");
    return 0;
  } 
  argp2 = *(lt::save_state_flags_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null lt::save_state_flags_t");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_session_params_read_session_params__SWIG_0((libTAU::bdecode_node const &)*arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(lt::session_params **)&jresult = new lt::session_params((const lt::session_params &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1read_1session_1params_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lt::bdecode_node *arg1 = 0 ;
  lt::session_params result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lt::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::bdecode_node const & reference is null");
    return 0;
  } 
  {
    try {
      result = libTAU_session_params_read_session_params__SWIG_0((libTAU::bdecode_node const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(lt::session_params **)&jresult = new lt::session_params((const lt::session_params &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1write_1session_1params_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  lt::session_params *arg1 = 0 ;
  lt::save_state_flags_t arg2 ;
  lt::save_state_flags_t *argp2 ;
  lt::entry result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lt::session_params **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::session_params const & reference is null");
    return 0;
  } 
  argp2 = *(lt::save_state_flags_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null lt::save_state_flags_t");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_session_params_write_session_params__SWIG_0((libTAU::session_params const &)*arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(lt::entry **)&jresult = new lt::entry((const lt::entry &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1write_1session_1params_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lt::session_params *arg1 = 0 ;
  lt::entry result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lt::session_params **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::session_params const & reference is null");
    return 0;
  } 
  {
    try {
      result = libTAU_session_params_write_session_params__SWIG_0((libTAU::session_params const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(lt::entry **)&jresult = new lt::entry((const lt::entry &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1write_1session_1params_1buf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  lt::session_params *arg1 = 0 ;
  lt::save_state_flags_t arg2 ;
  lt::save_state_flags_t *argp2 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(lt::session_params **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::session_params const & reference is null");
    return 0;
  } 
  argp2 = *(lt::save_state_flags_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null lt::save_state_flags_t");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_session_params_write_session_params_buf__SWIG_0((libTAU::session_params const &)*arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1params_1write_1session_1params_1buf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lt::session_params *arg1 = 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lt::session_params **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::session_params const & reference is null");
    return 0;
  } 
  {
    try {
      result = libTAU_session_params_write_session_params_buf__SWIG_0((libTAU::session_params const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1session_1handle_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::session_handle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::session_handle *)new libTAU::session_handle();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_handle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1session_1handle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_handle *arg1 = 0 ;
  libTAU::session_handle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::session_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::session_handle *)new libTAU::session_handle((libTAU::session_handle const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_handle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::session_handle const *)arg1)->is_valid();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1save_1settings_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::save_state_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::save_state_flags_tag > *)&libTAU::session_handle::save_settings;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::save_state_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1save_1dht_1state_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::save_state_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::save_state_flags_tag > *)&libTAU::session_handle::save_dht_state;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::save_state_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1save_1extension_1state_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::save_state_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::save_state_flags_tag > *)&libTAU::session_handle::save_extension_state;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::save_state_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1save_1ip_1filter_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::save_state_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::save_state_flags_tag > *)&libTAU::session_handle::save_ip_filter;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::save_state_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1session_1state_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::save_state_flags_t arg2 ;
  libTAU::save_state_flags_t *argp2 ;
  libTAU::session_params result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  argp2 = *(libTAU::save_state_flags_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::save_state_flags_t");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((libTAU::session_handle const *)arg1)->session_state(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_params **)&jresult = new libTAU::session_params((const libTAU::session_params &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1session_1state_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::session_params result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::session_handle const *)arg1)->session_state();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_params **)&jresult = new libTAU::session_params((const libTAU::session_params &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1post_1session_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      (arg1)->post_session_stats();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1post_1dht_1stats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      (arg1)->post_dht_stats();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1set_1dht_1state_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::dht::dht_state *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(libTAU::dht::dht_state **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::dht::dht_state const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_dht_state((libTAU::dht::dht_state const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1is_1dht_1running(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::session_handle const *)arg1)->is_dht_running();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1add_1dht_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  std::pair< std::string,int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(std::pair< std::string,int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,int > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add_dht_node((std::pair< std::string,int > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1dht_1get_1item_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::sha256_hash *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::sha256_hash const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->dht_get_item((libTAU::sha256_hash const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1dht_1put_1item_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::entry arg2 ;
  libTAU::entry *argp2 ;
  libTAU::sha256_hash result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  argp2 = *(libTAU::entry **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::entry");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (arg1)->dht_put_item(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::sha256_hash **)&jresult = new libTAU::sha256_hash((const libTAU::sha256_hash &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1dht_1live_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::sha256_hash *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(libTAU::sha256_hash **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::sha256_hash const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->dht_live_nodes((libTAU::sha256_hash const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1set_1ip_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::ip_filter arg2 ;
  libTAU::ip_filter *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  argp2 = *(libTAU::ip_filter **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::ip_filter");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->set_ip_filter(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1get_1ip_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::ip_filter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::session_handle const *)arg1)->get_ip_filter();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::ip_filter **)&jresult = new libTAU::ip_filter((const libTAU::ip_filter &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1set_1port_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::port_filter *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(libTAU::port_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::port_filter const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_port_filter((libTAU::port_filter const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1listen_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      result = (unsigned short)((libTAU::session_handle const *)arg1)->listen_port();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1ssl_1listen_1port(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      result = (unsigned short)((libTAU::session_handle const *)arg1)->ssl_listen_port();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1is_1listening(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::session_handle const *)arg1)->is_listening();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1set_1peer_1class_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::ip_filter *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(libTAU::ip_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::ip_filter const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_peer_class_filter((libTAU::ip_filter const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1get_1peer_1class_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::ip_filter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::session_handle const *)arg1)->get_peer_class_filter();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::ip_filter **)&jresult = new libTAU::ip_filter((const libTAU::ip_filter &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1set_1peer_1class_1type_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::peer_class_type_filter *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(libTAU::peer_class_type_filter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::peer_class_type_filter const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_peer_class_type_filter((libTAU::peer_class_type_filter const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1get_1peer_1class_1type_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::peer_class_type_filter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::session_handle const *)arg1)->get_peer_class_type_filter();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::peer_class_type_filter **)&jresult = new libTAU::peer_class_type_filter((const libTAU::peer_class_type_filter &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1set_1loop_1time_1interval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_loop_time_interval(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1unset_1chatting_1friend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      (arg1)->unset_chatting_friend();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1add_1new_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::communication::message arg2 ;
  libTAU::communication::message *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  argp2 = *(libTAU::communication::message **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::communication::message");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)(arg1)->add_new_message(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1delete_1files_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::remove_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::remove_flags_tag > *)&libTAU::session_handle::delete_files;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::remove_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1delete_1partfile_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::remove_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::remove_flags_tag > *)&libTAU::session_handle::delete_partfile;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::remove_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1paused_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::session_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::session_flags_tag > *)&libTAU::session_handle::paused;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::session_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1apply_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::settings_pack *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(libTAU::settings_pack **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::settings_pack const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->apply_settings((libTAU::settings_pack const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1get_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::settings_pack result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      result = ((libTAU::session_handle const *)arg1)->get_settings();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::settings_pack **)&jresult = new libTAU::settings_pack((const libTAU::settings_pack &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1pop_1alerts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  std::vector< libTAU::alert * > *arg2 = (std::vector< libTAU::alert * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(std::vector< libTAU::alert * > **)&jarg2; 
  {
    try {
      (arg1)->pop_alerts(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1udp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::portmap_protocol result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::portmap_protocol)libTAU::session_handle::udp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1tcp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum libTAU::portmap_protocol result;
  
  (void)jenv;
  (void)jcls;
  result = (enum libTAU::portmap_protocol)libTAU::session_handle::tcp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1reopen_1map_1ports_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned char,libTAU::reopen_network_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned char,libTAU::reopen_network_flags_tag > *)&libTAU::session_handle::reopen_map_ports;
  *(libTAU::flags::bitfield_flag< unsigned char,libTAU::reopen_network_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1reopen_1network_1sockets_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::reopen_network_flags_t arg2 ;
  libTAU::reopen_network_flags_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  argp2 = *(libTAU::reopen_network_flags_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::reopen_network_flags_t");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->reopen_network_sockets(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1reopen_1network_1sockets_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      (arg1)->reopen_network_sockets();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1dht_1get_1item_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  std::array< std::int8_t,32 > *arg2 = 0 ;
  std::vector< std::int8_t > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(std::array< std::int8_t,32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< std::int8_t,32 > & reference is null");
    return ;
  } 
  arg3 = *(std::vector< std::int8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > & reference is null");
    return ;
  } 
  {
    try {
      libTAU_session_handle_dht_get_item__SWIG_1(arg1,*arg2,*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1dht_1put_1item_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  std::array< std::int8_t,32 > *arg2 = 0 ;
  std::array< std::int8_t,64 > *arg3 = 0 ;
  libTAU::entry *arg4 = 0 ;
  std::vector< int8_t > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(std::array< std::int8_t,32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< std::int8_t,32 > & reference is null");
    return ;
  } 
  arg3 = *(std::array< std::int8_t,64 > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< std::int8_t,64 > & reference is null");
    return ;
  } 
  arg4 = *(libTAU::entry **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::entry & reference is null");
    return ;
  } 
  arg5 = *(std::vector< int8_t > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return ;
  } 
  {
    try {
      libTAU_session_handle_dht_put_item__SWIG_1(arg1,*arg2,*arg3,*arg4,*arg5);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1wait_1for_1alert_1ms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  std::int64_t arg2 ;
  libTAU::alert *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = (std::int64_t)jarg2; 
  {
    try {
      result = (libTAU::alert *)libTAU_session_handle_wait_for_alert_ms(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::alert **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1set_1alert_1notify_1callback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  alert_notify_callback *arg2 = (alert_notify_callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(alert_notify_callback **)&jarg2; 
  {
    try {
      libTAU_session_handle_set_alert_notify_callback(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1add_1port_1mapping_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  libTAU::portmap_protocol arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = (libTAU::portmap_protocol)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = libTAU_session_handle_add_port_mapping_ex(arg1,arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1delete_1port_1mapping_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      libTAU_session_handle_delete_port_mapping_ex(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1new_1account_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  std::array< std::int8_t,32 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(std::array< std::int8_t,32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< std::int8_t,32 > & reference is null");
    return ;
  } 
  {
    try {
      libTAU_session_handle_new_account_seed(arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1add_1new_1friend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  std::array< std::int8_t,32 > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(std::array< std::int8_t,32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< std::int8_t,32 > & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)libTAU_session_handle_add_new_friend(arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1delete_1friend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  std::array< std::int8_t,32 > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(std::array< std::int8_t,32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< std::int8_t,32 > & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)libTAU_session_handle_delete_friend(arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1set_1chatting_1friend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  std::array< std::int8_t,32 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  arg2 = *(std::array< std::int8_t,32 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::array< std::int8_t,32 > & reference is null");
    return ;
  } 
  {
    try {
      libTAU_session_handle_set_chatting_friend(arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1get_1friend_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  std::array< std::int8_t,32 > arg2 ;
  std::array< std::int8_t,32 > *argp2 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  argp2 = *(std::array< std::int8_t,32 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::array< std::int8_t,32 >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_session_handle_get_friend_info(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1update_1friend_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  std::array< std::int8_t,32 > arg2 ;
  std::vector< std::int8_t > arg3 ;
  std::array< std::int8_t,32 > *argp2 ;
  std::vector< std::int8_t > *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  argp2 = *(std::array< std::int8_t,32 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::array< std::int8_t,32 >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::vector< std::int8_t > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::int8_t >");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (bool)libTAU_session_handle_update_friend_info(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1handle_1set_1active_1friends(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  std::vector< std::array< std::int8_t,32 > > arg2 ;
  std::vector< std::array< std::int8_t,32 > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  argp2 = *(std::vector< std::array< std::int8_t,32 > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::array< std::int8_t,32 > >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      libTAU_session_handle_set_active_friends(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1session_1handle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::session_handle *arg1 = (libTAU::session_handle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::session_handle **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_min_1memory_1usage(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::settings_pack result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::min_memory_usage();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::settings_pack **)&jresult = new libTAU::settings_pack((const libTAU::settings_pack &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_high_1performance_1seed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::settings_pack result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::high_performance_seed();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::settings_pack **)&jresult = new libTAU::settings_pack((const libTAU::settings_pack &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1session_1proxy_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::session_proxy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::session_proxy *)new libTAU::session_proxy();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_proxy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1session_1proxy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::session_proxy *arg1 = (libTAU::session_proxy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::session_proxy **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1session_1proxy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_proxy *arg1 = 0 ;
  libTAU::session_proxy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_proxy **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::session_proxy const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::session_proxy *)new libTAU::session_proxy((libTAU::session_proxy const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_proxy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1session_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session_params *arg1 = 0 ;
  libTAU::session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session_params **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::session_params const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::session *)new libTAU::session((libTAU::session_params const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1session_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::session *)new libTAU::session();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1session_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session *arg1 = 0 ;
  libTAU::session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::session && reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::session *)new libTAU::session((libTAU::session &&)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1session(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::session *arg1 = (libTAU::session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::session **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1abort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session *arg1 = (libTAU::session *) 0 ;
  libTAU::session_proxy result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session **)&jarg1; 
  {
    try {
      result = (arg1)->abort();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::session_proxy **)&jresult = new libTAU::session_proxy((const libTAU::session_proxy &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1modification_1time_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > *)&libTAU::create_torrent::modification_time;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1symlinks_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > *)&libTAU::create_torrent::symlinks;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1v2_1only_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > *)&libTAU::create_torrent::v2_only;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1v1_1only_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > *)&libTAU::create_torrent::v1_only;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1canonical_1files_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > *)&libTAU::create_torrent::canonical_files;
  *(libTAU::flags::bitfield_flag< unsigned int,libTAU::create_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1create_1torrent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  libTAU::file_storage *arg1 = 0 ;
  int arg2 ;
  libTAU::create_flags_t arg3 ;
  libTAU::create_flags_t *argp3 ;
  libTAU::create_torrent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libTAU::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::file_storage & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  argp3 = *(libTAU::create_flags_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::create_flags_t");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (libTAU::create_torrent *)new libTAU::create_torrent(*arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::create_torrent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1create_1torrent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  libTAU::file_storage *arg1 = 0 ;
  int arg2 ;
  libTAU::create_torrent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::file_storage & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  {
    try {
      result = (libTAU::create_torrent *)new libTAU::create_torrent(*arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::create_torrent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1create_1torrent_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::file_storage *arg1 = 0 ;
  libTAU::create_torrent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::file_storage & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::create_torrent *)new libTAU::create_torrent(*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::create_torrent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1create_1torrent_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::torrent_info *arg1 = 0 ;
  libTAU::create_torrent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::torrent_info const & reference is null");
    return 0;
  } 
  {
    try {
      result = (libTAU::create_torrent *)new libTAU::create_torrent((libTAU::torrent_info const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::create_torrent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1create_1torrent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1generate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  libTAU::entry result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  {
    try {
      result = ((libTAU::create_torrent const *)arg1)->generate();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = new libTAU::entry((const libTAU::entry &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1files(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  libTAU::file_storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  {
    try {
      result = (libTAU::file_storage *) &((libTAU::create_torrent const *)arg1)->files();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::file_storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1set_1comment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->set_comment((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1set_1creator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    try {
      (arg1)->set_creator((char const *)arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1set_1creation_1date(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  std::time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  arg2 = (std::time_t)jarg2; 
  {
    try {
      (arg1)->set_creation_date(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1set_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jlong jarg3, jobject jarg3_) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  piece_index_t arg2 ;
  libTAU::sha1_hash *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  arg3 = *(libTAU::sha1_hash **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::sha1_hash const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_hash(arg2,(libTAU::sha1_hash const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1add_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  std::pair< std::string,int > arg2 ;
  std::pair< std::string,int > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  argp2 = *(std::pair< std::string,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::pair< std::string,int >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->add_node(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1set_1priv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->set_priv(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1priv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::create_torrent const *)arg1)->priv();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1is_1v2_1only(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::create_torrent const *)arg1)->is_v2_only();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1is_1v1_1only(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  {
    try {
      result = (bool)((libTAU::create_torrent const *)arg1)->is_v1_only();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1num_1pieces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  {
    try {
      result = (int)((libTAU::create_torrent const *)arg1)->num_pieces();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1piece_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  {
    try {
      result = (int)((libTAU::create_torrent const *)arg1)->piece_length();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1piece_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2) {
  jint jresult = 0 ;
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  piece_index_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  {
    arg2 = piece_index_t(static_cast<std::int32_t>(jarg2));
  }
  {
    try {
      result = (int)((libTAU::create_torrent const *)arg1)->piece_size(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1add_1similar_1torrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  libTAU::sha1_hash arg2 ;
  libTAU::sha1_hash *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  argp2 = *(libTAU::sha1_hash **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::sha1_hash");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->add_similar_torrent(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1add_1url_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      libTAU_create_torrent_add_url_seed(arg1,(std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1add_1tracker_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      libTAU_create_torrent_add_tracker__SWIG_0(arg1,(std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1add_1tracker_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  {
    try {
      libTAU_create_torrent_add_tracker__SWIG_1(arg1,(std::string const &)*arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1add_1collection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      libTAU_create_torrent_add_collection(arg1,(std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1set_1root_1cert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  std::vector< std::int8_t > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > const & reference is null");
    return ;
  } 
  {
    try {
      libTAU_create_torrent_set_root_cert(arg1,(std::vector< signed char > const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1torrent_1set_1hash2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, int jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  libTAU::create_torrent *arg1 = (libTAU::create_torrent *) 0 ;
  file_index_t arg2 ;
  int arg3 ;
  libTAU::sha256_hash *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(libTAU::create_torrent **)&jarg1; 
  {
    arg2 = file_index_t(static_cast<std::int32_t>(jarg2));
  }
  arg3 = (int)jarg3; 
  arg4 = *(libTAU::sha256_hash **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::sha256_hash const & reference is null");
    return ;
  } 
  {
    try {
      libTAU_create_torrent_set_hash2(arg1,arg2,arg3,(libTAU::digest32< 256 > const &)*arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1files_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  libTAU::file_storage *arg1 = 0 ;
  std::string *arg2 = 0 ;
  libTAU::create_flags_t arg3 ;
  libTAU::create_flags_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(libTAU::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::file_storage & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(libTAU::create_flags_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::create_flags_t");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      libTAU::add_files(*arg1,(std::string const &)*arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1files_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  libTAU::file_storage *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::file_storage & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      libTAU::add_files(*arg1,(std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1create_1flags_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *)new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag >();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1flags_1t_1all(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag >::SWIGTEMPLATEDISAMBIGUATOR all();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1flags_1t_1non_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg1; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__non_zero(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1flags_1t_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__eq(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1flags_1t_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__ne(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1flags_1t_1or_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__or_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1flags_1t_1and_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__and_(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1flags_1t_1xor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > arg2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const *argp2 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg1; 
  argp2 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > const");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__xor(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1flags_1t_1inv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *) 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__inv(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1flags_1t_1to_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg1; 
  {
    try {
      result = (int)libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__to_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_create_1flags_1t_1from_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = libTAU_flags_bitfield_flag_Sl_std_uint32_t_Sc_libTAU_create_flags_tag_Sg__from_int(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jresult = new libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag >((const libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1create_1flags_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *arg1 = (libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::flags::bitfield_flag< std::uint32_t,libTAU::create_flags_tag > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1metric_1value_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::stats_metric *arg1 = (libTAU::stats_metric *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::stats_metric **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->value_index = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1metric_1value_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::stats_metric *arg1 = (libTAU::stats_metric *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::stats_metric **)&jarg1; 
  result = (int) ((arg1)->value_index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1metric_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  libTAU::stats_metric *arg1 = (libTAU::stats_metric *) 0 ;
  libTAU::metric_type_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::stats_metric **)&jarg1; 
  arg2 = (libTAU::metric_type_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1metric_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  libTAU::stats_metric *arg1 = (libTAU::stats_metric *) 0 ;
  libTAU::metric_type_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::stats_metric **)&jarg1; 
  result = (libTAU::metric_type_t) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_stats_1metric_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::stats_metric *arg1 = (libTAU::stats_metric *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::stats_metric **)&jarg1; 
  {
    try {
      result = libTAU_stats_metric_get_name(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1stats_1metric(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libTAU::stats_metric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (libTAU::stats_metric *)new libTAU::stats_metric();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::stats_metric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1stats_1metric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libTAU::stats_metric *arg1 = (libTAU::stats_metric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libTAU::stats_metric **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1metrics(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< libTAU::stats_metric > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = libTAU::session_stats_metrics();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< libTAU::stats_metric > **)&jresult = new std::vector< libTAU::stats_metric >((const std::vector< libTAU::stats_metric > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_LIBTAU_1VERSION_1MAJOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_LIBTAU_1VERSION_1MINOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_LIBTAU_1VERSION_1TINY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_LIBTAU_1VERSION_1NUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(((0*10000) +(0*100) +0));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_LIBTAU_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("0.0.0");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_version(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (char *)libTAU::version();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_make_1magnet_1uri_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::torrent_handle *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_handle **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::torrent_handle const & reference is null");
    return 0;
  } 
  {
    try {
      result = libTAU::make_magnet_uri((libTAU::torrent_handle const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_make_1magnet_1uri_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libTAU::torrent_info *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::torrent_info **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::torrent_info const & reference is null");
    return 0;
  } 
  {
    try {
      result = libTAU::make_magnet_uri((libTAU::torrent_info const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_generate_1fingerprint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jstring jresult = 0 ;
  std::string arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = libTAU::generate_fingerprint(arg1,arg2,arg3,arg4,arg5);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_generate_1fingerprint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jstring jresult = 0 ;
  std::string arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = libTAU::generate_fingerprint(arg1,arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_generate_1fingerprint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jstring jresult = 0 ;
  std::string arg1 ;
  int arg2 ;
  int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = libTAU::generate_fingerprint(arg1,arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_generate_1fingerprint_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jstring jresult = 0 ;
  std::string arg1 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  {
    try {
      result = libTAU::generate_fingerprint(arg1,arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_read_1resume_1data_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = 0 ;
  libTAU::error_code *arg2 = 0 ;
  int arg3 ;
  libTAU::add_torrent_params result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bdecode_node const & reference is null");
    return 0;
  } 
  arg2 = *(libTAU::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::error_code & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  {
    try {
      result = libTAU::read_resume_data((libTAU::bdecode_node const &)*arg1,*arg2,arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::add_torrent_params **)&jresult = new libTAU::add_torrent_params((const libTAU::add_torrent_params &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_read_1resume_1data_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  libTAU::bdecode_node *arg1 = 0 ;
  libTAU::error_code *arg2 = 0 ;
  libTAU::add_torrent_params result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libTAU::bdecode_node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::bdecode_node const & reference is null");
    return 0;
  } 
  arg2 = *(libTAU::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = libTAU::read_resume_data((libTAU::bdecode_node const &)*arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::add_torrent_params **)&jresult = new libTAU::add_torrent_params((const libTAU::add_torrent_params &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_write_1resume_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::add_torrent_params *arg1 = 0 ;
  libTAU::entry result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::add_torrent_params **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::add_torrent_params const & reference is null");
    return 0;
  } 
  {
    try {
      result = libTAU::write_resume_data((libTAU::add_torrent_params const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::entry **)&jresult = new libTAU::entry((const libTAU::entry &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1alert_1notify_1callback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  alert_notify_callback *arg1 = (alert_notify_callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(alert_notify_callback **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1notify_1callback_1on_1alert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  alert_notify_callback *arg1 = (alert_notify_callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(alert_notify_callback **)&jarg1; 
  {
    try {
      (arg1)->on_alert();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1notify_1callback_1on_1alertSwigExplicitalert_1notify_1callback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  alert_notify_callback *arg1 = (alert_notify_callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(alert_notify_callback **)&jarg1; 
  {
    try {
      (arg1)->alert_notify_callback::on_alert();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1alert_1notify_1callback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  alert_notify_callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (alert_notify_callback *)new SwigDirector_alert_notify_callback(jenv);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(alert_notify_callback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1notify_1callback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  alert_notify_callback *obj = *((alert_notify_callback **)&objarg);
  (void)jcls;
  SwigDirector_alert_notify_callback *director = static_cast<SwigDirector_alert_notify_callback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alert_1notify_1callback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  alert_notify_callback *obj = *((alert_notify_callback **)&objarg);
  SwigDirector_alert_notify_callback *director = static_cast<SwigDirector_alert_notify_callback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_find_1metric_1idx_1ex(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (int)find_metric_idx_ex(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_boost_1lib_1version(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (char *)boost_lib_version();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_openssl_1version_1text(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (char *)openssl_version_text();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_arm_1neon_1support(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bool)arm_neon_support();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ed25519_1create_1seed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::array< std::int8_t,32 > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = ed25519_create_seed();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::array< std::int8_t,32 > **)&jresult = new std::array< std::int8_t,32 >((const std::array< std::int8_t,32 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ed25519_1create_1keypair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int8_t > *arg1 = 0 ;
  std::pair< std::vector< int8_t >,std::vector< int8_t > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  {
    try {
      result = ed25519_create_keypair(*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::pair< std::vector< int8_t >,std::vector< int8_t > > **)&jresult = new std::pair< std::vector< int8_t >,std::vector< int8_t > >((const std::pair< std::vector< int8_t >,std::vector< int8_t > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ed25519_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< int8_t > *arg1 = 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  std::vector< int8_t > *arg3 = 0 ;
  std::vector< int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::vector< int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< int8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  {
    try {
      result = ed25519_sign(*arg1,*arg2,*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< int8_t > **)&jresult = new std::vector< int8_t >((const std::vector< int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ed25519_1verify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  std::vector< int8_t > *arg1 = 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  std::vector< int8_t > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::vector< int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< int8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)ed25519_verify(*arg1,*arg2,*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ed25519_1add_1scalar_1public(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< int8_t > *arg1 = 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  std::vector< int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  {
    try {
      result = ed25519_add_scalar_public(*arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< int8_t > **)&jresult = new std::vector< int8_t >((const std::vector< int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ed25519_1add_1scalar_1secret(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< int8_t > *arg1 = 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  std::vector< int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  {
    try {
      result = ed25519_add_scalar_secret(*arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< int8_t > **)&jresult = new std::vector< int8_t >((const std::vector< int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ed25519_1key_1exchange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< int8_t > *arg1 = 0 ;
  std::vector< int8_t > *arg2 = 0 ;
  std::vector< int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< int8_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > & reference is null");
    return 0;
  } 
  {
    try {
      result = ed25519_key_exchange(*arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< int8_t > **)&jresult = new std::vector< int8_t >((const std::vector< int8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1interface_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ip_interface *arg1 = (ip_interface *) 0 ;
  libTAU::address *arg2 = (libTAU::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ip_interface **)&jarg1; 
  arg2 = *(libTAU::address **)&jarg2; 
  if (arg1) (arg1)->interface_address = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1interface_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ip_interface *arg1 = (ip_interface *) 0 ;
  libTAU::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_interface **)&jarg1; 
  result = (libTAU::address *)& ((arg1)->interface_address);
  *(libTAU::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1netmask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ip_interface *arg1 = (ip_interface *) 0 ;
  libTAU::address *arg2 = (libTAU::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ip_interface **)&jarg1; 
  arg2 = *(libTAU::address **)&jarg2; 
  if (arg1) (arg1)->netmask = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1netmask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ip_interface *arg1 = (ip_interface *) 0 ;
  libTAU::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_interface **)&jarg1; 
  result = (libTAU::address *)& ((arg1)->netmask);
  *(libTAU::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ip_interface *arg1 = (ip_interface *) 0 ;
  std::vector< std::int8_t > *arg2 = (std::vector< std::int8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ip_interface **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ip_interface *arg1 = (ip_interface *) 0 ;
  std::vector< std::int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_interface **)&jarg1; 
  result = (std::vector< std::int8_t > *)& ((arg1)->name);
  *(std::vector< std::int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1friendly_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ip_interface *arg1 = (ip_interface *) 0 ;
  std::vector< std::int8_t > *arg2 = (std::vector< std::int8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ip_interface **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2; 
  if (arg1) (arg1)->friendly_name = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1friendly_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ip_interface *arg1 = (ip_interface *) 0 ;
  std::vector< std::int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_interface **)&jarg1; 
  result = (std::vector< std::int8_t > *)& ((arg1)->friendly_name);
  *(std::vector< std::int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1description_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ip_interface *arg1 = (ip_interface *) 0 ;
  std::vector< std::int8_t > *arg2 = (std::vector< std::int8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ip_interface **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2; 
  if (arg1) (arg1)->description = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1description_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ip_interface *arg1 = (ip_interface *) 0 ;
  std::vector< std::int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_interface **)&jarg1; 
  result = (std::vector< std::int8_t > *)& ((arg1)->description);
  *(std::vector< std::int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1preferred_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ip_interface *arg1 = (ip_interface *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_interface **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->preferred = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1interface_1preferred_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ip_interface *arg1 = (ip_interface *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_interface **)&jarg1; 
  result = (bool) ((arg1)->preferred);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1ip_1interface(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ip_interface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (ip_interface *)new ip_interface();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(ip_interface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1ip_1interface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ip_interface *arg1 = (ip_interface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ip_interface **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1destination_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ip_route *arg1 = (ip_route *) 0 ;
  libTAU::address *arg2 = (libTAU::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ip_route **)&jarg1; 
  arg2 = *(libTAU::address **)&jarg2; 
  if (arg1) (arg1)->destination = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1destination_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ip_route *arg1 = (ip_route *) 0 ;
  libTAU::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_route **)&jarg1; 
  result = (libTAU::address *)& ((arg1)->destination);
  *(libTAU::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1netmask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ip_route *arg1 = (ip_route *) 0 ;
  libTAU::address *arg2 = (libTAU::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ip_route **)&jarg1; 
  arg2 = *(libTAU::address **)&jarg2; 
  if (arg1) (arg1)->netmask = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1netmask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ip_route *arg1 = (ip_route *) 0 ;
  libTAU::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_route **)&jarg1; 
  result = (libTAU::address *)& ((arg1)->netmask);
  *(libTAU::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1gateway_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ip_route *arg1 = (ip_route *) 0 ;
  libTAU::address *arg2 = (libTAU::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ip_route **)&jarg1; 
  arg2 = *(libTAU::address **)&jarg2; 
  if (arg1) (arg1)->gateway = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1gateway_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ip_route *arg1 = (ip_route *) 0 ;
  libTAU::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_route **)&jarg1; 
  result = (libTAU::address *)& ((arg1)->gateway);
  *(libTAU::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1source_1hint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ip_route *arg1 = (ip_route *) 0 ;
  libTAU::address *arg2 = (libTAU::address *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ip_route **)&jarg1; 
  arg2 = *(libTAU::address **)&jarg2; 
  if (arg1) (arg1)->source_hint = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1source_1hint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ip_route *arg1 = (ip_route *) 0 ;
  libTAU::address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_route **)&jarg1; 
  result = (libTAU::address *)& ((arg1)->source_hint);
  *(libTAU::address **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ip_route *arg1 = (ip_route *) 0 ;
  std::vector< std::int8_t > *arg2 = (std::vector< std::int8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ip_route **)&jarg1; 
  arg2 = *(std::vector< std::int8_t > **)&jarg2; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ip_route *arg1 = (ip_route *) 0 ;
  std::vector< std::int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_route **)&jarg1; 
  result = (std::vector< std::int8_t > *)& ((arg1)->name);
  *(std::vector< std::int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1mtu_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ip_route *arg1 = (ip_route *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_route **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mtu = arg2;
}


SWIGEXPORT jint JNICALL Java_org_libTAU4j_swig_libTAU_1jni_ip_1route_1mtu_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ip_route *arg1 = (ip_route *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ip_route **)&jarg1; 
  result = (int) ((arg1)->mtu);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1ip_1route(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ip_route *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (ip_route *)new ip_route();
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(ip_route **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1ip_1route(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ip_route *arg1 = (ip_route *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ip_route **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_enum_1net_1interfaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session *arg1 = (libTAU::session *) 0 ;
  std::vector< ip_interface > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session **)&jarg1; 
  {
    try {
      result = enum_net_interfaces(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< ip_interface > **)&jresult = new std::vector< ip_interface >((const std::vector< ip_interface > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_enum_1routes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libTAU::session *arg1 = (libTAU::session *) 0 ;
  std::vector< ip_route > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libTAU::session **)&jarg1; 
  {
    try {
      result = enum_routes(arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< ip_route > **)&jresult = new std::vector< ip_route >((const std::vector< ip_route > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_get_1gateway(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ip_interface *arg1 = 0 ;
  std::vector< ip_route > *arg2 = 0 ;
  libTAU::address result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ip_interface **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ip_interface const & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< ip_route > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ip_route > & reference is null");
    return 0;
  } 
  {
    try {
      result = get_gateway((ip_interface const &)*arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(libTAU::address **)&jresult = new libTAU::address((const libTAU::address &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_libTAU4j_swig_libTAU_1jni_device_1for_1address(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jstring jresult = 0 ;
  libTAU::session *arg1 = (libTAU::session *) 0 ;
  libTAU::address arg2 ;
  boost::system::error_code *arg3 = 0 ;
  libTAU::address *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(libTAU::session **)&jarg1; 
  argp2 = *(libTAU::address **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::address");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(boost::system::error_code **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::system::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = device_for_address(arg1,arg2,*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1add_1files_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  add_files_listener *arg1 = (add_files_listener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(add_files_listener **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1files_1listener_1pred(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  add_files_listener *arg1 = (add_files_listener *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(add_files_listener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)(arg1)->pred((std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1files_1listener_1predSwigExplicitadd_1files_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  add_files_listener *arg1 = (add_files_listener *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(add_files_listener **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)(arg1)->add_files_listener::pred((std::string const &)*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1add_1files_1listener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  add_files_listener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (add_files_listener *)new SwigDirector_add_files_listener(jenv);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(add_files_listener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1files_1listener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  add_files_listener *obj = *((add_files_listener **)&objarg);
  (void)jcls;
  SwigDirector_add_files_listener *director = static_cast<SwigDirector_add_files_listener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1files_1listener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  add_files_listener *obj = *((add_files_listener **)&objarg);
  SwigDirector_add_files_listener *director = static_cast<SwigDirector_add_files_listener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_add_1files_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  libTAU::file_storage *arg1 = 0 ;
  std::string *arg2 = 0 ;
  add_files_listener *arg3 = (add_files_listener *) 0 ;
  libTAU::create_flags_t arg4 ;
  libTAU::create_flags_t *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(libTAU::file_storage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::file_storage & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(add_files_listener **)&jarg3; 
  argp4 = *(libTAU::create_flags_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null libTAU::create_flags_t");
    return ;
  }
  arg4 = *argp4; 
  {
    try {
      add_files_ex(*arg1,(std::string const &)*arg2,arg3,arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_delete_1set_1piece_1hashes_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  set_piece_hashes_listener *arg1 = (set_piece_hashes_listener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(set_piece_hashes_listener **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_set_1piece_1hashes_1listener_1progress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  set_piece_hashes_listener *arg1 = (set_piece_hashes_listener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(set_piece_hashes_listener **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->progress(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_set_1piece_1hashes_1listener_1progressSwigExplicitset_1piece_1hashes_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  set_piece_hashes_listener *arg1 = (set_piece_hashes_listener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(set_piece_hashes_listener **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_piece_hashes_listener::progress(arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_new_1set_1piece_1hashes_1listener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  set_piece_hashes_listener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (set_piece_hashes_listener *)new SwigDirector_set_piece_hashes_listener(jenv);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(set_piece_hashes_listener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_set_1piece_1hashes_1listener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  set_piece_hashes_listener *obj = *((set_piece_hashes_listener **)&objarg);
  (void)jcls;
  SwigDirector_set_piece_hashes_listener *director = static_cast<SwigDirector_set_piece_hashes_listener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_set_1piece_1hashes_1listener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  set_piece_hashes_listener *obj = *((set_piece_hashes_listener **)&objarg);
  SwigDirector_set_piece_hashes_listener *director = static_cast<SwigDirector_set_piece_hashes_listener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_set_1piece_1hashes_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  libTAU::create_torrent *arg1 = 0 ;
  std::string *arg2 = 0 ;
  set_piece_hashes_listener *arg3 = (set_piece_hashes_listener *) 0 ;
  libTAU::error_code *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(libTAU::create_torrent **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::create_torrent & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(set_piece_hashes_listener **)&jarg3; 
  arg4 = *(libTAU::error_code **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libTAU::error_code & reference is null");
    return ;
  } 
  {
    try {
      set_piece_hashes_ex(*arg1,(std::string const &)*arg2,arg3,*arg4);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return ;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_read_1resume_1data_1ex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< std::int8_t > *arg1 = 0 ;
  lt::error_code *arg2 = 0 ;
  lt::load_torrent_limits *arg3 = 0 ;
  lt::add_torrent_params result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > const & reference is null");
    return 0;
  } 
  arg2 = *(lt::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::error_code & reference is null");
    return 0;
  } 
  arg3 = *(lt::load_torrent_limits **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::load_torrent_limits const & reference is null");
    return 0;
  } 
  {
    try {
      result = read_resume_data_ex((std::vector< signed char > const &)*arg1,*arg2,(libTAU::load_torrent_limits const &)*arg3);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(lt::add_torrent_params **)&jresult = new lt::add_torrent_params((const lt::add_torrent_params &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_read_1resume_1data_1ex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< std::int8_t > *arg1 = 0 ;
  lt::error_code *arg2 = 0 ;
  lt::add_torrent_params result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::int8_t > const & reference is null");
    return 0;
  } 
  arg2 = *(lt::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = read_resume_data_ex((std::vector< signed char > const &)*arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(lt::add_torrent_params **)&jresult = new lt::add_torrent_params((const lt::add_torrent_params &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_write_1resume_1data_1buf_1ex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  lt::add_torrent_params *arg1 = 0 ;
  std::vector< std::int8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(lt::add_torrent_params **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::add_torrent_params const & reference is null");
    return 0;
  } 
  {
    try {
      result = write_resume_data_buf_ex((libTAU::add_torrent_params const &)*arg1);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(std::vector< std::int8_t > **)&jresult = new std::vector< std::int8_t >((const std::vector< std::int8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_parse_1magnet_1uri(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  lt::error_code *arg2 = 0 ;
  lt::add_torrent_params result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(lt::error_code **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "lt::error_code & reference is null");
    return 0;
  } 
  {
    try {
      result = parse_magnet_uri((std::string const &)*arg1,*arg2);
    } catch (std::exception& e) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, e.what());
      return 0;
    } catch (...) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unknown exception type");
      return 0;
    }
  }
  *(lt::add_torrent_params **)&jresult = new lt::add_torrent_params((const lt::add_torrent_params &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_torrent_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::torrent_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::torrent_alert **)&baseptr = *(libTAU::peer_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_udp_1error_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::udp_error_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_external_1ip_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::external_ip_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1failed_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::listen_failed_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_listen_1succeeded_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::listen_succeeded_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1error_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::portmap_error_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::portmap_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_portmap_1log_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::portmap_log_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1announce_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_announce_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_get_peers_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1bootstrap_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_bootstrap_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1start_1over_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::session_start_over_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_incoming_1connection_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::incoming_connection_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_state_1update_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::state_update_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stop_1over_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::session_stop_over_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::session_stats_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1error_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_error_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1immutable_1item_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_immutable_item_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1mutable_1item_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_mutable_item_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1put_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_put_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1outgoing_1get_1peers_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_outgoing_get_peers_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_log_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::log_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_peer_1log_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::peer_alert **)&baseptr = *(libTAU::peer_log_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1stats_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_stats_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1log_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_log_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1pkt_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_pkt_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1get_1peers_1reply_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_get_peers_reply_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1direct_1response_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_direct_response_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_picker_1log_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::peer_alert **)&baseptr = *(libTAU::picker_log_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1error_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::session_error_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1live_1nodes_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_live_nodes_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1stats_1header_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::session_stats_header_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_dht_1sample_1infohashes_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::dht_sample_infohashes_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_alerts_1dropped_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::alerts_dropped_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_socks5_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::socks5_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1device_1id_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::communication_new_device_id_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1new_1message_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::communication_new_message_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1confirmation_1root_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::communication_confirmation_root_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1syncing_1message_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::communication_syncing_message_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1friend_1info_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::communication_friend_info_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1log_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::communication_log_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_communication_1last_1seen_1alert_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::alert **)&baseptr = *(libTAU::communication_last_seen_alert **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_settings_1pack_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::settings_interface **)&baseptr = *(libTAU::settings_pack **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_libTAU4j_swig_libTAU_1jni_session_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libTAU::session_handle **)&baseptr = *(libTAU::session **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_org_libTAU4j_swig_libTAU_1jni_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[3] = {
    {
      "SwigDirector_alert_notify_callback_on_alert", "(Lorg/libTAU4j/swig/alert_notify_callback;)V" 
    },
    {
      "SwigDirector_add_files_listener_pred", "(Lorg/libTAU4j/swig/add_files_listener;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_set_piece_hashes_listener_progress", "(Lorg/libTAU4j/swig/set_piece_hashes_listener;I)V" 
    }
  };
  Swig::jclass_libTAU_jni = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_libTAU_jni) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

