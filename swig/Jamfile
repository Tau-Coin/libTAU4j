import os ;
import feature : feature ;

BOOST_ROOT = [ os.environ BOOST_ROOT ] ;
ECHO "BOOST_ROOT = "$(BOOST_ROOT) ;
if ! $(BOOST_ROOT)
{
	EXIT "You need to define BOOST_ROOT" ;
}

OPENSSL_ROOT = [ os.environ OPENSSL_ROOT ] ;
ECHO "OPENSSL_ROOT = "$(OPENSSL_ROOT) ;
if ! $(OPENSSL_ROOT)
{
	EXIT "You need to define OPENSSL_ROOT" ;
}

LIBTORRENT_ROOT = [ os.environ LIBTORRENT_ROOT ] ;
ECHO "LIBTORRENT_ROOT = "$(LIBTORRENT_ROOT) ;
if ! $(LIBTORRENT_ROOT)
{
	EXIT "You need to define LIBTORRENT_ROOT" ;
}

LEVELDB_ROOT = [ os.environ LEVELDB_ROOT ] ;
ECHO "LEVELDB_ROOT = "$(LEVELDB_ROOT) ;
if ! $(LEVELDB_ROOT)
{
	EXIT "You need to define LEVELDB_ROOT" ;
}

SQLITE_ROOT = [ os.environ SQLITE_ROOT ] ;
ECHO "SQLITE_ROOT = "$(SQLITE_ROOT) ;
if ! $(SQLITE_ROOT)
{
	EXIT "You need to define SQLITE_ROOT" ;
}

use-project /torrent : $(LIBTORRENT_ROOT) ;

rule libtorrent_linking ( properties * )
{
    local result ;

    result += <deprecated-functions>off ;
    result += <logging>on ;
    result += <crypto>openssl ;
    result += <webtorrent>off ;
    result += <optimization>speed ;
    result += <cxxstd>17 ;

    result += <library>/torrent//torrent/<link>static ;

    return $(result) ;
}

feature iostream : off on : composite propagated link-incompatible ;
feature.compose <iostream>off : <define>BOOST_NO_IOSTREAM ;

feature ssl : on off : composite propagated link-incompatible ;
feature.compose <ssl>on :
    <openssl-include>$(OPENSSL_ROOT)/include
    <openssl-lib>$(OPENSSL_ROOT)/lib
    ;

lib TAU4j

    : # sources
	 libTAU_jni.cpp

    : # requirements
    <conditional>@libtorrent_linking
    <include>.

    : # default build
    <link>shared

    : # usage-requirements
    <include>.
    ;
