/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.libTAU4j.swig;

public final class libTAU_errors {
  public final static libTAU_errors libTAU_no_error = new libTAU_errors("libTAU_no_error", libTAU_jni.libTAU_no_error_get());
  public final static libTAU_errors file_collision = new libTAU_errors("file_collision");
  public final static libTAU_errors failed_hash_check = new libTAU_errors("failed_hash_check");
  public final static libTAU_errors torrent_is_no_dict = new libTAU_errors("torrent_is_no_dict");
  public final static libTAU_errors torrent_missing_info = new libTAU_errors("torrent_missing_info");
  public final static libTAU_errors torrent_info_no_dict = new libTAU_errors("torrent_info_no_dict");
  public final static libTAU_errors torrent_missing_piece_length = new libTAU_errors("torrent_missing_piece_length");
  public final static libTAU_errors torrent_missing_name = new libTAU_errors("torrent_missing_name");
  public final static libTAU_errors torrent_invalid_name = new libTAU_errors("torrent_invalid_name");
  public final static libTAU_errors torrent_invalid_length = new libTAU_errors("torrent_invalid_length");
  public final static libTAU_errors torrent_file_parse_failed = new libTAU_errors("torrent_file_parse_failed");
  public final static libTAU_errors torrent_missing_pieces = new libTAU_errors("torrent_missing_pieces");
  public final static libTAU_errors torrent_invalid_hashes = new libTAU_errors("torrent_invalid_hashes");
  public final static libTAU_errors too_many_pieces_in_torrent = new libTAU_errors("too_many_pieces_in_torrent");
  public final static libTAU_errors invalid_swarm_metadata = new libTAU_errors("invalid_swarm_metadata");
  public final static libTAU_errors invalid_bencoding = new libTAU_errors("invalid_bencoding");
  public final static libTAU_errors no_files_in_torrent = new libTAU_errors("no_files_in_torrent");
  public final static libTAU_errors invalid_escaped_string = new libTAU_errors("invalid_escaped_string");
  public final static libTAU_errors session_is_closing = new libTAU_errors("session_is_closing");
  public final static libTAU_errors duplicate_torrent = new libTAU_errors("duplicate_torrent");
  public final static libTAU_errors invalid_torrent_handle = new libTAU_errors("invalid_torrent_handle");
  public final static libTAU_errors invalid_entry_type = new libTAU_errors("invalid_entry_type");
  public final static libTAU_errors missing_info_hash_in_uri = new libTAU_errors("missing_info_hash_in_uri");
  public final static libTAU_errors file_too_short = new libTAU_errors("file_too_short");
  public final static libTAU_errors unsupported_url_protocol = new libTAU_errors("unsupported_url_protocol");
  public final static libTAU_errors url_parse_error = new libTAU_errors("url_parse_error");
  public final static libTAU_errors peer_sent_empty_piece = new libTAU_errors("peer_sent_empty_piece");
  public final static libTAU_errors parse_failed = new libTAU_errors("parse_failed");
  public final static libTAU_errors invalid_file_tag = new libTAU_errors("invalid_file_tag");
  public final static libTAU_errors missing_info_hash = new libTAU_errors("missing_info_hash");
  public final static libTAU_errors mismatching_info_hash = new libTAU_errors("mismatching_info_hash");
  public final static libTAU_errors invalid_hostname = new libTAU_errors("invalid_hostname");
  public final static libTAU_errors invalid_port = new libTAU_errors("invalid_port");
  public final static libTAU_errors port_blocked = new libTAU_errors("port_blocked");
  public final static libTAU_errors expected_close_bracket_in_address = new libTAU_errors("expected_close_bracket_in_address");
  public final static libTAU_errors destructing_torrent = new libTAU_errors("destructing_torrent");
  public final static libTAU_errors timed_out = new libTAU_errors("timed_out");
  public final static libTAU_errors upload_upload_connection = new libTAU_errors("upload_upload_connection");
  public final static libTAU_errors uninteresting_upload_peer = new libTAU_errors("uninteresting_upload_peer");
  public final static libTAU_errors invalid_info_hash = new libTAU_errors("invalid_info_hash");
  public final static libTAU_errors torrent_paused = new libTAU_errors("torrent_paused");
  public final static libTAU_errors invalid_have = new libTAU_errors("invalid_have");
  public final static libTAU_errors invalid_bitfield_size = new libTAU_errors("invalid_bitfield_size");
  public final static libTAU_errors too_many_requests_when_choked = new libTAU_errors("too_many_requests_when_choked");
  public final static libTAU_errors invalid_piece = new libTAU_errors("invalid_piece");
  public final static libTAU_errors no_memory = new libTAU_errors("no_memory");
  public final static libTAU_errors torrent_aborted = new libTAU_errors("torrent_aborted");
  public final static libTAU_errors self_connection = new libTAU_errors("self_connection");
  public final static libTAU_errors invalid_piece_size = new libTAU_errors("invalid_piece_size");
  public final static libTAU_errors timed_out_no_interest = new libTAU_errors("timed_out_no_interest");
  public final static libTAU_errors timed_out_inactivity = new libTAU_errors("timed_out_inactivity");
  public final static libTAU_errors timed_out_no_handshake = new libTAU_errors("timed_out_no_handshake");
  public final static libTAU_errors timed_out_no_request = new libTAU_errors("timed_out_no_request");
  public final static libTAU_errors invalid_choke = new libTAU_errors("invalid_choke");
  public final static libTAU_errors invalid_unchoke = new libTAU_errors("invalid_unchoke");
  public final static libTAU_errors invalid_interested = new libTAU_errors("invalid_interested");
  public final static libTAU_errors invalid_not_interested = new libTAU_errors("invalid_not_interested");
  public final static libTAU_errors invalid_request = new libTAU_errors("invalid_request");
  public final static libTAU_errors invalid_hash_list = new libTAU_errors("invalid_hash_list");
  public final static libTAU_errors invalid_hash_piece = new libTAU_errors("invalid_hash_piece");
  public final static libTAU_errors invalid_cancel = new libTAU_errors("invalid_cancel");
  public final static libTAU_errors invalid_dht_port = new libTAU_errors("invalid_dht_port");
  public final static libTAU_errors invalid_suggest = new libTAU_errors("invalid_suggest");
  public final static libTAU_errors invalid_have_all = new libTAU_errors("invalid_have_all");
  public final static libTAU_errors invalid_have_none = new libTAU_errors("invalid_have_none");
  public final static libTAU_errors invalid_reject = new libTAU_errors("invalid_reject");
  public final static libTAU_errors invalid_allow_fast = new libTAU_errors("invalid_allow_fast");
  public final static libTAU_errors invalid_extended = new libTAU_errors("invalid_extended");
  public final static libTAU_errors invalid_message = new libTAU_errors("invalid_message");
  public final static libTAU_errors sync_hash_not_found = new libTAU_errors("sync_hash_not_found");
  public final static libTAU_errors invalid_encryption_constant = new libTAU_errors("invalid_encryption_constant");
  public final static libTAU_errors no_plaintext_mode = new libTAU_errors("no_plaintext_mode");
  public final static libTAU_errors no_rc4_mode = new libTAU_errors("no_rc4_mode");
  public final static libTAU_errors unsupported_encryption_mode = new libTAU_errors("unsupported_encryption_mode");
  public final static libTAU_errors unsupported_encryption_mode_selected = new libTAU_errors("unsupported_encryption_mode_selected");
  public final static libTAU_errors invalid_pad_size = new libTAU_errors("invalid_pad_size");
  public final static libTAU_errors invalid_encrypt_handshake = new libTAU_errors("invalid_encrypt_handshake");
  public final static libTAU_errors no_incoming_encrypted = new libTAU_errors("no_incoming_encrypted");
  public final static libTAU_errors no_incoming_regular = new libTAU_errors("no_incoming_regular");
  public final static libTAU_errors duplicate_peer_id = new libTAU_errors("duplicate_peer_id");
  public final static libTAU_errors torrent_removed = new libTAU_errors("torrent_removed");
  public final static libTAU_errors packet_too_large = new libTAU_errors("packet_too_large");
  public final static libTAU_errors reserved = new libTAU_errors("reserved");
  public final static libTAU_errors http_error = new libTAU_errors("http_error");
  public final static libTAU_errors missing_location = new libTAU_errors("missing_location");
  public final static libTAU_errors invalid_redirection = new libTAU_errors("invalid_redirection");
  public final static libTAU_errors redirecting = new libTAU_errors("redirecting");
  public final static libTAU_errors invalid_range = new libTAU_errors("invalid_range");
  public final static libTAU_errors no_content_length = new libTAU_errors("no_content_length");
  public final static libTAU_errors banned_by_ip_filter = new libTAU_errors("banned_by_ip_filter");
  public final static libTAU_errors too_many_connections = new libTAU_errors("too_many_connections");
  public final static libTAU_errors peer_banned = new libTAU_errors("peer_banned");
  public final static libTAU_errors stopping_torrent = new libTAU_errors("stopping_torrent");
  public final static libTAU_errors too_many_corrupt_pieces = new libTAU_errors("too_many_corrupt_pieces");
  public final static libTAU_errors torrent_not_ready = new libTAU_errors("torrent_not_ready");
  public final static libTAU_errors peer_not_constructed = new libTAU_errors("peer_not_constructed");
  public final static libTAU_errors session_closing = new libTAU_errors("session_closing");
  public final static libTAU_errors optimistic_disconnect = new libTAU_errors("optimistic_disconnect");
  public final static libTAU_errors torrent_finished = new libTAU_errors("torrent_finished");
  public final static libTAU_errors no_router = new libTAU_errors("no_router");
  public final static libTAU_errors metadata_too_large = new libTAU_errors("metadata_too_large");
  public final static libTAU_errors invalid_metadata_request = new libTAU_errors("invalid_metadata_request");
  public final static libTAU_errors invalid_metadata_size = new libTAU_errors("invalid_metadata_size");
  public final static libTAU_errors invalid_metadata_offset = new libTAU_errors("invalid_metadata_offset");
  public final static libTAU_errors invalid_metadata_message = new libTAU_errors("invalid_metadata_message");
  public final static libTAU_errors pex_message_too_large = new libTAU_errors("pex_message_too_large");
  public final static libTAU_errors invalid_pex_message = new libTAU_errors("invalid_pex_message");
  public final static libTAU_errors invalid_lt_tracker_message = new libTAU_errors("invalid_lt_tracker_message");
  public final static libTAU_errors too_frequent_pex = new libTAU_errors("too_frequent_pex");
  public final static libTAU_errors no_metadata = new libTAU_errors("no_metadata");
  public final static libTAU_errors invalid_dont_have = new libTAU_errors("invalid_dont_have");
  public final static libTAU_errors requires_ssl_connection = new libTAU_errors("requires_ssl_connection");
  public final static libTAU_errors invalid_ssl_cert = new libTAU_errors("invalid_ssl_cert");
  public final static libTAU_errors not_an_ssl_torrent = new libTAU_errors("not_an_ssl_torrent");
  public final static libTAU_errors banned_by_port_filter = new libTAU_errors("banned_by_port_filter");
  public final static libTAU_errors invalid_session_handle = new libTAU_errors("invalid_session_handle");
  public final static libTAU_errors invalid_listen_socket = new libTAU_errors("invalid_listen_socket");
  public final static libTAU_errors invalid_hash_request = new libTAU_errors("invalid_hash_request");
  public final static libTAU_errors invalid_hashes = new libTAU_errors("invalid_hashes");
  public final static libTAU_errors invalid_hash_reject = new libTAU_errors("invalid_hash_reject");
  public final static libTAU_errors missing_file_sizes = new libTAU_errors("missing_file_sizes", libTAU_jni.missing_file_sizes_get());
  public final static libTAU_errors no_files_in_resume_data = new libTAU_errors("no_files_in_resume_data");
  public final static libTAU_errors missing_pieces = new libTAU_errors("missing_pieces");
  public final static libTAU_errors mismatching_number_of_files = new libTAU_errors("mismatching_number_of_files");
  public final static libTAU_errors mismatching_file_size = new libTAU_errors("mismatching_file_size");
  public final static libTAU_errors mismatching_file_timestamp = new libTAU_errors("mismatching_file_timestamp");
  public final static libTAU_errors not_a_dictionary = new libTAU_errors("not_a_dictionary");
  public final static libTAU_errors invalid_blocks_per_piece = new libTAU_errors("invalid_blocks_per_piece");
  public final static libTAU_errors missing_slots = new libTAU_errors("missing_slots");
  public final static libTAU_errors too_many_slots = new libTAU_errors("too_many_slots");
  public final static libTAU_errors invalid_slot_list = new libTAU_errors("invalid_slot_list");
  public final static libTAU_errors invalid_piece_index = new libTAU_errors("invalid_piece_index");
  public final static libTAU_errors pieces_need_reorder = new libTAU_errors("pieces_need_reorder");
  public final static libTAU_errors resume_data_not_modified = new libTAU_errors("resume_data_not_modified");
  public final static libTAU_errors too_many_duplicate_filenames = new libTAU_errors("too_many_duplicate_filenames");
  public final static libTAU_errors http_parse_error = new libTAU_errors("http_parse_error", libTAU_jni.http_parse_error_get());
  public final static libTAU_errors http_missing_location = new libTAU_errors("http_missing_location");
  public final static libTAU_errors http_failed_decompress = new libTAU_errors("http_failed_decompress");
  public final static libTAU_errors no_i2p_router = new libTAU_errors("no_i2p_router", libTAU_jni.no_i2p_router_get());
  public final static libTAU_errors no_i2p_endpoint = new libTAU_errors("no_i2p_endpoint", libTAU_jni.no_i2p_endpoint_get());
  public final static libTAU_errors scrape_not_available = new libTAU_errors("scrape_not_available", libTAU_jni.scrape_not_available_get());
  public final static libTAU_errors invalid_tracker_response = new libTAU_errors("invalid_tracker_response");
  public final static libTAU_errors invalid_peer_dict = new libTAU_errors("invalid_peer_dict");
  public final static libTAU_errors tracker_failure = new libTAU_errors("tracker_failure");
  public final static libTAU_errors invalid_files_entry = new libTAU_errors("invalid_files_entry");
  public final static libTAU_errors invalid_hash_entry = new libTAU_errors("invalid_hash_entry");
  public final static libTAU_errors invalid_peers_entry = new libTAU_errors("invalid_peers_entry");
  public final static libTAU_errors invalid_tracker_response_length = new libTAU_errors("invalid_tracker_response_length");
  public final static libTAU_errors invalid_tracker_transaction_id = new libTAU_errors("invalid_tracker_transaction_id");
  public final static libTAU_errors invalid_tracker_action = new libTAU_errors("invalid_tracker_action");
  public final static libTAU_errors announce_skipped = new libTAU_errors("announce_skipped");
  public final static libTAU_errors no_entropy = new libTAU_errors("no_entropy", libTAU_jni.no_entropy_get());
  public final static libTAU_errors ssrf_mitigation = new libTAU_errors("ssrf_mitigation");
  public final static libTAU_errors blocked_by_idna = new libTAU_errors("blocked_by_idna");
  public final static libTAU_errors torrent_unknown_version = new libTAU_errors("torrent_unknown_version", libTAU_jni.torrent_unknown_version_get());
  public final static libTAU_errors torrent_missing_file_tree = new libTAU_errors("torrent_missing_file_tree");
  public final static libTAU_errors torrent_missing_meta_version = new libTAU_errors("torrent_missing_meta_version");
  public final static libTAU_errors torrent_inconsistent_files = new libTAU_errors("torrent_inconsistent_files");
  public final static libTAU_errors torrent_missing_piece_layer = new libTAU_errors("torrent_missing_piece_layer");
  public final static libTAU_errors torrent_invalid_piece_layer = new libTAU_errors("torrent_invalid_piece_layer");
  public final static libTAU_errors torrent_missing_pieces_root = new libTAU_errors("torrent_missing_pieces_root");
  public final static libTAU_errors torrent_inconsistent_hashes = new libTAU_errors("torrent_inconsistent_hashes");
  public final static libTAU_errors torrent_invalid_pad_file = new libTAU_errors("torrent_invalid_pad_file");
  public final static libTAU_errors error_code_max = new libTAU_errors("error_code_max");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static libTAU_errors swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + libTAU_errors.class + " with value " + swigValue);
  }

  private libTAU_errors(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private libTAU_errors(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private libTAU_errors(String swigName, libTAU_errors swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static libTAU_errors[] swigValues = { libTAU_no_error, file_collision, failed_hash_check, torrent_is_no_dict, torrent_missing_info, torrent_info_no_dict, torrent_missing_piece_length, torrent_missing_name, torrent_invalid_name, torrent_invalid_length, torrent_file_parse_failed, torrent_missing_pieces, torrent_invalid_hashes, too_many_pieces_in_torrent, invalid_swarm_metadata, invalid_bencoding, no_files_in_torrent, invalid_escaped_string, session_is_closing, duplicate_torrent, invalid_torrent_handle, invalid_entry_type, missing_info_hash_in_uri, file_too_short, unsupported_url_protocol, url_parse_error, peer_sent_empty_piece, parse_failed, invalid_file_tag, missing_info_hash, mismatching_info_hash, invalid_hostname, invalid_port, port_blocked, expected_close_bracket_in_address, destructing_torrent, timed_out, upload_upload_connection, uninteresting_upload_peer, invalid_info_hash, torrent_paused, invalid_have, invalid_bitfield_size, too_many_requests_when_choked, invalid_piece, no_memory, torrent_aborted, self_connection, invalid_piece_size, timed_out_no_interest, timed_out_inactivity, timed_out_no_handshake, timed_out_no_request, invalid_choke, invalid_unchoke, invalid_interested, invalid_not_interested, invalid_request, invalid_hash_list, invalid_hash_piece, invalid_cancel, invalid_dht_port, invalid_suggest, invalid_have_all, invalid_have_none, invalid_reject, invalid_allow_fast, invalid_extended, invalid_message, sync_hash_not_found, invalid_encryption_constant, no_plaintext_mode, no_rc4_mode, unsupported_encryption_mode, unsupported_encryption_mode_selected, invalid_pad_size, invalid_encrypt_handshake, no_incoming_encrypted, no_incoming_regular, duplicate_peer_id, torrent_removed, packet_too_large, reserved, http_error, missing_location, invalid_redirection, redirecting, invalid_range, no_content_length, banned_by_ip_filter, too_many_connections, peer_banned, stopping_torrent, too_many_corrupt_pieces, torrent_not_ready, peer_not_constructed, session_closing, optimistic_disconnect, torrent_finished, no_router, metadata_too_large, invalid_metadata_request, invalid_metadata_size, invalid_metadata_offset, invalid_metadata_message, pex_message_too_large, invalid_pex_message, invalid_lt_tracker_message, too_frequent_pex, no_metadata, invalid_dont_have, requires_ssl_connection, invalid_ssl_cert, not_an_ssl_torrent, banned_by_port_filter, invalid_session_handle, invalid_listen_socket, invalid_hash_request, invalid_hashes, invalid_hash_reject, missing_file_sizes, no_files_in_resume_data, missing_pieces, mismatching_number_of_files, mismatching_file_size, mismatching_file_timestamp, not_a_dictionary, invalid_blocks_per_piece, missing_slots, too_many_slots, invalid_slot_list, invalid_piece_index, pieces_need_reorder, resume_data_not_modified, too_many_duplicate_filenames, http_parse_error, http_missing_location, http_failed_decompress, no_i2p_router, no_i2p_endpoint, scrape_not_available, invalid_tracker_response, invalid_peer_dict, tracker_failure, invalid_files_entry, invalid_hash_entry, invalid_peers_entry, invalid_tracker_response_length, invalid_tracker_transaction_id, invalid_tracker_action, announce_skipped, no_entropy, ssrf_mitigation, blocked_by_idna, torrent_unknown_version, torrent_missing_file_tree, torrent_missing_meta_version, torrent_inconsistent_files, torrent_missing_piece_layer, torrent_invalid_piece_layer, torrent_missing_pieces_root, torrent_inconsistent_hashes, torrent_invalid_pad_file, error_code_max };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

