name: Linux

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  BOOST_DOT_VERSION: "1.76.0"
  BOOST_VERSION: "1_76_0"
  OPENSSL_VERSION: "1.1.1k"
  CXX: clang++-7, aarch64-linux-android-clang++
  CC: clang-7, aarch64-linux-android-clang

jobs:

  x86_64-b2:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: setup gcc
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt install clang-7 clang++-7
      - name: setup boost
        run: |
          wget -nv -O boost.tar.gz https://boostorg.jfrog.io/artifactory/main/release/${BOOST_DOT_VERSION}/source/boost_${BOOST_VERSION}.tar.gz
          tar xzf boost.tar.gz
          mv boost_${BOOST_VERSION} boost
          cd boost
          ./bootstrap.sh --with-toolset=clang
          cd ..
      - name: setup ndk
        run: |
          wget -nv -O android-ndk.zip https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux-x86_64.zip
          unzip -qq android-ndk.zip
          mv android-ndk-${NDK_VERSION} android-ndk
          ${PWD}/android-ndk/build/tools/make_standalone_toolchain.py --arch ${os_arch} --api ${android_api} --stl libc++ --install-dir ${TOOLCHAIN_FOLDER};
          export ANDROID_TOOLCHAIN="${PWD}/android-toolchain-arm64-api_22"
          export CXX="${ANDROID_TOOLCHAIN}/bin/aarch64-linux-android-clang++"
          export CC="${ANDROID_TOOLCHAIN}/bin/aarch64-linux-android-clang"
          export AR="${ANDROID_TOOLCHAIN}/bin/llvm-ar"
          export LD="${ANDROID_TOOLCHAIN}/bin/ld"
          export RANLIB="${ANDROID_TOOLCHAIN}/bin/llvm-ranlib"
      - name: setup openssl
        run: |
          wget -nv -O openssl.tar.gz https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
          tar xzf openssl.tar.gz
          cd openssl-${OPENSSL_VERSION}
          ./Configure linux-aarch64 ${OPENSSL_NO_OPTS} -fPIC --prefix=${PWD}/../openssl
          make &> /dev/null
          make install_sw &> /dev/null
          cd ..
      - name: leveldb
        run: |
          wget -nv -O leveldb.tar.gz https://github.com/google/leveldb/archive/refs/tags/1.23.tar.gz
          tar xzf leveldb.tar.gz
          cd leveldb
          vim CMakeLists.txt -> add_compile_options(-fPIC) && option(LEVELDB_BUILD_TESTS "Build LevelDB's unit tests" OFF) option(LEVELDB_BUILD_BENCHMARKS "Build LevelDB's benchmarks" OFF)
          mkdir build
          cd build
          cmake -D CMAKE_INSTALL_PREFIX=${PWD}/../../leveldb  ../
          make
          make install
      - name: sqlite
        run: |
          wget -nv -O sqlite.tar.gz https://sqlite.org/2021/sqlite-autoconf-3360000.tar.gz
          tar xzf sqlite.tar.gz
          cd sqlite
          ./configure --prefix=${SQLITE_ROOT} CFLAGS=-fPIC CXXFLAGS=-fPIC --host=arm-linux
          make
          make install
      - name: build
        run: |
          ../../build-android-arm64.sh
